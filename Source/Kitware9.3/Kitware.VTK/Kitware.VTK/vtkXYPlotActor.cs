using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkXYPlotActor
	/// </summary>
	/// <remarks>
	///    generate an x-y plot from input dataset(s) or field data
	///
	/// vtkXYPlotActor creates an x-y plot of data from one or more input data
	/// sets or field data. The class plots dataset scalar values (y-axis) against
	/// the points (x-axis). The x-axis values are generated by taking the point
	/// ids, computing a cumulative arc length, or a normalized arc length. More
	/// than one input data set can be specified to generate multiple plots.
	/// Alternatively, if field data is supplied as input, the class plots one
	/// component against another. (The user must specify which component to use
	/// as the x-axis and which for the y-axis.)
	///
	/// To use this class to plot dataset(s), you must specify one or more
	/// input datasets containing scalar and point data.  You'll probably also
	/// want to invoke a method to control how the point coordinates are converted
	/// into x values (by default point ids are used).
	///
	/// To use this class to plot field data, you must specify one or more input
	/// data objects with its associated field data. You'll also want to specify
	/// which component to use as the x-axis and which to use as the y-axis.
	/// Note that when plotting field data, the x and y values are used directly
	/// (i.e., there are no options to normalize the components).
	///
	/// Once you've set up the plot, you'll want to position it.  The
	/// PositionCoordinate defines the lower-left location of the x-y plot
	/// (specified in normalized viewport coordinates) and the Position2Coordinate
	/// define the upper-right corner. (Note: the Position2Coordinate is relative
	/// to PositionCoordinate, so you can move the vtkXYPlotActor around the
	/// viewport by setting just the PositionCoordinate.) The combination of the
	/// two position coordinates specifies a rectangle in which the plot will lie.
	///
	/// Optional features include the ability to specify axes labels, label
	/// format and plot title. You can also
	/// manually specify the x and y plot ranges (by default they are computed
	/// automatically). The Border instance variable is used to create space
	/// between the boundary of the plot window (specified by PositionCoordinate
	/// and Position2Coordinate) and the plot itself.
	///
	/// The font property of the plot title can be modified through the
	/// TitleTextProperty attribute.
	/// The font property of the axes titles and labels can be modified through the
	/// AxisTitleTextProperty and AxisLabelTextProperty attributes. You may also
	/// use the GetXAxisActor2D or GetYAxisActor2D methods
	/// to access each individual axis actor to modify their font properties.
	/// In the same way, the GetLegendBoxActor method can be used to access
	/// the legend box actor to modify its font properties.
	///
	/// There are several advanced features as well. You can assign per curve
	/// properties (such as color and a plot symbol). (Note that each input
	/// dataset and/or data object creates a single curve.) Another option is to
	/// add a plot legend that graphically indicates the correspondence between
	/// the curve, curve symbols, and the data source. You can also exchange the
	/// x and y axes if you prefer you plot orientation that way.
	///
	/// @warning
	/// If you are interested in plotting something other than scalar data, you
	/// can use the vtk data shuffling filters (e.g.,
	/// vtkAttributeDataToFieldDataFilter and vtkFieldDataToAttributeDataFilter)
	/// to convert the data into scalar data and/or points.
	///
	/// @par Thanks:
	/// This class was written by:
	/// Will Schroeder, Jim Miller, Charles Law, Sebastien Barre, Amy Squillacote,
	/// Ken Martin, Mathieu Malaterre, Jeff Lee, Francois Finet, Julien Bertel,
	/// Claire Guilbaud, and Philippe Pebay
	///
	/// </remarks>
	/// <seealso>
	///
	/// vtkActor2D vtkTextMapper vtkScalarBarActor vtkAxisActor2D vtkCubeAxesActor2D
	/// vtkAttributeDataToFieldDataFilter vtkFieldDataToAttributeDataFilter
	/// vtkTextProperty
	/// </seealso>
	// Token: 0x020003DB RID: 987
	public class vtkXYPlotActor : vtkActor2D
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x0600BB02 RID: 47874 RVA: 0x001060E5 File Offset: 0x001042E5
		static vtkXYPlotActor()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkXYPlotActor.MRClassNameKey, Type.GetType("Kitware.VTK.vtkXYPlotActor"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x0600BB03 RID: 47875 RVA: 0x0010610D File Offset: 0x0010430D
		public vtkXYPlotActor(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x0600BB04 RID: 47876
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Instantiate object with autorange computation; bold, italic, and shadows
		/// on; arial font family; the number of labels set to 5 for the x and y
		/// axes; a label format of "%-#6.3g"; and x coordinates computed from point
		/// ids.
		/// </summary>
		// Token: 0x0600BB05 RID: 47877 RVA: 0x0010611C File Offset: 0x0010431C
		public new static vtkXYPlotActor New()
		{
			vtkXYPlotActor result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkXYPlotActor)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		/// Instantiate object with autorange computation; bold, italic, and shadows
		/// on; arial font family; the number of labels set to 5 for the x and y
		/// axes; a label format of "%-#6.3g"; and x coordinates computed from point
		/// ids.
		/// </summary>
		// Token: 0x0600BB06 RID: 47878 RVA: 0x00106170 File Offset: 0x00104370
		public vtkXYPlotActor() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkXYPlotActor.vtkXYPlotActor_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x0600BB07 RID: 47879 RVA: 0x001061B4 File Offset: 0x001043B4
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x0600BB08 RID: 47880
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_AddDataObjectInput_01(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// Add a data object to the list of data to display.
		/// </summary>
		// Token: 0x0600BB09 RID: 47881 RVA: 0x001061C0 File Offset: 0x001043C0
		public void AddDataObjectInput(vtkDataObject arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_AddDataObjectInput_01(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x0600BB0A RID: 47882
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_AddDataObjectInputConnection_02(HandleRef pThis, HandleRef alg);

		/// <summary>
		/// Add a data object to the list of data to display.
		/// </summary>
		// Token: 0x0600BB0B RID: 47883 RVA: 0x001061F0 File Offset: 0x001043F0
		public void AddDataObjectInputConnection(vtkAlgorithmOutput alg)
		{
			vtkXYPlotActor.vtkXYPlotActor_AddDataObjectInputConnection_02(base.GetCppThis(), (alg == null) ? default(HandleRef) : alg.GetCppThis());
		}

		// Token: 0x0600BB0C RID: 47884
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_AddDataSetInput_03(HandleRef pThis, HandleRef ds, [MarshalAs(UnmanagedType.LPUTF8Str)] string arrayName, int component);

		/// <summary>
		/// Add a dataset to the list of data to append. The array name specifies
		/// which point array to plot. The array must be a vtkDataArray subclass, i.e.
		/// a numeric array. If the array name is NULL, then the default
		/// scalars are used.  The array can have multiple components, but only the
		/// first component is plotted. Note that AddInputDataSet() does not setup
		/// a pipeline connection whereas AddInputConnection() does.
		/// </summary>
		// Token: 0x0600BB0D RID: 47885 RVA: 0x00106220 File Offset: 0x00104420
		public void AddDataSetInput(vtkDataSet ds, string arrayName, int component)
		{
			vtkXYPlotActor.vtkXYPlotActor_AddDataSetInput_03(base.GetCppThis(), (ds == null) ? default(HandleRef) : ds.GetCppThis(), arrayName, component);
		}

		// Token: 0x0600BB0E RID: 47886
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_AddDataSetInput_04(HandleRef pThis, HandleRef ds);

		/// <summary>
		/// Add a dataset to the list of data to append. The array name specifies
		/// which point array to plot. The array must be a vtkDataArray subclass, i.e.
		/// a numeric array. If the array name is NULL, then the default
		/// scalars are used.  The array can have multiple components, but only the
		/// first component is plotted. Note that AddInputDataSet() does not setup
		/// a pipeline connection whereas AddInputConnection() does.
		/// </summary>
		// Token: 0x0600BB0F RID: 47887 RVA: 0x00106254 File Offset: 0x00104454
		public void AddDataSetInput(vtkDataSet ds)
		{
			vtkXYPlotActor.vtkXYPlotActor_AddDataSetInput_04(base.GetCppThis(), (ds == null) ? default(HandleRef) : ds.GetCppThis());
		}

		// Token: 0x0600BB10 RID: 47888
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_AddDataSetInputConnection_05(HandleRef pThis, HandleRef arg0, [MarshalAs(UnmanagedType.LPUTF8Str)] string arrayName, int component);

		/// <summary>
		/// Add a dataset to the list of data to append. The array name specifies
		/// which point array to plot. The array must be a vtkDataArray subclass, i.e.
		/// a numeric array. If the array name is NULL, then the default
		/// scalars are used.  The array can have multiple components, but only the
		/// first component is plotted. Note that AddInputDataSet() does not setup
		/// a pipeline connection whereas AddInputConnection() does.
		/// </summary>
		// Token: 0x0600BB11 RID: 47889 RVA: 0x00106284 File Offset: 0x00104484
		public void AddDataSetInputConnection(vtkAlgorithmOutput arg0, string arrayName, int component)
		{
			vtkXYPlotActor.vtkXYPlotActor_AddDataSetInputConnection_05(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis(), arrayName, component);
		}

		// Token: 0x0600BB12 RID: 47890
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_AddDataSetInputConnection_06(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// Add a dataset to the list of data to append. The array name specifies
		/// which point array to plot. The array must be a vtkDataArray subclass, i.e.
		/// a numeric array. If the array name is NULL, then the default
		/// scalars are used.  The array can have multiple components, but only the
		/// first component is plotted. Note that AddInputDataSet() does not setup
		/// a pipeline connection whereas AddInputConnection() does.
		/// </summary>
		// Token: 0x0600BB13 RID: 47891 RVA: 0x001062B8 File Offset: 0x001044B8
		public void AddDataSetInputConnection(vtkAlgorithmOutput arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_AddDataSetInputConnection_06(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x0600BB14 RID: 47892
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_AddUserCurvesPoint_07(HandleRef pThis, double arg0, double arg1, double arg2);

		/// <summary>
		/// Set plot properties
		/// </summary>
		// Token: 0x0600BB15 RID: 47893 RVA: 0x001062E7 File Offset: 0x001044E7
		public virtual void AddUserCurvesPoint(double arg0, double arg1, double arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_AddUserCurvesPoint_07(base.GetCppThis(), arg0, arg1, arg2);
		}

		// Token: 0x0600BB16 RID: 47894
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_AdjustTitlePositionOff_08(HandleRef pThis);

		/// <summary>
		/// If true, the xyplot actor will adjust the position of the title
		/// automatically to be upper-middle. Default is true.
		/// </summary>
		// Token: 0x0600BB17 RID: 47895 RVA: 0x001062F9 File Offset: 0x001044F9
		public virtual void AdjustTitlePositionOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_AdjustTitlePositionOff_08(base.GetCppThis());
		}

		// Token: 0x0600BB18 RID: 47896
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_AdjustTitlePositionOn_09(HandleRef pThis);

		/// <summary>
		/// If true, the xyplot actor will adjust the position of the title
		/// automatically to be upper-middle. Default is true.
		/// </summary>
		// Token: 0x0600BB19 RID: 47897 RVA: 0x00106308 File Offset: 0x00104508
		public virtual void AdjustTitlePositionOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_AdjustTitlePositionOn_09(base.GetCppThis());
		}

		// Token: 0x0600BB1A RID: 47898
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ChartBorderOff_10(HandleRef pThis);

		/// <summary>
		/// Set/Get the flag that controls whether a box will be drawn/filled
		/// corresponding to the legend box.
		/// </summary>
		// Token: 0x0600BB1B RID: 47899 RVA: 0x00106317 File Offset: 0x00104517
		public virtual void ChartBorderOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_ChartBorderOff_10(base.GetCppThis());
		}

		// Token: 0x0600BB1C RID: 47900
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ChartBorderOn_11(HandleRef pThis);

		/// <summary>
		/// Set/Get the flag that controls whether a box will be drawn/filled
		/// corresponding to the legend box.
		/// </summary>
		// Token: 0x0600BB1D RID: 47901 RVA: 0x00106326 File Offset: 0x00104526
		public virtual void ChartBorderOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_ChartBorderOn_11(base.GetCppThis());
		}

		// Token: 0x0600BB1E RID: 47902
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ChartBoxOff_12(HandleRef pThis);

		/// <summary>
		/// Set/Get the flag that controls whether a box will be drawn/filled
		/// corresponding to the chart box.
		/// </summary>
		// Token: 0x0600BB1F RID: 47903 RVA: 0x00106335 File Offset: 0x00104535
		public virtual void ChartBoxOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_ChartBoxOff_12(base.GetCppThis());
		}

		// Token: 0x0600BB20 RID: 47904
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ChartBoxOn_13(HandleRef pThis);

		/// <summary>
		/// Set/Get the flag that controls whether a box will be drawn/filled
		/// corresponding to the chart box.
		/// </summary>
		// Token: 0x0600BB21 RID: 47905 RVA: 0x00106344 File Offset: 0x00104544
		public virtual void ChartBoxOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_ChartBoxOn_13(base.GetCppThis());
		}

		// Token: 0x0600BB22 RID: 47906
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ExchangeAxesOff_14(HandleRef pThis);

		/// <summary>
		/// Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
		/// vice-versa). Exchanging axes affects the labeling as well.
		/// </summary>
		// Token: 0x0600BB23 RID: 47907 RVA: 0x00106353 File Offset: 0x00104553
		public virtual void ExchangeAxesOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_ExchangeAxesOff_14(base.GetCppThis());
		}

		// Token: 0x0600BB24 RID: 47908
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ExchangeAxesOn_15(HandleRef pThis);

		/// <summary>
		/// Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
		/// vice-versa). Exchanging axes affects the labeling as well.
		/// </summary>
		// Token: 0x0600BB25 RID: 47909 RVA: 0x00106362 File Offset: 0x00104562
		public virtual void ExchangeAxesOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_ExchangeAxesOn_15(base.GetCppThis());
		}

		// Token: 0x0600BB26 RID: 47910
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetAdjustTitlePosition_16(HandleRef pThis);

		/// <summary>
		/// If true, the xyplot actor will adjust the position of the title
		/// automatically to be upper-middle. Default is true.
		/// </summary>
		// Token: 0x0600BB27 RID: 47911 RVA: 0x00106374 File Offset: 0x00104574
		public virtual int GetAdjustTitlePosition()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetAdjustTitlePosition_16(base.GetCppThis());
		}

		// Token: 0x0600BB28 RID: 47912
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetAdjustTitlePositionMode_17(HandleRef pThis);

		/// <summary>
		/// If AdjustTitlePosition is true, the xyplot actor will
		/// adjust the position of the title automatically depending on the
		/// given mode, the mode is a combination of the Alignment flags.
		/// by default: vtkXYPlotActor::AlignHCenter | vtkXYPlotActor::Top
		/// | vtkXYPlotActor::AlignAxisVCenter
		/// </summary>
		// Token: 0x0600BB29 RID: 47913 RVA: 0x00106394 File Offset: 0x00104594
		public virtual int GetAdjustTitlePositionMode()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetAdjustTitlePositionMode_17(base.GetCppThis());
		}

		// Token: 0x0600BB2A RID: 47914
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetAdjustXLabels_18(HandleRef pThis);

		/// <summary>
		/// Set/Get the flag that controls whether the labels and ticks are
		/// adjusted for "nice" numerical values to make it easier to read
		/// the labels. The adjustment is based in the Range instance variable.
		/// Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
		/// range and number of labels.
		/// </summary>
		// Token: 0x0600BB2B RID: 47915 RVA: 0x001063B4 File Offset: 0x001045B4
		public virtual int GetAdjustXLabels()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetAdjustXLabels_18(base.GetCppThis());
		}

		// Token: 0x0600BB2C RID: 47916
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetAdjustYLabels_19(HandleRef pThis);

		/// <summary>
		/// Set/Get the flag that controls whether the labels and ticks are
		/// adjusted for "nice" numerical values to make it easier to read
		/// the labels. The adjustment is based in the Range instance variable.
		/// Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
		/// range and number of labels.
		/// </summary>
		// Token: 0x0600BB2D RID: 47917 RVA: 0x001063D4 File Offset: 0x001045D4
		public virtual int GetAdjustYLabels()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetAdjustYLabels_19(base.GetCppThis());
		}

		// Token: 0x0600BB2E RID: 47918
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetAxisLabelTextProperty_20(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Set/Get the labels text property of all axes. Note that each axis can
		/// be controlled individually through the GetX/YAxisActor2D() methods.
		/// </summary>
		// Token: 0x0600BB2F RID: 47919 RVA: 0x001063F4 File Offset: 0x001045F4
		public virtual vtkTextProperty GetAxisLabelTextProperty()
		{
			vtkTextProperty vtkTextProperty = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetAxisLabelTextProperty_20(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkTextProperty = (vtkTextProperty)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkTextProperty.Register(null);
				}
			}
			return vtkTextProperty;
		}

		// Token: 0x0600BB30 RID: 47920
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetAxisTitleTextProperty_21(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Set/Get the title text property of all axes. Note that each axis can
		/// be controlled individually through the GetX/YAxisActor2D() methods.
		/// </summary>
		// Token: 0x0600BB31 RID: 47921 RVA: 0x00106464 File Offset: 0x00104664
		public virtual vtkTextProperty GetAxisTitleTextProperty()
		{
			vtkTextProperty vtkTextProperty = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetAxisTitleTextProperty_21(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkTextProperty = (vtkTextProperty)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkTextProperty.Register(null);
				}
			}
			return vtkTextProperty;
		}

		// Token: 0x0600BB32 RID: 47922
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetBorder_22(HandleRef pThis);

		/// <summary>
		/// Set/Get the spacing between the plot window and the plot. The value
		/// is specified in pixels.
		/// </summary>
		// Token: 0x0600BB33 RID: 47923 RVA: 0x001064D4 File Offset: 0x001046D4
		public virtual int GetBorder()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetBorder_22(base.GetCppThis());
		}

		// Token: 0x0600BB34 RID: 47924
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetBorderMaxValue_23(HandleRef pThis);

		/// <summary>
		/// Set/Get the spacing between the plot window and the plot. The value
		/// is specified in pixels.
		/// </summary>
		// Token: 0x0600BB35 RID: 47925 RVA: 0x001064F4 File Offset: 0x001046F4
		public virtual int GetBorderMaxValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetBorderMaxValue_23(base.GetCppThis());
		}

		// Token: 0x0600BB36 RID: 47926
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetBorderMinValue_24(HandleRef pThis);

		/// <summary>
		/// Set/Get the spacing between the plot window and the plot. The value
		/// is specified in pixels.
		/// </summary>
		// Token: 0x0600BB37 RID: 47927 RVA: 0x00106514 File Offset: 0x00104714
		public virtual int GetBorderMinValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetBorderMinValue_24(base.GetCppThis());
		}

		// Token: 0x0600BB38 RID: 47928
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetChartBorder_25(HandleRef pThis);

		/// <summary>
		/// Set/Get the flag that controls whether a box will be drawn/filled
		/// corresponding to the legend box.
		/// </summary>
		// Token: 0x0600BB39 RID: 47929 RVA: 0x00106534 File Offset: 0x00104734
		public virtual int GetChartBorder()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetChartBorder_25(base.GetCppThis());
		}

		// Token: 0x0600BB3A RID: 47930
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetChartBox_26(HandleRef pThis);

		/// <summary>
		/// Set/Get the flag that controls whether a box will be drawn/filled
		/// corresponding to the chart box.
		/// </summary>
		// Token: 0x0600BB3B RID: 47931 RVA: 0x00106554 File Offset: 0x00104754
		public virtual int GetChartBox()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetChartBox_26(base.GetCppThis());
		}

		// Token: 0x0600BB3C RID: 47932
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetChartBoxProperty_27(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Get the box vtkProperty2D.
		/// </summary>
		// Token: 0x0600BB3D RID: 47933 RVA: 0x00106574 File Offset: 0x00104774
		public vtkProperty2D GetChartBoxProperty()
		{
			vtkProperty2D vtkProperty2D = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetChartBoxProperty_27(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkProperty2D = (vtkProperty2D)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkProperty2D.Register(null);
				}
			}
			return vtkProperty2D;
		}

		// Token: 0x0600BB3E RID: 47934
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetDataObjectPlotMode_28(HandleRef pThis);

		/// <summary>
		/// Indicate whether to plot rows or columns. If plotting rows, then
		/// the dependent variables is taken from a specified row,
		/// versus rows (y).
		/// </summary>
		// Token: 0x0600BB3F RID: 47935 RVA: 0x001065E4 File Offset: 0x001047E4
		public virtual int GetDataObjectPlotMode()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetDataObjectPlotMode_28(base.GetCppThis());
		}

		// Token: 0x0600BB40 RID: 47936
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetDataObjectPlotModeAsString_29(HandleRef pThis);

		/// <summary>
		/// Indicate whether to plot rows or columns. If plotting rows, then
		/// the dependent variables is taken from a specified row,
		/// versus rows (y).
		/// </summary>
		// Token: 0x0600BB41 RID: 47937 RVA: 0x00106604 File Offset: 0x00104804
		public string GetDataObjectPlotModeAsString()
		{
			string s = Marshal.PtrToStringAnsi(vtkXYPlotActor.vtkXYPlotActor_GetDataObjectPlotModeAsString_29(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600BB42 RID: 47938
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetDataObjectPlotModeMaxValue_30(HandleRef pThis);

		/// <summary>
		/// Indicate whether to plot rows or columns. If plotting rows, then
		/// the dependent variables is taken from a specified row,
		/// versus rows (y).
		/// </summary>
		// Token: 0x0600BB43 RID: 47939 RVA: 0x00106640 File Offset: 0x00104840
		public virtual int GetDataObjectPlotModeMaxValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetDataObjectPlotModeMaxValue_30(base.GetCppThis());
		}

		// Token: 0x0600BB44 RID: 47940
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetDataObjectPlotModeMinValue_31(HandleRef pThis);

		/// <summary>
		/// Indicate whether to plot rows or columns. If plotting rows, then
		/// the dependent variables is taken from a specified row,
		/// versus rows (y).
		/// </summary>
		// Token: 0x0600BB45 RID: 47941 RVA: 0x00106660 File Offset: 0x00104860
		public virtual int GetDataObjectPlotModeMinValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetDataObjectPlotModeMinValue_31(base.GetCppThis());
		}

		// Token: 0x0600BB46 RID: 47942
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetDataObjectXComponent_32(HandleRef pThis, int i);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// independent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectXComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BB47 RID: 47943 RVA: 0x00106680 File Offset: 0x00104880
		public int GetDataObjectXComponent(int i)
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetDataObjectXComponent_32(base.GetCppThis(), i);
		}

		// Token: 0x0600BB48 RID: 47944
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetDataObjectYComponent_33(HandleRef pThis, int i);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BB49 RID: 47945 RVA: 0x001066A0 File Offset: 0x001048A0
		public int GetDataObjectYComponent(int i)
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetDataObjectYComponent_33(base.GetCppThis(), i);
		}

		// Token: 0x0600BB4A RID: 47946
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetExchangeAxes_34(HandleRef pThis);

		/// <summary>
		/// Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
		/// vice-versa). Exchanging axes affects the labeling as well.
		/// </summary>
		// Token: 0x0600BB4B RID: 47947 RVA: 0x001066C0 File Offset: 0x001048C0
		public virtual int GetExchangeAxes()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetExchangeAxes_34(base.GetCppThis());
		}

		// Token: 0x0600BB4C RID: 47948
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkXYPlotActor_GetGlyphSize_35(HandleRef pThis);

		/// <summary>
		/// Set/Get the factor that controls how big glyphs are in the plot.
		/// The number is expressed as a fraction of the length of the diagonal
		/// of the plot bounding box.
		/// </summary>
		// Token: 0x0600BB4D RID: 47949 RVA: 0x001066E0 File Offset: 0x001048E0
		public virtual double GetGlyphSize()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetGlyphSize_35(base.GetCppThis());
		}

		// Token: 0x0600BB4E RID: 47950
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkXYPlotActor_GetGlyphSizeMaxValue_36(HandleRef pThis);

		/// <summary>
		/// Set/Get the factor that controls how big glyphs are in the plot.
		/// The number is expressed as a fraction of the length of the diagonal
		/// of the plot bounding box.
		/// </summary>
		// Token: 0x0600BB4F RID: 47951 RVA: 0x00106700 File Offset: 0x00104900
		public virtual double GetGlyphSizeMaxValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetGlyphSizeMaxValue_36(base.GetCppThis());
		}

		// Token: 0x0600BB50 RID: 47952
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkXYPlotActor_GetGlyphSizeMinValue_37(HandleRef pThis);

		/// <summary>
		/// Set/Get the factor that controls how big glyphs are in the plot.
		/// The number is expressed as a fraction of the length of the diagonal
		/// of the plot bounding box.
		/// </summary>
		// Token: 0x0600BB51 RID: 47953 RVA: 0x00106720 File Offset: 0x00104920
		public virtual double GetGlyphSizeMinValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetGlyphSizeMinValue_37(base.GetCppThis());
		}

		// Token: 0x0600BB52 RID: 47954
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetGlyphSource_38(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Retrieve handles to the legend box and glyph source. This is useful
		/// if you would like to change the default behavior of the legend box
		/// or glyph source. For example, the default glyph can be changed from
		/// a line to a vertex plus line, etc.)
		/// </summary>
		// Token: 0x0600BB53 RID: 47955 RVA: 0x00106740 File Offset: 0x00104940
		public virtual vtkGlyphSource2D GetGlyphSource()
		{
			vtkGlyphSource2D vtkGlyphSource2D = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetGlyphSource_38(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkGlyphSource2D = (vtkGlyphSource2D)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkGlyphSource2D.Register(null);
				}
			}
			return vtkGlyphSource2D;
		}

		// Token: 0x0600BB54 RID: 47956
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetLabelFormat_39(HandleRef pThis);

		/// <summary>
		/// Set/Get the format with which to print the labels . This sets both X
		/// and Y label formats. GetLabelFormat() returns X label format.
		/// </summary>
		// Token: 0x0600BB55 RID: 47957 RVA: 0x001067B0 File Offset: 0x001049B0
		public string GetLabelFormat()
		{
			string s = Marshal.PtrToStringAnsi(vtkXYPlotActor.vtkXYPlotActor_GetLabelFormat_39(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600BB56 RID: 47958
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetLegend_40(HandleRef pThis);

		/// <summary>
		/// Enable/Disable the creation of a legend. If on, the legend labels will
		/// be created automatically unless the per plot legend symbol has been
		/// set.
		/// </summary>
		// Token: 0x0600BB57 RID: 47959 RVA: 0x001067EC File Offset: 0x001049EC
		public virtual int GetLegend()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetLegend_40(base.GetCppThis());
		}

		// Token: 0x0600BB58 RID: 47960
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetLegendActor_41(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Retrieve handles to the legend box and glyph source. This is useful
		/// if you would like to change the default behavior of the legend box
		/// or glyph source. For example, the default glyph can be changed from
		/// a line to a vertex plus line, etc.)
		/// </summary>
		// Token: 0x0600BB59 RID: 47961 RVA: 0x0010680C File Offset: 0x00104A0C
		public virtual vtkLegendBoxActor GetLegendActor()
		{
			vtkLegendBoxActor vtkLegendBoxActor = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetLegendActor_41(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkLegendBoxActor = (vtkLegendBoxActor)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkLegendBoxActor.Register(null);
				}
			}
			return vtkLegendBoxActor;
		}

		// Token: 0x0600BB5A RID: 47962
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetLegendPosition_42(HandleRef pThis);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BB5B RID: 47963 RVA: 0x0010687C File Offset: 0x00104A7C
		public virtual double[] GetLegendPosition()
		{
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetLegendPosition_42(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[2];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600BB5C RID: 47964
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetLegendPosition_43(HandleRef pThis, ref double _arg1, ref double _arg2);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BB5D RID: 47965 RVA: 0x001068C4 File Offset: 0x00104AC4
		public virtual void GetLegendPosition(ref double _arg1, ref double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetLegendPosition_43(base.GetCppThis(), ref _arg1, ref _arg2);
		}

		// Token: 0x0600BB5E RID: 47966
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetLegendPosition_44(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BB5F RID: 47967 RVA: 0x001068D5 File Offset: 0x00104AD5
		public virtual void GetLegendPosition(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetLegendPosition_44(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BB60 RID: 47968
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetLegendPosition2_45(HandleRef pThis);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BB61 RID: 47969 RVA: 0x001068E8 File Offset: 0x00104AE8
		public virtual double[] GetLegendPosition2()
		{
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetLegendPosition2_45(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[2];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600BB62 RID: 47970
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetLegendPosition2_46(HandleRef pThis, ref double _arg1, ref double _arg2);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BB63 RID: 47971 RVA: 0x00106930 File Offset: 0x00104B30
		public virtual void GetLegendPosition2(ref double _arg1, ref double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetLegendPosition2_46(base.GetCppThis(), ref _arg1, ref _arg2);
		}

		// Token: 0x0600BB64 RID: 47972
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetLegendPosition2_47(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BB65 RID: 47973 RVA: 0x00106941 File Offset: 0x00104B41
		public virtual void GetLegendPosition2(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetLegendPosition2_47(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BB66 RID: 47974
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetLogx_48(HandleRef pThis);

		/// <summary>
		/// Enable/Disable plotting of Log of x-values.
		/// </summary>
		// Token: 0x0600BB67 RID: 47975 RVA: 0x00106954 File Offset: 0x00104B54
		public virtual int GetLogx()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetLogx_48(base.GetCppThis());
		}

		// Token: 0x0600BB68 RID: 47976
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern ulong vtkXYPlotActor_GetMTime_49(HandleRef pThis);

		/// <summary>
		/// Take into account the modified time of internal helper classes.
		/// </summary>
		// Token: 0x0600BB69 RID: 47977 RVA: 0x00106974 File Offset: 0x00104B74
		public override ulong GetMTime()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetMTime_49(base.GetCppThis());
		}

		// Token: 0x0600BB6A RID: 47978
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkXYPlotActor_GetNumberOfGenerationsFromBase_50(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600BB6B RID: 47979 RVA: 0x00106994 File Offset: 0x00104B94
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfGenerationsFromBase_50(base.GetCppThis(), type);
		}

		// Token: 0x0600BB6C RID: 47980
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkXYPlotActor_GetNumberOfGenerationsFromBaseType_51([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600BB6D RID: 47981 RVA: 0x001069B4 File Offset: 0x00104BB4
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfGenerationsFromBaseType_51(type);
		}

		// Token: 0x0600BB6E RID: 47982
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetNumberOfXLabels_52(HandleRef pThis);

		/// <summary>
		/// Set/Get the number of annotation labels to show along the x and y axes.
		/// This values is a suggestion: the number of labels may vary depending
		/// on the particulars of the data. The convenience method
		/// SetNumberOfLabels() sets the number of x and y labels to the same value.
		/// </summary>
		// Token: 0x0600BB6F RID: 47983 RVA: 0x001069D0 File Offset: 0x00104BD0
		public virtual int GetNumberOfXLabels()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfXLabels_52(base.GetCppThis());
		}

		// Token: 0x0600BB70 RID: 47984
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetNumberOfXLabelsMaxValue_53(HandleRef pThis);

		/// <summary>
		/// Set/Get the number of annotation labels to show along the x and y axes.
		/// This values is a suggestion: the number of labels may vary depending
		/// on the particulars of the data. The convenience method
		/// SetNumberOfLabels() sets the number of x and y labels to the same value.
		/// </summary>
		// Token: 0x0600BB71 RID: 47985 RVA: 0x001069F0 File Offset: 0x00104BF0
		public virtual int GetNumberOfXLabelsMaxValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfXLabelsMaxValue_53(base.GetCppThis());
		}

		// Token: 0x0600BB72 RID: 47986
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetNumberOfXLabelsMinValue_54(HandleRef pThis);

		/// <summary>
		/// Set/Get the number of annotation labels to show along the x and y axes.
		/// This values is a suggestion: the number of labels may vary depending
		/// on the particulars of the data. The convenience method
		/// SetNumberOfLabels() sets the number of x and y labels to the same value.
		/// </summary>
		// Token: 0x0600BB73 RID: 47987 RVA: 0x00106A10 File Offset: 0x00104C10
		public virtual int GetNumberOfXLabelsMinValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfXLabelsMinValue_54(base.GetCppThis());
		}

		// Token: 0x0600BB74 RID: 47988
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetNumberOfXMinorTicks_55(HandleRef pThis);

		/// <summary>
		/// Set/Get the number of minor ticks in X or Y.
		/// </summary>
		// Token: 0x0600BB75 RID: 47989 RVA: 0x00106A30 File Offset: 0x00104C30
		public int GetNumberOfXMinorTicks()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfXMinorTicks_55(base.GetCppThis());
		}

		// Token: 0x0600BB76 RID: 47990
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetNumberOfYLabels_56(HandleRef pThis);

		/// <summary>
		/// Set/Get the number of annotation labels to show along the x and y axes.
		/// This values is a suggestion: the number of labels may vary depending
		/// on the particulars of the data. The convenience method
		/// SetNumberOfLabels() sets the number of x and y labels to the same value.
		/// </summary>
		// Token: 0x0600BB77 RID: 47991 RVA: 0x00106A50 File Offset: 0x00104C50
		public virtual int GetNumberOfYLabels()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfYLabels_56(base.GetCppThis());
		}

		// Token: 0x0600BB78 RID: 47992
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetNumberOfYLabelsMaxValue_57(HandleRef pThis);

		/// <summary>
		/// Set/Get the number of annotation labels to show along the x and y axes.
		/// This values is a suggestion: the number of labels may vary depending
		/// on the particulars of the data. The convenience method
		/// SetNumberOfLabels() sets the number of x and y labels to the same value.
		/// </summary>
		// Token: 0x0600BB79 RID: 47993 RVA: 0x00106A70 File Offset: 0x00104C70
		public virtual int GetNumberOfYLabelsMaxValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfYLabelsMaxValue_57(base.GetCppThis());
		}

		// Token: 0x0600BB7A RID: 47994
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetNumberOfYLabelsMinValue_58(HandleRef pThis);

		/// <summary>
		/// Set/Get the number of annotation labels to show along the x and y axes.
		/// This values is a suggestion: the number of labels may vary depending
		/// on the particulars of the data. The convenience method
		/// SetNumberOfLabels() sets the number of x and y labels to the same value.
		/// </summary>
		// Token: 0x0600BB7B RID: 47995 RVA: 0x00106A90 File Offset: 0x00104C90
		public virtual int GetNumberOfYLabelsMinValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfYLabelsMinValue_58(base.GetCppThis());
		}

		// Token: 0x0600BB7C RID: 47996
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetNumberOfYMinorTicks_59(HandleRef pThis);

		/// <summary>
		/// Set/Get the number of minor ticks in X or Y.
		/// </summary>
		// Token: 0x0600BB7D RID: 47997 RVA: 0x00106AB0 File Offset: 0x00104CB0
		public int GetNumberOfYMinorTicks()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetNumberOfYMinorTicks_59(base.GetCppThis());
		}

		// Token: 0x0600BB7E RID: 47998
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetPlotColor_60(HandleRef pThis, int i);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BB7F RID: 47999 RVA: 0x00106AD0 File Offset: 0x00104CD0
		public double[] GetPlotColor(int i)
		{
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetPlotColor_60(base.GetCppThis(), i);
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[3];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600BB80 RID: 48000
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetPlotCoordinate_61(HandleRef pThis);

		/// <summary>
		/// An alternate form of ViewportToPlotCoordinate() above. This method
		/// inputs the viewport coordinate pair (defined by the ivar
		/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
		/// </summary>
		// Token: 0x0600BB81 RID: 48001 RVA: 0x00106B1C File Offset: 0x00104D1C
		public virtual double[] GetPlotCoordinate()
		{
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetPlotCoordinate_61(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[2];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600BB82 RID: 48002
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetPlotCoordinate_62(HandleRef pThis, ref double _arg1, ref double _arg2);

		/// <summary>
		/// An alternate form of ViewportToPlotCoordinate() above. This method
		/// inputs the viewport coordinate pair (defined by the ivar
		/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
		/// </summary>
		// Token: 0x0600BB83 RID: 48003 RVA: 0x00106B64 File Offset: 0x00104D64
		public virtual void GetPlotCoordinate(ref double _arg1, ref double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetPlotCoordinate_62(base.GetCppThis(), ref _arg1, ref _arg2);
		}

		// Token: 0x0600BB84 RID: 48004
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetPlotCoordinate_63(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// An alternate form of ViewportToPlotCoordinate() above. This method
		/// inputs the viewport coordinate pair (defined by the ivar
		/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
		/// </summary>
		// Token: 0x0600BB85 RID: 48005 RVA: 0x00106B75 File Offset: 0x00104D75
		public virtual void GetPlotCoordinate(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetPlotCoordinate_63(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BB86 RID: 48006
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetPlotCurveLines_64(HandleRef pThis);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BB87 RID: 48007 RVA: 0x00106B88 File Offset: 0x00104D88
		public virtual int GetPlotCurveLines()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetPlotCurveLines_64(base.GetCppThis());
		}

		// Token: 0x0600BB88 RID: 48008
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetPlotCurvePoints_65(HandleRef pThis);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BB89 RID: 48009 RVA: 0x00106BA8 File Offset: 0x00104DA8
		public virtual int GetPlotCurvePoints()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetPlotCurvePoints_65(base.GetCppThis());
		}

		// Token: 0x0600BB8A RID: 48010
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetPlotLabel_66(HandleRef pThis, int i);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BB8B RID: 48011 RVA: 0x00106BC8 File Offset: 0x00104DC8
		public string GetPlotLabel(int i)
		{
			string s = Marshal.PtrToStringAnsi(vtkXYPlotActor.vtkXYPlotActor_GetPlotLabel_66(base.GetCppThis(), i));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600BB8C RID: 48012
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetPlotLines_67(HandleRef pThis);

		/// <summary>
		/// Set/Get whether the lines are rendered.  The line width can be set in
		/// the property object.
		/// </summary>
		// Token: 0x0600BB8D RID: 48013 RVA: 0x00106C04 File Offset: 0x00104E04
		public virtual int GetPlotLines()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetPlotLines_67(base.GetCppThis());
		}

		// Token: 0x0600BB8E RID: 48014
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetPlotLines_68(HandleRef pThis, int i);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BB8F RID: 48015 RVA: 0x00106C24 File Offset: 0x00104E24
		public int GetPlotLines(int i)
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetPlotLines_68(base.GetCppThis(), i);
		}

		// Token: 0x0600BB90 RID: 48016
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetPlotPoints_69(HandleRef pThis);

		/// <summary>
		/// Set/Get whether the points are rendered.  The point size can be set in
		/// the property object. This is a global flag which affects the plot only
		/// if per curve symbols are not defined.
		/// </summary>
		// Token: 0x0600BB91 RID: 48017 RVA: 0x00106C44 File Offset: 0x00104E44
		public virtual int GetPlotPoints()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetPlotPoints_69(base.GetCppThis());
		}

		// Token: 0x0600BB92 RID: 48018
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetPlotPoints_70(HandleRef pThis, int i);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BB93 RID: 48019 RVA: 0x00106C64 File Offset: 0x00104E64
		public int GetPlotPoints(int i)
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetPlotPoints_70(base.GetCppThis(), i);
		}

		// Token: 0x0600BB94 RID: 48020
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetPlotSymbol_71(HandleRef pThis, int i, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BB95 RID: 48021 RVA: 0x00106C84 File Offset: 0x00104E84
		public vtkPolyData GetPlotSymbol(int i)
		{
			vtkPolyData vtkPolyData = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetPlotSymbol_71(base.GetCppThis(), i, ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkPolyData = (vtkPolyData)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkPolyData.Register(null);
				}
			}
			return vtkPolyData;
		}

		// Token: 0x0600BB96 RID: 48022
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetPointComponent_72(HandleRef pThis, int i);

		/// <summary>
		/// If plotting points by value, which component to use to determine the
		/// value. This sets a value per each input dataset (i.e., the ith dataset).
		/// </summary>
		// Token: 0x0600BB97 RID: 48023 RVA: 0x00106CF4 File Offset: 0x00104EF4
		public int GetPointComponent(int i)
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetPointComponent_72(base.GetCppThis(), i);
		}

		// Token: 0x0600BB98 RID: 48024
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkXYPlotActor_GetReferenceXValue_73(HandleRef pThis);

		/// <summary>
		/// Set/Get the value for the X reference line
		/// </summary>
		// Token: 0x0600BB99 RID: 48025 RVA: 0x00106D14 File Offset: 0x00104F14
		public virtual double GetReferenceXValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetReferenceXValue_73(base.GetCppThis());
		}

		// Token: 0x0600BB9A RID: 48026
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkXYPlotActor_GetReferenceYValue_74(HandleRef pThis);

		/// <summary>
		/// Set/Get the value for the Y reference line
		/// </summary>
		// Token: 0x0600BB9B RID: 48027 RVA: 0x00106D34 File Offset: 0x00104F34
		public virtual double GetReferenceYValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetReferenceYValue_74(base.GetCppThis());
		}

		// Token: 0x0600BB9C RID: 48028
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetReverseXAxis_75(HandleRef pThis);

		/// <summary>
		/// Normally the x-axis is plotted from minimum to maximum. Setting this instance
		/// variable causes the x-axis to be plotted from maximum to minimum. Note that
		/// boolean always applies to the x-axis even if ExchangeAxes is set.
		/// </summary>
		// Token: 0x0600BB9D RID: 48029 RVA: 0x00106D54 File Offset: 0x00104F54
		public virtual int GetReverseXAxis()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetReverseXAxis_75(base.GetCppThis());
		}

		// Token: 0x0600BB9E RID: 48030
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetReverseYAxis_76(HandleRef pThis);

		/// <summary>
		/// Normally the y-axis is plotted from minimum to maximum. Setting this instance
		/// variable causes the y-axis to be plotted from maximum to minimum. Note that
		/// boolean always applies to the y-axis even if ExchangeAxes is set.
		/// </summary>
		// Token: 0x0600BB9F RID: 48031 RVA: 0x00106D74 File Offset: 0x00104F74
		public virtual int GetReverseYAxis()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetReverseYAxis_76(base.GetCppThis());
		}

		// Token: 0x0600BBA0 RID: 48032
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetShowReferenceXLine_77(HandleRef pThis);

		/// <summary>
		/// Set/Get if the X reference line is visible. hidden by default
		/// </summary>
		// Token: 0x0600BBA1 RID: 48033 RVA: 0x00106D94 File Offset: 0x00104F94
		public virtual int GetShowReferenceXLine()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetShowReferenceXLine_77(base.GetCppThis());
		}

		// Token: 0x0600BBA2 RID: 48034
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetShowReferenceYLine_78(HandleRef pThis);

		/// <summary>
		/// Set/Get if the Y reference line is visible. hidden by default
		/// </summary>
		// Token: 0x0600BBA3 RID: 48035 RVA: 0x00106DB4 File Offset: 0x00104FB4
		public virtual int GetShowReferenceYLine()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetShowReferenceYLine_78(base.GetCppThis());
		}

		// Token: 0x0600BBA4 RID: 48036
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetTitle_79(HandleRef pThis);

		/// <summary>
		/// Set/Get the title of the x-y plot.
		/// </summary>
		// Token: 0x0600BBA5 RID: 48037 RVA: 0x00106DD4 File Offset: 0x00104FD4
		public virtual string GetTitle()
		{
			string s = Marshal.PtrToStringAnsi(vtkXYPlotActor.vtkXYPlotActor_GetTitle_79(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600BBA6 RID: 48038
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetTitlePosition_80(HandleRef pThis);

		/// <summary>
		/// Set/Get the position of the title. This has no effect if
		/// AdjustTitlePosition is true.
		/// </summary>
		// Token: 0x0600BBA7 RID: 48039 RVA: 0x00106E10 File Offset: 0x00105010
		public virtual double[] GetTitlePosition()
		{
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetTitlePosition_80(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[2];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600BBA8 RID: 48040
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetTitlePosition_81(HandleRef pThis, ref double _arg1, ref double _arg2);

		/// <summary>
		/// Set/Get the position of the title. This has no effect if
		/// AdjustTitlePosition is true.
		/// </summary>
		// Token: 0x0600BBA9 RID: 48041 RVA: 0x00106E58 File Offset: 0x00105058
		public virtual void GetTitlePosition(ref double _arg1, ref double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetTitlePosition_81(base.GetCppThis(), ref _arg1, ref _arg2);
		}

		// Token: 0x0600BBAA RID: 48042
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetTitlePosition_82(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Set/Get the position of the title. This has no effect if
		/// AdjustTitlePosition is true.
		/// </summary>
		// Token: 0x0600BBAB RID: 48043 RVA: 0x00106E69 File Offset: 0x00105069
		public virtual void GetTitlePosition(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetTitlePosition_82(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BBAC RID: 48044
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetTitleTextProperty_83(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Set/Get the title text property.
		/// </summary>
		// Token: 0x0600BBAD RID: 48045 RVA: 0x00106E7C File Offset: 0x0010507C
		public virtual vtkTextProperty GetTitleTextProperty()
		{
			vtkTextProperty vtkTextProperty = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetTitleTextProperty_83(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkTextProperty = (vtkTextProperty)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkTextProperty.Register(null);
				}
			}
			return vtkTextProperty;
		}

		// Token: 0x0600BBAE RID: 48046
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetViewportCoordinate_84(HandleRef pThis);

		/// <summary>
		/// An alternate form of PlotToViewportCoordinate() above. This method
		/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
		/// and then stores them in the ivar ViewportCoordinate. (This method
		/// can be wrapped.)
		/// </summary>
		// Token: 0x0600BBAF RID: 48047 RVA: 0x00106EEC File Offset: 0x001050EC
		public virtual double[] GetViewportCoordinate()
		{
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetViewportCoordinate_84(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[2];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600BBB0 RID: 48048
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetViewportCoordinate_85(HandleRef pThis, ref double _arg1, ref double _arg2);

		/// <summary>
		/// An alternate form of PlotToViewportCoordinate() above. This method
		/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
		/// and then stores them in the ivar ViewportCoordinate. (This method
		/// can be wrapped.)
		/// </summary>
		// Token: 0x0600BBB1 RID: 48049 RVA: 0x00106F34 File Offset: 0x00105134
		public virtual void GetViewportCoordinate(ref double _arg1, ref double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetViewportCoordinate_85(base.GetCppThis(), ref _arg1, ref _arg2);
		}

		// Token: 0x0600BBB2 RID: 48050
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetViewportCoordinate_86(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// An alternate form of PlotToViewportCoordinate() above. This method
		/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
		/// and then stores them in the ivar ViewportCoordinate. (This method
		/// can be wrapped.)
		/// </summary>
		// Token: 0x0600BBB3 RID: 48051 RVA: 0x00106F45 File Offset: 0x00105145
		public virtual void GetViewportCoordinate(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetViewportCoordinate_86(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BBB4 RID: 48052
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetXAxisActor2D_87(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Retrieve handles to the X and Y axis (so that you can set their text
		/// properties for example)
		/// </summary>
		// Token: 0x0600BBB5 RID: 48053 RVA: 0x00106F58 File Offset: 0x00105158
		public vtkAxisActor2D GetXAxisActor2D()
		{
			vtkAxisActor2D vtkAxisActor2D = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetXAxisActor2D_87(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkAxisActor2D = (vtkAxisActor2D)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkAxisActor2D.Register(null);
				}
			}
			return vtkAxisActor2D;
		}

		// Token: 0x0600BBB6 RID: 48054
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetXLabelFormat_88(HandleRef pThis);

		/// <summary>
		/// Set/Get the format with which to print the X label.
		/// </summary>
		// Token: 0x0600BBB7 RID: 48055 RVA: 0x00106FC8 File Offset: 0x001051C8
		public virtual string GetXLabelFormat()
		{
			string s = Marshal.PtrToStringAnsi(vtkXYPlotActor.vtkXYPlotActor_GetXLabelFormat_88(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600BBB8 RID: 48056
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetXRange_89(HandleRef pThis);

		/// <summary>
		/// Set the plot range (range of independent and dependent variables)
		/// to plot. Data outside of the range will be clipped. If the plot
		/// range of either the x or y variables is set to (v1,v2), where
		/// v1 == v2, then the range will be computed automatically. Note that
		/// the x-range values should be consistent with the way the independent
		/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
		/// </summary>
		// Token: 0x0600BBB9 RID: 48057 RVA: 0x00107004 File Offset: 0x00105204
		public virtual double[] GetXRange()
		{
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetXRange_89(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[2];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600BBBA RID: 48058
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetXRange_90(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Set the plot range (range of independent and dependent variables)
		/// to plot. Data outside of the range will be clipped. If the plot
		/// range of either the x or y variables is set to (v1,v2), where
		/// v1 == v2, then the range will be computed automatically. Note that
		/// the x-range values should be consistent with the way the independent
		/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
		/// </summary>
		// Token: 0x0600BBBB RID: 48059 RVA: 0x0010704C File Offset: 0x0010524C
		public virtual void GetXRange(IntPtr data)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetXRange_90(base.GetCppThis(), data);
		}

		// Token: 0x0600BBBC RID: 48060
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetXTitle_91(HandleRef pThis);

		/// <summary>
		/// Set/Get the title of the x axis
		/// </summary>
		// Token: 0x0600BBBD RID: 48061 RVA: 0x0010705C File Offset: 0x0010525C
		public virtual string GetXTitle()
		{
			string s = Marshal.PtrToStringAnsi(vtkXYPlotActor.vtkXYPlotActor_GetXTitle_91(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600BBBE RID: 48062
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkXYPlotActor_GetXTitlePosition_92(HandleRef pThis);

		/// <summary>
		/// Set/Get the position of the title of X axis.
		/// </summary>
		// Token: 0x0600BBBF RID: 48063 RVA: 0x00107098 File Offset: 0x00105298
		public double GetXTitlePosition()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetXTitlePosition_92(base.GetCppThis());
		}

		// Token: 0x0600BBC0 RID: 48064
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetXValues_93(HandleRef pThis);

		/// <summary>
		/// Specify how the independent (x) variable is computed from the points.
		/// The independent variable can be the scalar/point index (i.e., point id),
		/// the accumulated arc length along the points, the normalized arc length,
		/// or by component value. If plotting datasets (e.g., points), the value
		/// that is used is specified by the PointComponent ivar.  (Note: these
		/// methods also control how field data is plotted. Field data is usually
		/// plotted by value or index, if plotting length 1-dimensional length
		/// measures are used.)
		/// </summary>
		// Token: 0x0600BBC1 RID: 48065 RVA: 0x001070B8 File Offset: 0x001052B8
		public virtual int GetXValues()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetXValues_93(base.GetCppThis());
		}

		// Token: 0x0600BBC2 RID: 48066
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetXValuesAsString_94(HandleRef pThis);

		/// <summary>
		/// Specify how the independent (x) variable is computed from the points.
		/// The independent variable can be the scalar/point index (i.e., point id),
		/// the accumulated arc length along the points, the normalized arc length,
		/// or by component value. If plotting datasets (e.g., points), the value
		/// that is used is specified by the PointComponent ivar.  (Note: these
		/// methods also control how field data is plotted. Field data is usually
		/// plotted by value or index, if plotting length 1-dimensional length
		/// measures are used.)
		/// </summary>
		// Token: 0x0600BBC3 RID: 48067 RVA: 0x001070D8 File Offset: 0x001052D8
		public string GetXValuesAsString()
		{
			string s = Marshal.PtrToStringAnsi(vtkXYPlotActor.vtkXYPlotActor_GetXValuesAsString_94(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600BBC4 RID: 48068
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetXValuesMaxValue_95(HandleRef pThis);

		/// <summary>
		/// Specify how the independent (x) variable is computed from the points.
		/// The independent variable can be the scalar/point index (i.e., point id),
		/// the accumulated arc length along the points, the normalized arc length,
		/// or by component value. If plotting datasets (e.g., points), the value
		/// that is used is specified by the PointComponent ivar.  (Note: these
		/// methods also control how field data is plotted. Field data is usually
		/// plotted by value or index, if plotting length 1-dimensional length
		/// measures are used.)
		/// </summary>
		// Token: 0x0600BBC5 RID: 48069 RVA: 0x00107114 File Offset: 0x00105314
		public virtual int GetXValuesMaxValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetXValuesMaxValue_95(base.GetCppThis());
		}

		// Token: 0x0600BBC6 RID: 48070
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetXValuesMinValue_96(HandleRef pThis);

		/// <summary>
		/// Specify how the independent (x) variable is computed from the points.
		/// The independent variable can be the scalar/point index (i.e., point id),
		/// the accumulated arc length along the points, the normalized arc length,
		/// or by component value. If plotting datasets (e.g., points), the value
		/// that is used is specified by the PointComponent ivar.  (Note: these
		/// methods also control how field data is plotted. Field data is usually
		/// plotted by value or index, if plotting length 1-dimensional length
		/// measures are used.)
		/// </summary>
		// Token: 0x0600BBC7 RID: 48071 RVA: 0x00107134 File Offset: 0x00105334
		public virtual int GetXValuesMinValue()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetXValuesMinValue_96(base.GetCppThis());
		}

		// Token: 0x0600BBC8 RID: 48072
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetYAxisActor2D_97(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Retrieve handles to the X and Y axis (so that you can set their text
		/// properties for example)
		/// </summary>
		// Token: 0x0600BBC9 RID: 48073 RVA: 0x00107154 File Offset: 0x00105354
		public vtkAxisActor2D GetYAxisActor2D()
		{
			vtkAxisActor2D vtkAxisActor2D = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetYAxisActor2D_97(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkAxisActor2D = (vtkAxisActor2D)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkAxisActor2D.Register(null);
				}
			}
			return vtkAxisActor2D;
		}

		// Token: 0x0600BBCA RID: 48074
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetYLabelFormat_98(HandleRef pThis);

		/// <summary>
		/// Set/Get the format with which to print the Y label.
		/// </summary>
		// Token: 0x0600BBCB RID: 48075 RVA: 0x001071C4 File Offset: 0x001053C4
		public virtual string GetYLabelFormat()
		{
			string s = Marshal.PtrToStringAnsi(vtkXYPlotActor.vtkXYPlotActor_GetYLabelFormat_98(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600BBCC RID: 48076
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetYRange_99(HandleRef pThis);

		/// <summary>
		/// Set the plot range (range of independent and dependent variables)
		/// to plot. Data outside of the range will be clipped. If the plot
		/// range of either the x or y variables is set to (v1,v2), where
		/// v1 == v2, then the range will be computed automatically. Note that
		/// the x-range values should be consistent with the way the independent
		/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
		/// </summary>
		// Token: 0x0600BBCD RID: 48077 RVA: 0x00107200 File Offset: 0x00105400
		public virtual double[] GetYRange()
		{
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_GetYRange_99(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[2];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600BBCE RID: 48078
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_GetYRange_100(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Set the plot range (range of independent and dependent variables)
		/// to plot. Data outside of the range will be clipped. If the plot
		/// range of either the x or y variables is set to (v1,v2), where
		/// v1 == v2, then the range will be computed automatically. Note that
		/// the x-range values should be consistent with the way the independent
		/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
		/// </summary>
		// Token: 0x0600BBCF RID: 48079 RVA: 0x00107248 File Offset: 0x00105448
		public virtual void GetYRange(IntPtr data)
		{
			vtkXYPlotActor.vtkXYPlotActor_GetYRange_100(base.GetCppThis(), data);
		}

		// Token: 0x0600BBD0 RID: 48080
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_GetYTitle_101(HandleRef pThis);

		/// <summary>
		/// Set/Get the title of the y axis
		/// </summary>
		// Token: 0x0600BBD1 RID: 48081 RVA: 0x00107258 File Offset: 0x00105458
		public string GetYTitle()
		{
			string s = Marshal.PtrToStringAnsi(vtkXYPlotActor.vtkXYPlotActor_GetYTitle_101(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600BBD2 RID: 48082
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_GetYTitlePosition_102(HandleRef pThis);

		/// <summary>
		/// Set/Get the position of the title of Y axis.
		/// </summary>
		// Token: 0x0600BBD3 RID: 48083 RVA: 0x00107294 File Offset: 0x00105494
		public virtual int GetYTitlePosition()
		{
			return vtkXYPlotActor.vtkXYPlotActor_GetYTitlePosition_102(base.GetCppThis());
		}

		// Token: 0x0600BBD4 RID: 48084
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_HasTranslucentPolygonalGeometry_103(HandleRef pThis);

		/// <summary>
		/// Does this prop have some translucent polygonal geometry?
		/// </summary>
		// Token: 0x0600BBD5 RID: 48085 RVA: 0x001072B4 File Offset: 0x001054B4
		public override int HasTranslucentPolygonalGeometry()
		{
			return vtkXYPlotActor.vtkXYPlotActor_HasTranslucentPolygonalGeometry_103(base.GetCppThis());
		}

		// Token: 0x0600BBD6 RID: 48086
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_IsA_104(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600BBD7 RID: 48087 RVA: 0x001072D4 File Offset: 0x001054D4
		public override int IsA(string type)
		{
			return vtkXYPlotActor.vtkXYPlotActor_IsA_104(base.GetCppThis(), type);
		}

		// Token: 0x0600BBD8 RID: 48088
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_IsInPlot_105(HandleRef pThis, HandleRef viewport, double u, double v);

		/// <summary>
		/// Is the specified viewport position within the plot area (as opposed to the
		/// region used by the plot plus the labels)?
		/// </summary>
		// Token: 0x0600BBD9 RID: 48089 RVA: 0x001072F4 File Offset: 0x001054F4
		public int IsInPlot(vtkViewport viewport, double u, double v)
		{
			return vtkXYPlotActor.vtkXYPlotActor_IsInPlot_105(base.GetCppThis(), (viewport == null) ? default(HandleRef) : viewport.GetCppThis(), u, v);
		}

		// Token: 0x0600BBDA RID: 48090
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_IsTypeOf_106([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600BBDB RID: 48091 RVA: 0x0010732C File Offset: 0x0010552C
		public new static int IsTypeOf(string type)
		{
			return vtkXYPlotActor.vtkXYPlotActor_IsTypeOf_106(type);
		}

		// Token: 0x0600BBDC RID: 48092
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_LegendOff_107(HandleRef pThis);

		/// <summary>
		/// Enable/Disable the creation of a legend. If on, the legend labels will
		/// be created automatically unless the per plot legend symbol has been
		/// set.
		/// </summary>
		// Token: 0x0600BBDD RID: 48093 RVA: 0x00107346 File Offset: 0x00105546
		public virtual void LegendOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_LegendOff_107(base.GetCppThis());
		}

		// Token: 0x0600BBDE RID: 48094
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_LegendOn_108(HandleRef pThis);

		/// <summary>
		/// Enable/Disable the creation of a legend. If on, the legend labels will
		/// be created automatically unless the per plot legend symbol has been
		/// set.
		/// </summary>
		// Token: 0x0600BBDF RID: 48095 RVA: 0x00107355 File Offset: 0x00105555
		public virtual void LegendOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_LegendOn_108(base.GetCppThis());
		}

		// Token: 0x0600BBE0 RID: 48096
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_LogxOff_109(HandleRef pThis);

		/// <summary>
		/// Enable/Disable plotting of Log of x-values.
		/// </summary>
		// Token: 0x0600BBE1 RID: 48097 RVA: 0x00107364 File Offset: 0x00105564
		public virtual void LogxOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_LogxOff_109(base.GetCppThis());
		}

		// Token: 0x0600BBE2 RID: 48098
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_LogxOn_110(HandleRef pThis);

		/// <summary>
		/// Enable/Disable plotting of Log of x-values.
		/// </summary>
		// Token: 0x0600BBE3 RID: 48099 RVA: 0x00107373 File Offset: 0x00105573
		public virtual void LogxOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_LogxOn_110(base.GetCppThis());
		}

		// Token: 0x0600BBE4 RID: 48100
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_NewInstance_112(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600BBE5 RID: 48101 RVA: 0x00107384 File Offset: 0x00105584
		public new vtkXYPlotActor NewInstance()
		{
			vtkXYPlotActor result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_NewInstance_112(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkXYPlotActor)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x0600BBE6 RID: 48102
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotCurveLinesOff_113(HandleRef pThis);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BBE7 RID: 48103 RVA: 0x001073DE File Offset: 0x001055DE
		public virtual void PlotCurveLinesOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotCurveLinesOff_113(base.GetCppThis());
		}

		// Token: 0x0600BBE8 RID: 48104
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotCurveLinesOn_114(HandleRef pThis);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BBE9 RID: 48105 RVA: 0x001073ED File Offset: 0x001055ED
		public virtual void PlotCurveLinesOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotCurveLinesOn_114(base.GetCppThis());
		}

		// Token: 0x0600BBEA RID: 48106
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotCurvePointsOff_115(HandleRef pThis);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BBEB RID: 48107 RVA: 0x001073FC File Offset: 0x001055FC
		public virtual void PlotCurvePointsOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotCurvePointsOff_115(base.GetCppThis());
		}

		// Token: 0x0600BBEC RID: 48108
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotCurvePointsOn_116(HandleRef pThis);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BBED RID: 48109 RVA: 0x0010740B File Offset: 0x0010560B
		public virtual void PlotCurvePointsOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotCurvePointsOn_116(base.GetCppThis());
		}

		// Token: 0x0600BBEE RID: 48110
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotLinesOff_117(HandleRef pThis);

		/// <summary>
		/// Set/Get whether the lines are rendered.  The line width can be set in
		/// the property object.
		/// </summary>
		// Token: 0x0600BBEF RID: 48111 RVA: 0x0010741A File Offset: 0x0010561A
		public virtual void PlotLinesOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotLinesOff_117(base.GetCppThis());
		}

		// Token: 0x0600BBF0 RID: 48112
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotLinesOn_118(HandleRef pThis);

		/// <summary>
		/// Set/Get whether the lines are rendered.  The line width can be set in
		/// the property object.
		/// </summary>
		// Token: 0x0600BBF1 RID: 48113 RVA: 0x00107429 File Offset: 0x00105629
		public virtual void PlotLinesOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotLinesOn_118(base.GetCppThis());
		}

		// Token: 0x0600BBF2 RID: 48114
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotPointsOff_119(HandleRef pThis);

		/// <summary>
		/// Set/Get whether the points are rendered.  The point size can be set in
		/// the property object. This is a global flag which affects the plot only
		/// if per curve symbols are not defined.
		/// </summary>
		// Token: 0x0600BBF3 RID: 48115 RVA: 0x00107438 File Offset: 0x00105638
		public virtual void PlotPointsOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotPointsOff_119(base.GetCppThis());
		}

		// Token: 0x0600BBF4 RID: 48116
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotPointsOn_120(HandleRef pThis);

		/// <summary>
		/// Set/Get whether the points are rendered.  The point size can be set in
		/// the property object. This is a global flag which affects the plot only
		/// if per curve symbols are not defined.
		/// </summary>
		// Token: 0x0600BBF5 RID: 48117 RVA: 0x00107447 File Offset: 0x00105647
		public virtual void PlotPointsOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotPointsOn_120(base.GetCppThis());
		}

		// Token: 0x0600BBF6 RID: 48118
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotToViewportCoordinate_121(HandleRef pThis, HandleRef viewport, ref double u, ref double v);

		/// <summary>
		/// Given a plot coordinate, return the viewpoint position
		/// </summary>
		// Token: 0x0600BBF7 RID: 48119 RVA: 0x00107458 File Offset: 0x00105658
		public void PlotToViewportCoordinate(vtkViewport viewport, ref double u, ref double v)
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotToViewportCoordinate_121(base.GetCppThis(), (viewport == null) ? default(HandleRef) : viewport.GetCppThis(), ref u, ref v);
		}

		// Token: 0x0600BBF8 RID: 48120
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_PlotToViewportCoordinate_122(HandleRef pThis, HandleRef viewport);

		/// <summary>
		/// An alternate form of PlotToViewportCoordinate() above. This method
		/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
		/// and then stores them in the ivar ViewportCoordinate. (This method
		/// can be wrapped.)
		/// </summary>
		// Token: 0x0600BBF9 RID: 48121 RVA: 0x0010748C File Offset: 0x0010568C
		public void PlotToViewportCoordinate(vtkViewport viewport)
		{
			vtkXYPlotActor.vtkXYPlotActor_PlotToViewportCoordinate_122(base.GetCppThis(), (viewport == null) ? default(HandleRef) : viewport.GetCppThis());
		}

		// Token: 0x0600BBFA RID: 48122
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ReleaseGraphicsResources_123(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// Release any graphics resources that are being consumed by this actor.
		/// The parameter window could be used to determine which graphic
		/// resources to release.
		/// </summary>
		// Token: 0x0600BBFB RID: 48123 RVA: 0x001074BC File Offset: 0x001056BC
		public override void ReleaseGraphicsResources(vtkWindow arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_ReleaseGraphicsResources_123(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x0600BBFC RID: 48124
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_RemoveAllActiveCurves_124(HandleRef pThis);

		/// <summary>
		/// Set plot properties
		/// </summary>
		// Token: 0x0600BBFD RID: 48125 RVA: 0x001074EB File Offset: 0x001056EB
		public virtual void RemoveAllActiveCurves()
		{
			vtkXYPlotActor.vtkXYPlotActor_RemoveAllActiveCurves_124(base.GetCppThis());
		}

		// Token: 0x0600BBFE RID: 48126
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_RemoveAllDataSetInputConnections_125(HandleRef pThis);

		/// <summary>
		/// This removes all of the data set inputs,
		/// but does not change the data object inputs.
		/// </summary>
		// Token: 0x0600BBFF RID: 48127 RVA: 0x001074FA File Offset: 0x001056FA
		public void RemoveAllDataSetInputConnections()
		{
			vtkXYPlotActor.vtkXYPlotActor_RemoveAllDataSetInputConnections_125(base.GetCppThis());
		}

		// Token: 0x0600BC00 RID: 48128
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_RemoveDataObjectInput_126(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// Remove a dataset from the list of data to display.
		/// </summary>
		// Token: 0x0600BC01 RID: 48129 RVA: 0x0010750C File Offset: 0x0010570C
		public void RemoveDataObjectInput(vtkDataObject arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_RemoveDataObjectInput_126(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x0600BC02 RID: 48130
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_RemoveDataObjectInputConnection_127(HandleRef pThis, HandleRef aout);

		/// <summary>
		/// Remove a dataset from the list of data to display.
		/// </summary>
		// Token: 0x0600BC03 RID: 48131 RVA: 0x0010753C File Offset: 0x0010573C
		public void RemoveDataObjectInputConnection(vtkAlgorithmOutput aout)
		{
			vtkXYPlotActor.vtkXYPlotActor_RemoveDataObjectInputConnection_127(base.GetCppThis(), (aout == null) ? default(HandleRef) : aout.GetCppThis());
		}

		// Token: 0x0600BC04 RID: 48132
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_RemoveDataSetInput_128(HandleRef pThis, HandleRef ds, [MarshalAs(UnmanagedType.LPUTF8Str)] string arrayName, int component);

		/// <summary>
		/// Remove a dataset from the list of data to append.
		/// </summary>
		// Token: 0x0600BC05 RID: 48133 RVA: 0x0010756C File Offset: 0x0010576C
		public void RemoveDataSetInput(vtkDataSet ds, string arrayName, int component)
		{
			vtkXYPlotActor.vtkXYPlotActor_RemoveDataSetInput_128(base.GetCppThis(), (ds == null) ? default(HandleRef) : ds.GetCppThis(), arrayName, component);
		}

		// Token: 0x0600BC06 RID: 48134
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_RemoveDataSetInput_129(HandleRef pThis, HandleRef ds);

		/// <summary>
		/// Remove a dataset from the list of data to append.
		/// </summary>
		// Token: 0x0600BC07 RID: 48135 RVA: 0x001075A0 File Offset: 0x001057A0
		public void RemoveDataSetInput(vtkDataSet ds)
		{
			vtkXYPlotActor.vtkXYPlotActor_RemoveDataSetInput_129(base.GetCppThis(), (ds == null) ? default(HandleRef) : ds.GetCppThis());
		}

		// Token: 0x0600BC08 RID: 48136
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_RemoveDataSetInputConnection_130(HandleRef pThis, HandleRef arg0, [MarshalAs(UnmanagedType.LPUTF8Str)] string arrayName, int component);

		/// <summary>
		/// Remove a dataset from the list of data to append.
		/// </summary>
		// Token: 0x0600BC09 RID: 48137 RVA: 0x001075D0 File Offset: 0x001057D0
		public void RemoveDataSetInputConnection(vtkAlgorithmOutput arg0, string arrayName, int component)
		{
			vtkXYPlotActor.vtkXYPlotActor_RemoveDataSetInputConnection_130(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis(), arrayName, component);
		}

		// Token: 0x0600BC0A RID: 48138
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_RemoveDataSetInputConnection_131(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// Remove a dataset from the list of data to append.
		/// </summary>
		// Token: 0x0600BC0B RID: 48139 RVA: 0x00107604 File Offset: 0x00105804
		public void RemoveDataSetInputConnection(vtkAlgorithmOutput arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_RemoveDataSetInputConnection_131(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x0600BC0C RID: 48140
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_RenderOpaqueGeometry_132(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
		/// DO NOT USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS.
		/// Draw the x-y plot.
		/// </summary>
		// Token: 0x0600BC0D RID: 48141 RVA: 0x00107634 File Offset: 0x00105834
		public override int RenderOpaqueGeometry(vtkViewport arg0)
		{
			return vtkXYPlotActor.vtkXYPlotActor_RenderOpaqueGeometry_132(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x0600BC0E RID: 48142
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_RenderOverlay_133(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
		/// DO NOT USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS.
		/// Draw the x-y plot.
		/// </summary>
		// Token: 0x0600BC0F RID: 48143 RVA: 0x00107668 File Offset: 0x00105868
		public override int RenderOverlay(vtkViewport arg0)
		{
			return vtkXYPlotActor.vtkXYPlotActor_RenderOverlay_133(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x0600BC10 RID: 48144
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkXYPlotActor_RenderTranslucentPolygonalGeometry_134(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// WARNING: INTERNAL METHOD - NOT INTENDED FOR GENERAL USE
		/// DO NOT USE THIS METHOD OUTSIDE OF THE RENDERING PROCESS.
		/// Draw the x-y plot.
		/// </summary>
		// Token: 0x0600BC11 RID: 48145 RVA: 0x0010769C File Offset: 0x0010589C
		public override int RenderTranslucentPolygonalGeometry(vtkViewport arg0)
		{
			return vtkXYPlotActor.vtkXYPlotActor_RenderTranslucentPolygonalGeometry_134(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x0600BC12 RID: 48146
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ReverseXAxisOff_135(HandleRef pThis);

		/// <summary>
		/// Normally the x-axis is plotted from minimum to maximum. Setting this instance
		/// variable causes the x-axis to be plotted from maximum to minimum. Note that
		/// boolean always applies to the x-axis even if ExchangeAxes is set.
		/// </summary>
		// Token: 0x0600BC13 RID: 48147 RVA: 0x001076D0 File Offset: 0x001058D0
		public virtual void ReverseXAxisOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_ReverseXAxisOff_135(base.GetCppThis());
		}

		// Token: 0x0600BC14 RID: 48148
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ReverseXAxisOn_136(HandleRef pThis);

		/// <summary>
		/// Normally the x-axis is plotted from minimum to maximum. Setting this instance
		/// variable causes the x-axis to be plotted from maximum to minimum. Note that
		/// boolean always applies to the x-axis even if ExchangeAxes is set.
		/// </summary>
		// Token: 0x0600BC15 RID: 48149 RVA: 0x001076DF File Offset: 0x001058DF
		public virtual void ReverseXAxisOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_ReverseXAxisOn_136(base.GetCppThis());
		}

		// Token: 0x0600BC16 RID: 48150
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ReverseYAxisOff_137(HandleRef pThis);

		/// <summary>
		/// Normally the y-axis is plotted from minimum to maximum. Setting this instance
		/// variable causes the y-axis to be plotted from maximum to minimum. Note that
		/// boolean always applies to the y-axis even if ExchangeAxes is set.
		/// </summary>
		// Token: 0x0600BC17 RID: 48151 RVA: 0x001076EE File Offset: 0x001058EE
		public virtual void ReverseYAxisOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_ReverseYAxisOff_137(base.GetCppThis());
		}

		// Token: 0x0600BC18 RID: 48152
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ReverseYAxisOn_138(HandleRef pThis);

		/// <summary>
		/// Normally the y-axis is plotted from minimum to maximum. Setting this instance
		/// variable causes the y-axis to be plotted from maximum to minimum. Note that
		/// boolean always applies to the y-axis even if ExchangeAxes is set.
		/// </summary>
		// Token: 0x0600BC19 RID: 48153 RVA: 0x001076FD File Offset: 0x001058FD
		public virtual void ReverseYAxisOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_ReverseYAxisOn_138(base.GetCppThis());
		}

		// Token: 0x0600BC1A RID: 48154
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkXYPlotActor_SafeDownCast_139(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600BC1B RID: 48155 RVA: 0x0010770C File Offset: 0x0010590C
		public new static vtkXYPlotActor SafeDownCast(vtkObjectBase o)
		{
			vtkXYPlotActor vtkXYPlotActor = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkXYPlotActor.vtkXYPlotActor_SafeDownCast_139((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkXYPlotActor = (vtkXYPlotActor)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkXYPlotActor.Register(null);
				}
			}
			return vtkXYPlotActor;
		}

		// Token: 0x0600BC1C RID: 48156
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAdjustTitlePosition_140(HandleRef pThis, int _arg);

		/// <summary>
		/// If true, the xyplot actor will adjust the position of the title
		/// automatically to be upper-middle. Default is true.
		/// </summary>
		// Token: 0x0600BC1D RID: 48157 RVA: 0x0010778B File Offset: 0x0010598B
		public virtual void SetAdjustTitlePosition(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAdjustTitlePosition_140(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC1E RID: 48158
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAdjustTitlePositionMode_141(HandleRef pThis, int _arg);

		/// <summary>
		/// If AdjustTitlePosition is true, the xyplot actor will
		/// adjust the position of the title automatically depending on the
		/// given mode, the mode is a combination of the Alignment flags.
		/// by default: vtkXYPlotActor::AlignHCenter | vtkXYPlotActor::Top
		/// | vtkXYPlotActor::AlignAxisVCenter
		/// </summary>
		// Token: 0x0600BC1F RID: 48159 RVA: 0x0010779B File Offset: 0x0010599B
		public virtual void SetAdjustTitlePositionMode(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAdjustTitlePositionMode_141(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC20 RID: 48160
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAdjustXLabels_142(HandleRef pThis, int adjust);

		/// <summary>
		/// Set/Get the flag that controls whether the labels and ticks are
		/// adjusted for "nice" numerical values to make it easier to read
		/// the labels. The adjustment is based in the Range instance variable.
		/// Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
		/// range and number of labels.
		/// </summary>
		// Token: 0x0600BC21 RID: 48161 RVA: 0x001077AB File Offset: 0x001059AB
		public void SetAdjustXLabels(int adjust)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAdjustXLabels_142(base.GetCppThis(), adjust);
		}

		// Token: 0x0600BC22 RID: 48162
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAdjustYLabels_143(HandleRef pThis, int adjust);

		/// <summary>
		/// Set/Get the flag that controls whether the labels and ticks are
		/// adjusted for "nice" numerical values to make it easier to read
		/// the labels. The adjustment is based in the Range instance variable.
		/// Call GetAdjustedRange and GetAdjustedNumberOfLabels to get the adjusted
		/// range and number of labels.
		/// </summary>
		// Token: 0x0600BC23 RID: 48163 RVA: 0x001077BB File Offset: 0x001059BB
		public void SetAdjustYLabels(int adjust)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAdjustYLabels_143(base.GetCppThis(), adjust);
		}

		// Token: 0x0600BC24 RID: 48164
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisLabelBold_144(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis label properties
		/// </summary>
		// Token: 0x0600BC25 RID: 48165 RVA: 0x001077CB File Offset: 0x001059CB
		public virtual void SetAxisLabelBold(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisLabelBold_144(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC26 RID: 48166
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisLabelColor_145(HandleRef pThis, double arg0, double arg1, double arg2);

		/// <summary>
		/// Set axis label properties
		/// </summary>
		// Token: 0x0600BC27 RID: 48167 RVA: 0x001077DB File Offset: 0x001059DB
		public virtual void SetAxisLabelColor(double arg0, double arg1, double arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisLabelColor_145(base.GetCppThis(), arg0, arg1, arg2);
		}

		// Token: 0x0600BC28 RID: 48168
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisLabelFontFamily_146(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis label properties
		/// </summary>
		// Token: 0x0600BC29 RID: 48169 RVA: 0x001077ED File Offset: 0x001059ED
		public virtual void SetAxisLabelFontFamily(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisLabelFontFamily_146(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC2A RID: 48170
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisLabelFontSize_147(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis label properties
		/// </summary>
		// Token: 0x0600BC2B RID: 48171 RVA: 0x001077FD File Offset: 0x001059FD
		public virtual void SetAxisLabelFontSize(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisLabelFontSize_147(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC2C RID: 48172
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisLabelItalic_148(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis label properties
		/// </summary>
		// Token: 0x0600BC2D RID: 48173 RVA: 0x0010780D File Offset: 0x00105A0D
		public virtual void SetAxisLabelItalic(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisLabelItalic_148(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC2E RID: 48174
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisLabelJustification_149(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis label properties
		/// </summary>
		// Token: 0x0600BC2F RID: 48175 RVA: 0x0010781D File Offset: 0x00105A1D
		public virtual void SetAxisLabelJustification(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisLabelJustification_149(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC30 RID: 48176
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisLabelShadow_150(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis label properties
		/// </summary>
		// Token: 0x0600BC31 RID: 48177 RVA: 0x0010782D File Offset: 0x00105A2D
		public virtual void SetAxisLabelShadow(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisLabelShadow_150(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC32 RID: 48178
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisLabelTextProperty_151(HandleRef pThis, HandleRef p);

		/// <summary>
		/// Set/Get the labels text property of all axes. Note that each axis can
		/// be controlled individually through the GetX/YAxisActor2D() methods.
		/// </summary>
		// Token: 0x0600BC33 RID: 48179 RVA: 0x00107840 File Offset: 0x00105A40
		public virtual void SetAxisLabelTextProperty(vtkTextProperty p)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisLabelTextProperty_151(base.GetCppThis(), (p == null) ? default(HandleRef) : p.GetCppThis());
		}

		// Token: 0x0600BC34 RID: 48180
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisLabelVerticalJustification_152(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis label properties
		/// </summary>
		// Token: 0x0600BC35 RID: 48181 RVA: 0x0010786F File Offset: 0x00105A6F
		public virtual void SetAxisLabelVerticalJustification(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisLabelVerticalJustification_152(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC36 RID: 48182
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisTitleBold_153(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis title properties
		/// </summary>
		// Token: 0x0600BC37 RID: 48183 RVA: 0x0010787F File Offset: 0x00105A7F
		public virtual void SetAxisTitleBold(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisTitleBold_153(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC38 RID: 48184
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisTitleColor_154(HandleRef pThis, double arg0, double arg1, double arg2);

		/// <summary>
		/// Set axis title properties
		/// </summary>
		// Token: 0x0600BC39 RID: 48185 RVA: 0x0010788F File Offset: 0x00105A8F
		public virtual void SetAxisTitleColor(double arg0, double arg1, double arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisTitleColor_154(base.GetCppThis(), arg0, arg1, arg2);
		}

		// Token: 0x0600BC3A RID: 48186
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisTitleFontFamily_155(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis title properties
		/// </summary>
		// Token: 0x0600BC3B RID: 48187 RVA: 0x001078A1 File Offset: 0x00105AA1
		public virtual void SetAxisTitleFontFamily(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisTitleFontFamily_155(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC3C RID: 48188
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisTitleFontSize_156(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis title properties
		/// </summary>
		// Token: 0x0600BC3D RID: 48189 RVA: 0x001078B1 File Offset: 0x00105AB1
		public virtual void SetAxisTitleFontSize(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisTitleFontSize_156(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC3E RID: 48190
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisTitleItalic_157(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis title properties
		/// </summary>
		// Token: 0x0600BC3F RID: 48191 RVA: 0x001078C1 File Offset: 0x00105AC1
		public virtual void SetAxisTitleItalic(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisTitleItalic_157(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC40 RID: 48192
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisTitleJustification_158(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis title properties
		/// </summary>
		// Token: 0x0600BC41 RID: 48193 RVA: 0x001078D1 File Offset: 0x00105AD1
		public virtual void SetAxisTitleJustification(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisTitleJustification_158(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC42 RID: 48194
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisTitleShadow_159(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis title properties
		/// </summary>
		// Token: 0x0600BC43 RID: 48195 RVA: 0x001078E1 File Offset: 0x00105AE1
		public virtual void SetAxisTitleShadow(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisTitleShadow_159(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC44 RID: 48196
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisTitleTextProperty_160(HandleRef pThis, HandleRef p);

		/// <summary>
		/// Set/Get the title text property of all axes. Note that each axis can
		/// be controlled individually through the GetX/YAxisActor2D() methods.
		/// </summary>
		// Token: 0x0600BC45 RID: 48197 RVA: 0x001078F4 File Offset: 0x00105AF4
		public virtual void SetAxisTitleTextProperty(vtkTextProperty p)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisTitleTextProperty_160(base.GetCppThis(), (p == null) ? default(HandleRef) : p.GetCppThis());
		}

		// Token: 0x0600BC46 RID: 48198
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetAxisTitleVerticalJustification_161(HandleRef pThis, int arg0);

		/// <summary>
		/// Set axis title properties
		/// </summary>
		// Token: 0x0600BC47 RID: 48199 RVA: 0x00107923 File Offset: 0x00105B23
		public virtual void SetAxisTitleVerticalJustification(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetAxisTitleVerticalJustification_161(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC48 RID: 48200
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetBorder_162(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get the spacing between the plot window and the plot. The value
		/// is specified in pixels.
		/// </summary>
		// Token: 0x0600BC49 RID: 48201 RVA: 0x00107933 File Offset: 0x00105B33
		public virtual void SetBorder(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetBorder_162(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC4A RID: 48202
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetChartBorder_163(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get the flag that controls whether a box will be drawn/filled
		/// corresponding to the legend box.
		/// </summary>
		// Token: 0x0600BC4B RID: 48203 RVA: 0x00107943 File Offset: 0x00105B43
		public virtual void SetChartBorder(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetChartBorder_163(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC4C RID: 48204
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetChartBox_164(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get the flag that controls whether a box will be drawn/filled
		/// corresponding to the chart box.
		/// </summary>
		// Token: 0x0600BC4D RID: 48205 RVA: 0x00107953 File Offset: 0x00105B53
		public virtual void SetChartBox(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetChartBox_164(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC4E RID: 48206
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetDataObjectPlotMode_165(HandleRef pThis, int _arg);

		/// <summary>
		/// Indicate whether to plot rows or columns. If plotting rows, then
		/// the dependent variables is taken from a specified row,
		/// versus rows (y).
		/// </summary>
		// Token: 0x0600BC4F RID: 48207 RVA: 0x00107963 File Offset: 0x00105B63
		public virtual void SetDataObjectPlotMode(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetDataObjectPlotMode_165(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC50 RID: 48208
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetDataObjectPlotModeToColumns_166(HandleRef pThis);

		/// <summary>
		/// Indicate whether to plot rows or columns. If plotting rows, then
		/// the dependent variables is taken from a specified row,
		/// versus rows (y).
		/// </summary>
		// Token: 0x0600BC51 RID: 48209 RVA: 0x00107973 File Offset: 0x00105B73
		public void SetDataObjectPlotModeToColumns()
		{
			vtkXYPlotActor.vtkXYPlotActor_SetDataObjectPlotModeToColumns_166(base.GetCppThis());
		}

		// Token: 0x0600BC52 RID: 48210
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetDataObjectPlotModeToRows_167(HandleRef pThis);

		/// <summary>
		/// Indicate whether to plot rows or columns. If plotting rows, then
		/// the dependent variables is taken from a specified row,
		/// versus rows (y).
		/// </summary>
		// Token: 0x0600BC53 RID: 48211 RVA: 0x00107982 File Offset: 0x00105B82
		public void SetDataObjectPlotModeToRows()
		{
			vtkXYPlotActor.vtkXYPlotActor_SetDataObjectPlotModeToRows_167(base.GetCppThis());
		}

		// Token: 0x0600BC54 RID: 48212
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetDataObjectXComponent_168(HandleRef pThis, int i, int comp);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// independent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectXComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC55 RID: 48213 RVA: 0x00107991 File Offset: 0x00105B91
		public void SetDataObjectXComponent(int i, int comp)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetDataObjectXComponent_168(base.GetCppThis(), i, comp);
		}

		// Token: 0x0600BC56 RID: 48214
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetDataObjectYComponent_169(HandleRef pThis, int i, int comp);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC57 RID: 48215 RVA: 0x001079A2 File Offset: 0x00105BA2
		public void SetDataObjectYComponent(int i, int comp)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetDataObjectYComponent_169(base.GetCppThis(), i, comp);
		}

		// Token: 0x0600BC58 RID: 48216
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetExchangeAxes_170(HandleRef pThis, int _arg);

		/// <summary>
		/// Enable/Disable exchange of the x-y axes (i.e., what was x becomes y, and
		/// vice-versa). Exchanging axes affects the labeling as well.
		/// </summary>
		// Token: 0x0600BC59 RID: 48217 RVA: 0x001079B3 File Offset: 0x00105BB3
		public virtual void SetExchangeAxes(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetExchangeAxes_170(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC5A RID: 48218
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetGlyphSize_171(HandleRef pThis, double _arg);

		/// <summary>
		/// Set/Get the factor that controls how big glyphs are in the plot.
		/// The number is expressed as a fraction of the length of the diagonal
		/// of the plot bounding box.
		/// </summary>
		// Token: 0x0600BC5B RID: 48219 RVA: 0x001079C3 File Offset: 0x00105BC3
		public virtual void SetGlyphSize(double _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetGlyphSize_171(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC5C RID: 48220
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLabelFormat_172(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string arg0);

		/// <summary>
		/// Set/Get the format with which to print the labels . This sets both X
		/// and Y label formats. GetLabelFormat() returns X label format.
		/// </summary>
		// Token: 0x0600BC5D RID: 48221 RVA: 0x001079D3 File Offset: 0x00105BD3
		public virtual void SetLabelFormat(string arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLabelFormat_172(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC5E RID: 48222
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLegend_173(HandleRef pThis, int _arg);

		/// <summary>
		/// Enable/Disable the creation of a legend. If on, the legend labels will
		/// be created automatically unless the per plot legend symbol has been
		/// set.
		/// </summary>
		// Token: 0x0600BC5F RID: 48223 RVA: 0x001079E3 File Offset: 0x00105BE3
		public virtual void SetLegend(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLegend_173(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC60 RID: 48224
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLegendBackgroundColor_174(HandleRef pThis, double arg0, double arg1, double arg2);

		/// <summary>
		/// Set legend properties
		/// </summary>
		// Token: 0x0600BC61 RID: 48225 RVA: 0x001079F3 File Offset: 0x00105BF3
		public virtual void SetLegendBackgroundColor(double arg0, double arg1, double arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLegendBackgroundColor_174(base.GetCppThis(), arg0, arg1, arg2);
		}

		// Token: 0x0600BC62 RID: 48226
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLegendBorder_175(HandleRef pThis, int arg0);

		/// <summary>
		/// Set legend properties
		/// </summary>
		// Token: 0x0600BC63 RID: 48227 RVA: 0x00107A05 File Offset: 0x00105C05
		public virtual void SetLegendBorder(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLegendBorder_175(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC64 RID: 48228
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLegendBox_176(HandleRef pThis, int arg0);

		/// <summary>
		/// Set legend properties
		/// </summary>
		// Token: 0x0600BC65 RID: 48229 RVA: 0x00107A15 File Offset: 0x00105C15
		public virtual void SetLegendBox(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLegendBox_176(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC66 RID: 48230
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLegendPosition_177(HandleRef pThis, double _arg1, double _arg2);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BC67 RID: 48231 RVA: 0x00107A25 File Offset: 0x00105C25
		public virtual void SetLegendPosition(double _arg1, double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLegendPosition_177(base.GetCppThis(), _arg1, _arg2);
		}

		// Token: 0x0600BC68 RID: 48232
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLegendPosition_178(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BC69 RID: 48233 RVA: 0x00107A36 File Offset: 0x00105C36
		public void SetLegendPosition(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLegendPosition_178(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC6A RID: 48234
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLegendPosition2_179(HandleRef pThis, double _arg1, double _arg2);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BC6B RID: 48235 RVA: 0x00107A46 File Offset: 0x00105C46
		public virtual void SetLegendPosition2(double _arg1, double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLegendPosition2_179(base.GetCppThis(), _arg1, _arg2);
		}

		// Token: 0x0600BC6C RID: 48236
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLegendPosition2_180(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Use these methods to control the position of the legend. The variables
		/// LegendPosition and LegendPosition2 define the lower-left and upper-right
		/// position of the legend. The coordinates are expressed as normalized
		/// values with respect to the rectangle defined by PositionCoordinate and
		/// Position2Coordinate. Note that LegendPosition2 is relative to
		/// LegendPosition.
		/// </summary>
		// Token: 0x0600BC6D RID: 48237 RVA: 0x00107A57 File Offset: 0x00105C57
		public void SetLegendPosition2(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLegendPosition2_180(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC6E RID: 48238
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLegendUseBackground_181(HandleRef pThis, int arg0);

		/// <summary>
		/// Set legend properties
		/// </summary>
		// Token: 0x0600BC6F RID: 48239 RVA: 0x00107A67 File Offset: 0x00105C67
		public virtual void SetLegendUseBackground(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLegendUseBackground_181(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC70 RID: 48240
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLineWidth_182(HandleRef pThis, double arg0);

		/// <summary>
		/// Set plot properties
		/// </summary>
		// Token: 0x0600BC71 RID: 48241 RVA: 0x00107A77 File Offset: 0x00105C77
		public virtual void SetLineWidth(double arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLineWidth_182(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BC72 RID: 48242
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetLogx_183(HandleRef pThis, int _arg);

		/// <summary>
		/// Enable/Disable plotting of Log of x-values.
		/// </summary>
		// Token: 0x0600BC73 RID: 48243 RVA: 0x00107A87 File Offset: 0x00105C87
		public virtual void SetLogx(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetLogx_183(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC74 RID: 48244
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetNumberOfLabels_184(HandleRef pThis, int num);

		/// <summary>
		/// Set/Get the number of annotation labels to show along the x and y axes.
		/// This values is a suggestion: the number of labels may vary depending
		/// on the particulars of the data. The convenience method
		/// SetNumberOfLabels() sets the number of x and y labels to the same value.
		/// </summary>
		// Token: 0x0600BC75 RID: 48245 RVA: 0x00107A97 File Offset: 0x00105C97
		public void SetNumberOfLabels(int num)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetNumberOfLabels_184(base.GetCppThis(), num);
		}

		// Token: 0x0600BC76 RID: 48246
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetNumberOfXLabels_185(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get the number of annotation labels to show along the x and y axes.
		/// This values is a suggestion: the number of labels may vary depending
		/// on the particulars of the data. The convenience method
		/// SetNumberOfLabels() sets the number of x and y labels to the same value.
		/// </summary>
		// Token: 0x0600BC77 RID: 48247 RVA: 0x00107AA7 File Offset: 0x00105CA7
		public virtual void SetNumberOfXLabels(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetNumberOfXLabels_185(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC78 RID: 48248
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetNumberOfXMinorTicks_186(HandleRef pThis, int num);

		/// <summary>
		/// Set/Get the number of minor ticks in X or Y.
		/// </summary>
		// Token: 0x0600BC79 RID: 48249 RVA: 0x00107AB7 File Offset: 0x00105CB7
		public void SetNumberOfXMinorTicks(int num)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetNumberOfXMinorTicks_186(base.GetCppThis(), num);
		}

		// Token: 0x0600BC7A RID: 48250
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetNumberOfYLabels_187(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get the number of annotation labels to show along the x and y axes.
		/// This values is a suggestion: the number of labels may vary depending
		/// on the particulars of the data. The convenience method
		/// SetNumberOfLabels() sets the number of x and y labels to the same value.
		/// </summary>
		// Token: 0x0600BC7B RID: 48251 RVA: 0x00107AC7 File Offset: 0x00105CC7
		public virtual void SetNumberOfYLabels(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetNumberOfYLabels_187(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC7C RID: 48252
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetNumberOfYMinorTicks_188(HandleRef pThis, int num);

		/// <summary>
		/// Set/Get the number of minor ticks in X or Y.
		/// </summary>
		// Token: 0x0600BC7D RID: 48253 RVA: 0x00107AD7 File Offset: 0x00105CD7
		public void SetNumberOfYMinorTicks(int num)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetNumberOfYMinorTicks_188(base.GetCppThis(), num);
		}

		// Token: 0x0600BC7E RID: 48254
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotColor_189(HandleRef pThis, int i, double r, double g, double b);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC7F RID: 48255 RVA: 0x00107AE7 File Offset: 0x00105CE7
		public void SetPlotColor(int i, double r, double g, double b)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotColor_189(base.GetCppThis(), i, r, g, b);
		}

		// Token: 0x0600BC80 RID: 48256
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotColor_190(HandleRef pThis, int i, IntPtr color);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC81 RID: 48257 RVA: 0x00107AFB File Offset: 0x00105CFB
		public void SetPlotColor(int i, IntPtr color)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotColor_190(base.GetCppThis(), i, color);
		}

		// Token: 0x0600BC82 RID: 48258
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotCoordinate_191(HandleRef pThis, double _arg1, double _arg2);

		/// <summary>
		/// An alternate form of ViewportToPlotCoordinate() above. This method
		/// inputs the viewport coordinate pair (defined by the ivar
		/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
		/// </summary>
		// Token: 0x0600BC83 RID: 48259 RVA: 0x00107B0C File Offset: 0x00105D0C
		public virtual void SetPlotCoordinate(double _arg1, double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotCoordinate_191(base.GetCppThis(), _arg1, _arg2);
		}

		// Token: 0x0600BC84 RID: 48260
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotCoordinate_192(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// An alternate form of ViewportToPlotCoordinate() above. This method
		/// inputs the viewport coordinate pair (defined by the ivar
		/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
		/// </summary>
		// Token: 0x0600BC85 RID: 48261 RVA: 0x00107B1D File Offset: 0x00105D1D
		public void SetPlotCoordinate(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotCoordinate_192(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC86 RID: 48262
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotCurveLines_193(HandleRef pThis, int _arg);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC87 RID: 48263 RVA: 0x00107B2D File Offset: 0x00105D2D
		public virtual void SetPlotCurveLines(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotCurveLines_193(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC88 RID: 48264
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotCurvePoints_194(HandleRef pThis, int _arg);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC89 RID: 48265 RVA: 0x00107B3D File Offset: 0x00105D3D
		public virtual void SetPlotCurvePoints(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotCurvePoints_194(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC8A RID: 48266
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotGlyphType_195(HandleRef pThis, int arg0, int arg1);

		/// <summary>
		/// Set plot properties
		/// </summary>
		// Token: 0x0600BC8B RID: 48267 RVA: 0x00107B4D File Offset: 0x00105D4D
		public virtual void SetPlotGlyphType(int arg0, int arg1)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotGlyphType_195(base.GetCppThis(), arg0, arg1);
		}

		// Token: 0x0600BC8C RID: 48268
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotLabel_196(HandleRef pThis, int i, [MarshalAs(UnmanagedType.LPUTF8Str)] string label);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC8D RID: 48269 RVA: 0x00107B5E File Offset: 0x00105D5E
		public void SetPlotLabel(int i, string label)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotLabel_196(base.GetCppThis(), i, label);
		}

		// Token: 0x0600BC8E RID: 48270
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotLines_197(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get whether the lines are rendered.  The line width can be set in
		/// the property object.
		/// </summary>
		// Token: 0x0600BC8F RID: 48271 RVA: 0x00107B6F File Offset: 0x00105D6F
		public virtual void SetPlotLines(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotLines_197(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC90 RID: 48272
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotLines_198(HandleRef pThis, int i, int arg1);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC91 RID: 48273 RVA: 0x00107B7F File Offset: 0x00105D7F
		public void SetPlotLines(int i, int arg1)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotLines_198(base.GetCppThis(), i, arg1);
		}

		// Token: 0x0600BC92 RID: 48274
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotPoints_199(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get whether the points are rendered.  The point size can be set in
		/// the property object. This is a global flag which affects the plot only
		/// if per curve symbols are not defined.
		/// </summary>
		// Token: 0x0600BC93 RID: 48275 RVA: 0x00107B90 File Offset: 0x00105D90
		public virtual void SetPlotPoints(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotPoints_199(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC94 RID: 48276
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotPoints_200(HandleRef pThis, int i, int arg1);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC95 RID: 48277 RVA: 0x00107BA0 File Offset: 0x00105DA0
		public void SetPlotPoints(int i, int arg1)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotPoints_200(base.GetCppThis(), i, arg1);
		}

		// Token: 0x0600BC96 RID: 48278
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotRange_201(HandleRef pThis, double xmin, double ymin, double xmax, double ymax);

		/// <summary>
		/// Set the plot range (range of independent and dependent variables)
		/// to plot. Data outside of the range will be clipped. If the plot
		/// range of either the x or y variables is set to (v1,v2), where
		/// v1 == v2, then the range will be computed automatically. Note that
		/// the x-range values should be consistent with the way the independent
		/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
		/// </summary>
		// Token: 0x0600BC97 RID: 48279 RVA: 0x00107BB1 File Offset: 0x00105DB1
		public void SetPlotRange(double xmin, double ymin, double xmax, double ymax)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotRange_201(base.GetCppThis(), xmin, ymin, xmax, ymax);
		}

		// Token: 0x0600BC98 RID: 48280
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPlotSymbol_202(HandleRef pThis, int i, HandleRef input);

		/// <summary>
		/// Specify which component of the input data object to use as the
		/// dependent variable for the ith input data object. (This ivar is
		/// ignored if plotting the index.) Note that the value is interpreted
		/// differently depending on DataObjectPlotMode. If the mode is Rows, then
		/// the value of DataObjectYComponent is the row number; otherwise it's the
		/// column number.
		/// </summary>
		// Token: 0x0600BC99 RID: 48281 RVA: 0x00107BC8 File Offset: 0x00105DC8
		public void SetPlotSymbol(int i, vtkPolyData input)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPlotSymbol_202(base.GetCppThis(), i, (input == null) ? default(HandleRef) : input.GetCppThis());
		}

		// Token: 0x0600BC9A RID: 48282
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetPointComponent_203(HandleRef pThis, int i, int comp);

		/// <summary>
		/// If plotting points by value, which component to use to determine the
		/// value. This sets a value per each input dataset (i.e., the ith dataset).
		/// </summary>
		// Token: 0x0600BC9B RID: 48283 RVA: 0x00107BF8 File Offset: 0x00105DF8
		public void SetPointComponent(int i, int comp)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetPointComponent_203(base.GetCppThis(), i, comp);
		}

		// Token: 0x0600BC9C RID: 48284
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetReferenceXValue_204(HandleRef pThis, double _arg);

		/// <summary>
		/// Set/Get the value for the X reference line
		/// </summary>
		// Token: 0x0600BC9D RID: 48285 RVA: 0x00107C09 File Offset: 0x00105E09
		public virtual void SetReferenceXValue(double _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetReferenceXValue_204(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BC9E RID: 48286
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetReferenceYValue_205(HandleRef pThis, double _arg);

		/// <summary>
		/// Set/Get the value for the Y reference line
		/// </summary>
		// Token: 0x0600BC9F RID: 48287 RVA: 0x00107C19 File Offset: 0x00105E19
		public virtual void SetReferenceYValue(double _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetReferenceYValue_205(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCA0 RID: 48288
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetReverseXAxis_206(HandleRef pThis, int _arg);

		/// <summary>
		/// Normally the x-axis is plotted from minimum to maximum. Setting this instance
		/// variable causes the x-axis to be plotted from maximum to minimum. Note that
		/// boolean always applies to the x-axis even if ExchangeAxes is set.
		/// </summary>
		// Token: 0x0600BCA1 RID: 48289 RVA: 0x00107C29 File Offset: 0x00105E29
		public virtual void SetReverseXAxis(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetReverseXAxis_206(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCA2 RID: 48290
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetReverseYAxis_207(HandleRef pThis, int _arg);

		/// <summary>
		/// Normally the y-axis is plotted from minimum to maximum. Setting this instance
		/// variable causes the y-axis to be plotted from maximum to minimum. Note that
		/// boolean always applies to the y-axis even if ExchangeAxes is set.
		/// </summary>
		// Token: 0x0600BCA3 RID: 48291 RVA: 0x00107C39 File Offset: 0x00105E39
		public virtual void SetReverseYAxis(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetReverseYAxis_207(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCA4 RID: 48292
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetShowReferenceXLine_208(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get if the X reference line is visible. hidden by default
		/// </summary>
		// Token: 0x0600BCA5 RID: 48293 RVA: 0x00107C49 File Offset: 0x00105E49
		public virtual void SetShowReferenceXLine(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetShowReferenceXLine_208(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCA6 RID: 48294
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetShowReferenceYLine_209(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get if the Y reference line is visible. hidden by default
		/// </summary>
		// Token: 0x0600BCA7 RID: 48295 RVA: 0x00107C59 File Offset: 0x00105E59
		public virtual void SetShowReferenceYLine(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetShowReferenceYLine_209(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCA8 RID: 48296
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitle_210(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string _arg);

		/// <summary>
		/// Set/Get the title of the x-y plot.
		/// </summary>
		// Token: 0x0600BCA9 RID: 48297 RVA: 0x00107C69 File Offset: 0x00105E69
		public virtual void SetTitle(string _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitle_210(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCAA RID: 48298
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitleBold_211(HandleRef pThis, int arg0);

		/// <summary>
		/// Set title properties
		/// </summary>
		// Token: 0x0600BCAB RID: 48299 RVA: 0x00107C79 File Offset: 0x00105E79
		public virtual void SetTitleBold(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitleBold_211(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCAC RID: 48300
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitleColor_212(HandleRef pThis, double arg0, double arg1, double arg2);

		/// <summary>
		/// Set title properties
		/// </summary>
		// Token: 0x0600BCAD RID: 48301 RVA: 0x00107C89 File Offset: 0x00105E89
		public virtual void SetTitleColor(double arg0, double arg1, double arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitleColor_212(base.GetCppThis(), arg0, arg1, arg2);
		}

		// Token: 0x0600BCAE RID: 48302
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitleFontFamily_213(HandleRef pThis, int arg0);

		/// <summary>
		/// Set title properties
		/// </summary>
		// Token: 0x0600BCAF RID: 48303 RVA: 0x00107C9B File Offset: 0x00105E9B
		public virtual void SetTitleFontFamily(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitleFontFamily_213(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCB0 RID: 48304
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitleFontSize_214(HandleRef pThis, int arg0);

		/// <summary>
		/// Set title properties
		/// </summary>
		// Token: 0x0600BCB1 RID: 48305 RVA: 0x00107CAB File Offset: 0x00105EAB
		public virtual void SetTitleFontSize(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitleFontSize_214(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCB2 RID: 48306
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitleItalic_215(HandleRef pThis, int arg0);

		/// <summary>
		/// Set title properties
		/// </summary>
		// Token: 0x0600BCB3 RID: 48307 RVA: 0x00107CBB File Offset: 0x00105EBB
		public virtual void SetTitleItalic(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitleItalic_215(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCB4 RID: 48308
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitleJustification_216(HandleRef pThis, int arg0);

		/// <summary>
		/// Set title properties
		/// </summary>
		// Token: 0x0600BCB5 RID: 48309 RVA: 0x00107CCB File Offset: 0x00105ECB
		public virtual void SetTitleJustification(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitleJustification_216(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCB6 RID: 48310
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitlePosition_217(HandleRef pThis, double _arg1, double _arg2);

		/// <summary>
		/// Set/Get the position of the title. This has no effect if
		/// AdjustTitlePosition is true.
		/// </summary>
		// Token: 0x0600BCB7 RID: 48311 RVA: 0x00107CDB File Offset: 0x00105EDB
		public virtual void SetTitlePosition(double _arg1, double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitlePosition_217(base.GetCppThis(), _arg1, _arg2);
		}

		// Token: 0x0600BCB8 RID: 48312
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitlePosition_218(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Set/Get the position of the title. This has no effect if
		/// AdjustTitlePosition is true.
		/// </summary>
		// Token: 0x0600BCB9 RID: 48313 RVA: 0x00107CEC File Offset: 0x00105EEC
		public void SetTitlePosition(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitlePosition_218(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCBA RID: 48314
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitleShadow_219(HandleRef pThis, int arg0);

		/// <summary>
		/// Set title properties
		/// </summary>
		// Token: 0x0600BCBB RID: 48315 RVA: 0x00107CFC File Offset: 0x00105EFC
		public virtual void SetTitleShadow(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitleShadow_219(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCBC RID: 48316
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitleTextProperty_220(HandleRef pThis, HandleRef p);

		/// <summary>
		/// Set/Get the title text property.
		/// </summary>
		// Token: 0x0600BCBD RID: 48317 RVA: 0x00107D0C File Offset: 0x00105F0C
		public virtual void SetTitleTextProperty(vtkTextProperty p)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitleTextProperty_220(base.GetCppThis(), (p == null) ? default(HandleRef) : p.GetCppThis());
		}

		// Token: 0x0600BCBE RID: 48318
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetTitleVerticalJustification_221(HandleRef pThis, int arg0);

		/// <summary>
		/// Set title properties
		/// </summary>
		// Token: 0x0600BCBF RID: 48319 RVA: 0x00107D3B File Offset: 0x00105F3B
		public virtual void SetTitleVerticalJustification(int arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetTitleVerticalJustification_221(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCC0 RID: 48320
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetViewportCoordinate_222(HandleRef pThis, double _arg1, double _arg2);

		/// <summary>
		/// An alternate form of PlotToViewportCoordinate() above. This method
		/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
		/// and then stores them in the ivar ViewportCoordinate. (This method
		/// can be wrapped.)
		/// </summary>
		// Token: 0x0600BCC1 RID: 48321 RVA: 0x00107D4B File Offset: 0x00105F4B
		public virtual void SetViewportCoordinate(double _arg1, double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetViewportCoordinate_222(base.GetCppThis(), _arg1, _arg2);
		}

		// Token: 0x0600BCC2 RID: 48322
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetViewportCoordinate_223(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// An alternate form of PlotToViewportCoordinate() above. This method
		/// inputs the plot coordinate pair (defined in the ivar PlotCoordinate)
		/// and then stores them in the ivar ViewportCoordinate. (This method
		/// can be wrapped.)
		/// </summary>
		// Token: 0x0600BCC3 RID: 48323 RVA: 0x00107D5C File Offset: 0x00105F5C
		public void SetViewportCoordinate(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetViewportCoordinate_223(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCC4 RID: 48324
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXAxisColor_224(HandleRef pThis, double arg0, double arg1, double arg2);

		/// <summary>
		/// Set axes properties
		/// </summary>
		// Token: 0x0600BCC5 RID: 48325 RVA: 0x00107D6C File Offset: 0x00105F6C
		public virtual void SetXAxisColor(double arg0, double arg1, double arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXAxisColor_224(base.GetCppThis(), arg0, arg1, arg2);
		}

		// Token: 0x0600BCC6 RID: 48326
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXLabelFormat_225(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string arg0);

		/// <summary>
		/// Set/Get the format with which to print the X label.
		/// </summary>
		// Token: 0x0600BCC7 RID: 48327 RVA: 0x00107D7E File Offset: 0x00105F7E
		public virtual void SetXLabelFormat(string arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXLabelFormat_225(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCC8 RID: 48328
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXRange_226(HandleRef pThis, double _arg1, double _arg2);

		/// <summary>
		/// Set the plot range (range of independent and dependent variables)
		/// to plot. Data outside of the range will be clipped. If the plot
		/// range of either the x or y variables is set to (v1,v2), where
		/// v1 == v2, then the range will be computed automatically. Note that
		/// the x-range values should be consistent with the way the independent
		/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
		/// </summary>
		// Token: 0x0600BCC9 RID: 48329 RVA: 0x00107D8E File Offset: 0x00105F8E
		public virtual void SetXRange(double _arg1, double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXRange_226(base.GetCppThis(), _arg1, _arg2);
		}

		// Token: 0x0600BCCA RID: 48330
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXRange_227(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Set the plot range (range of independent and dependent variables)
		/// to plot. Data outside of the range will be clipped. If the plot
		/// range of either the x or y variables is set to (v1,v2), where
		/// v1 == v2, then the range will be computed automatically. Note that
		/// the x-range values should be consistent with the way the independent
		/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
		/// </summary>
		// Token: 0x0600BCCB RID: 48331 RVA: 0x00107D9F File Offset: 0x00105F9F
		public void SetXRange(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXRange_227(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCCC RID: 48332
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXTitle_228(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string _arg);

		/// <summary>
		/// Set/Get the title of the x axis
		/// </summary>
		// Token: 0x0600BCCD RID: 48333 RVA: 0x00107DAF File Offset: 0x00105FAF
		public virtual void SetXTitle(string _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXTitle_228(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCCE RID: 48334
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXTitlePosition_229(HandleRef pThis, double position);

		/// <summary>
		/// Set/Get the position of the title of X axis.
		/// </summary>
		// Token: 0x0600BCCF RID: 48335 RVA: 0x00107DBF File Offset: 0x00105FBF
		public void SetXTitlePosition(double position)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXTitlePosition_229(base.GetCppThis(), position);
		}

		// Token: 0x0600BCD0 RID: 48336
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXValues_230(HandleRef pThis, int _arg);

		/// <summary>
		/// Specify how the independent (x) variable is computed from the points.
		/// The independent variable can be the scalar/point index (i.e., point id),
		/// the accumulated arc length along the points, the normalized arc length,
		/// or by component value. If plotting datasets (e.g., points), the value
		/// that is used is specified by the PointComponent ivar.  (Note: these
		/// methods also control how field data is plotted. Field data is usually
		/// plotted by value or index, if plotting length 1-dimensional length
		/// measures are used.)
		/// </summary>
		// Token: 0x0600BCD1 RID: 48337 RVA: 0x00107DCF File Offset: 0x00105FCF
		public virtual void SetXValues(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXValues_230(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCD2 RID: 48338
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXValuesToArcLength_231(HandleRef pThis);

		/// <summary>
		/// Specify how the independent (x) variable is computed from the points.
		/// The independent variable can be the scalar/point index (i.e., point id),
		/// the accumulated arc length along the points, the normalized arc length,
		/// or by component value. If plotting datasets (e.g., points), the value
		/// that is used is specified by the PointComponent ivar.  (Note: these
		/// methods also control how field data is plotted. Field data is usually
		/// plotted by value or index, if plotting length 1-dimensional length
		/// measures are used.)
		/// </summary>
		// Token: 0x0600BCD3 RID: 48339 RVA: 0x00107DDF File Offset: 0x00105FDF
		public void SetXValuesToArcLength()
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXValuesToArcLength_231(base.GetCppThis());
		}

		// Token: 0x0600BCD4 RID: 48340
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXValuesToIndex_232(HandleRef pThis);

		/// <summary>
		/// Specify how the independent (x) variable is computed from the points.
		/// The independent variable can be the scalar/point index (i.e., point id),
		/// the accumulated arc length along the points, the normalized arc length,
		/// or by component value. If plotting datasets (e.g., points), the value
		/// that is used is specified by the PointComponent ivar.  (Note: these
		/// methods also control how field data is plotted. Field data is usually
		/// plotted by value or index, if plotting length 1-dimensional length
		/// measures are used.)
		/// </summary>
		// Token: 0x0600BCD5 RID: 48341 RVA: 0x00107DEE File Offset: 0x00105FEE
		public void SetXValuesToIndex()
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXValuesToIndex_232(base.GetCppThis());
		}

		// Token: 0x0600BCD6 RID: 48342
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXValuesToNormalizedArcLength_233(HandleRef pThis);

		/// <summary>
		/// Specify how the independent (x) variable is computed from the points.
		/// The independent variable can be the scalar/point index (i.e., point id),
		/// the accumulated arc length along the points, the normalized arc length,
		/// or by component value. If plotting datasets (e.g., points), the value
		/// that is used is specified by the PointComponent ivar.  (Note: these
		/// methods also control how field data is plotted. Field data is usually
		/// plotted by value or index, if plotting length 1-dimensional length
		/// measures are used.)
		/// </summary>
		// Token: 0x0600BCD7 RID: 48343 RVA: 0x00107DFD File Offset: 0x00105FFD
		public void SetXValuesToNormalizedArcLength()
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXValuesToNormalizedArcLength_233(base.GetCppThis());
		}

		// Token: 0x0600BCD8 RID: 48344
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetXValuesToValue_234(HandleRef pThis);

		/// <summary>
		/// Specify how the independent (x) variable is computed from the points.
		/// The independent variable can be the scalar/point index (i.e., point id),
		/// the accumulated arc length along the points, the normalized arc length,
		/// or by component value. If plotting datasets (e.g., points), the value
		/// that is used is specified by the PointComponent ivar.  (Note: these
		/// methods also control how field data is plotted. Field data is usually
		/// plotted by value or index, if plotting length 1-dimensional length
		/// measures are used.)
		/// </summary>
		// Token: 0x0600BCD9 RID: 48345 RVA: 0x00107E0C File Offset: 0x0010600C
		public void SetXValuesToValue()
		{
			vtkXYPlotActor.vtkXYPlotActor_SetXValuesToValue_234(base.GetCppThis());
		}

		// Token: 0x0600BCDA RID: 48346
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetYAxisColor_235(HandleRef pThis, double arg0, double arg1, double arg2);

		/// <summary>
		/// Set axes properties
		/// </summary>
		// Token: 0x0600BCDB RID: 48347 RVA: 0x00107E1B File Offset: 0x0010601B
		public virtual void SetYAxisColor(double arg0, double arg1, double arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetYAxisColor_235(base.GetCppThis(), arg0, arg1, arg2);
		}

		// Token: 0x0600BCDC RID: 48348
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetYLabelFormat_236(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string arg0);

		/// <summary>
		/// Set/Get the format with which to print the Y label.
		/// </summary>
		// Token: 0x0600BCDD RID: 48349 RVA: 0x00107E2D File Offset: 0x0010602D
		public virtual void SetYLabelFormat(string arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetYLabelFormat_236(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCDE RID: 48350
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetYRange_237(HandleRef pThis, double _arg1, double _arg2);

		/// <summary>
		/// Set the plot range (range of independent and dependent variables)
		/// to plot. Data outside of the range will be clipped. If the plot
		/// range of either the x or y variables is set to (v1,v2), where
		/// v1 == v2, then the range will be computed automatically. Note that
		/// the x-range values should be consistent with the way the independent
		/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
		/// </summary>
		// Token: 0x0600BCDF RID: 48351 RVA: 0x00107E3D File Offset: 0x0010603D
		public virtual void SetYRange(double _arg1, double _arg2)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetYRange_237(base.GetCppThis(), _arg1, _arg2);
		}

		// Token: 0x0600BCE0 RID: 48352
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetYRange_238(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Set the plot range (range of independent and dependent variables)
		/// to plot. Data outside of the range will be clipped. If the plot
		/// range of either the x or y variables is set to (v1,v2), where
		/// v1 == v2, then the range will be computed automatically. Note that
		/// the x-range values should be consistent with the way the independent
		/// variable is created (via INDEX, DISTANCE, or ARC_LENGTH).
		/// </summary>
		// Token: 0x0600BCE1 RID: 48353 RVA: 0x00107E4E File Offset: 0x0010604E
		public void SetYRange(IntPtr _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetYRange_238(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCE2 RID: 48354
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetYTitle_239(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string arg0);

		/// <summary>
		/// Set/Get the title of the y axis
		/// </summary>
		// Token: 0x0600BCE3 RID: 48355 RVA: 0x00107E5E File Offset: 0x0010605E
		public virtual void SetYTitle(string arg0)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetYTitle_239(base.GetCppThis(), arg0);
		}

		// Token: 0x0600BCE4 RID: 48356
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetYTitlePosition_240(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get the position of the title of Y axis.
		/// </summary>
		// Token: 0x0600BCE5 RID: 48357 RVA: 0x00107E6E File Offset: 0x0010606E
		public virtual void SetYTitlePosition(int _arg)
		{
			vtkXYPlotActor.vtkXYPlotActor_SetYTitlePosition_240(base.GetCppThis(), _arg);
		}

		// Token: 0x0600BCE6 RID: 48358
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetYTitlePositionToHCenter_241(HandleRef pThis);

		/// <summary>
		/// Set/Get the position of the title of Y axis.
		/// </summary>
		// Token: 0x0600BCE7 RID: 48359 RVA: 0x00107E7E File Offset: 0x0010607E
		public void SetYTitlePositionToHCenter()
		{
			vtkXYPlotActor.vtkXYPlotActor_SetYTitlePositionToHCenter_241(base.GetCppThis());
		}

		// Token: 0x0600BCE8 RID: 48360
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetYTitlePositionToTop_242(HandleRef pThis);

		/// <summary>
		/// Set/Get the position of the title of Y axis.
		/// </summary>
		// Token: 0x0600BCE9 RID: 48361 RVA: 0x00107E8D File Offset: 0x0010608D
		public void SetYTitlePositionToTop()
		{
			vtkXYPlotActor.vtkXYPlotActor_SetYTitlePositionToTop_242(base.GetCppThis());
		}

		// Token: 0x0600BCEA RID: 48362
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_SetYTitlePositionToVCenter_243(HandleRef pThis);

		/// <summary>
		/// Set/Get the position of the title of Y axis.
		/// </summary>
		// Token: 0x0600BCEB RID: 48363 RVA: 0x00107E9C File Offset: 0x0010609C
		public void SetYTitlePositionToVCenter()
		{
			vtkXYPlotActor.vtkXYPlotActor_SetYTitlePositionToVCenter_243(base.GetCppThis());
		}

		// Token: 0x0600BCEC RID: 48364
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ShowReferenceXLineOff_244(HandleRef pThis);

		/// <summary>
		/// Set/Get if the X reference line is visible. hidden by default
		/// </summary>
		// Token: 0x0600BCED RID: 48365 RVA: 0x00107EAB File Offset: 0x001060AB
		public virtual void ShowReferenceXLineOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_ShowReferenceXLineOff_244(base.GetCppThis());
		}

		// Token: 0x0600BCEE RID: 48366
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ShowReferenceXLineOn_245(HandleRef pThis);

		/// <summary>
		/// Set/Get if the X reference line is visible. hidden by default
		/// </summary>
		// Token: 0x0600BCEF RID: 48367 RVA: 0x00107EBA File Offset: 0x001060BA
		public virtual void ShowReferenceXLineOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_ShowReferenceXLineOn_245(base.GetCppThis());
		}

		// Token: 0x0600BCF0 RID: 48368
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ShowReferenceYLineOff_246(HandleRef pThis);

		/// <summary>
		/// Set/Get if the Y reference line is visible. hidden by default
		/// </summary>
		// Token: 0x0600BCF1 RID: 48369 RVA: 0x00107EC9 File Offset: 0x001060C9
		public virtual void ShowReferenceYLineOff()
		{
			vtkXYPlotActor.vtkXYPlotActor_ShowReferenceYLineOff_246(base.GetCppThis());
		}

		// Token: 0x0600BCF2 RID: 48370
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ShowReferenceYLineOn_247(HandleRef pThis);

		/// <summary>
		/// Set/Get if the Y reference line is visible. hidden by default
		/// </summary>
		// Token: 0x0600BCF3 RID: 48371 RVA: 0x00107ED8 File Offset: 0x001060D8
		public virtual void ShowReferenceYLineOn()
		{
			vtkXYPlotActor.vtkXYPlotActor_ShowReferenceYLineOn_247(base.GetCppThis());
		}

		// Token: 0x0600BCF4 RID: 48372
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ViewportToPlotCoordinate_248(HandleRef pThis, HandleRef viewport, ref double u, ref double v);

		/// <summary>
		/// Given a position within the viewport used by the plot, return the
		/// the plot coordinates (XAxis value, YAxis value)
		/// </summary>
		// Token: 0x0600BCF5 RID: 48373 RVA: 0x00107EE8 File Offset: 0x001060E8
		public void ViewportToPlotCoordinate(vtkViewport viewport, ref double u, ref double v)
		{
			vtkXYPlotActor.vtkXYPlotActor_ViewportToPlotCoordinate_248(base.GetCppThis(), (viewport == null) ? default(HandleRef) : viewport.GetCppThis(), ref u, ref v);
		}

		// Token: 0x0600BCF6 RID: 48374
		[DllImport("Kitware.VTK.RenderingAnnotation.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkXYPlotActor_ViewportToPlotCoordinate_249(HandleRef pThis, HandleRef viewport);

		/// <summary>
		/// An alternate form of ViewportToPlotCoordinate() above. This method
		/// inputs the viewport coordinate pair (defined by the ivar
		/// ViewportCoordinate)and then stores them in the ivar PlotCoordinate.
		/// </summary>
		// Token: 0x0600BCF7 RID: 48375 RVA: 0x00107F1C File Offset: 0x0010611C
		public void ViewportToPlotCoordinate(vtkViewport viewport)
		{
			vtkXYPlotActor.vtkXYPlotActor_ViewportToPlotCoordinate_249(base.GetCppThis(), (viewport == null) ? default(HandleRef) : viewport.GetCppThis());
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x04000E15 RID: 3605
		public new const string MRFullTypeName = "Kitware.VTK.vtkXYPlotActor";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x04000E16 RID: 3606
		public new static readonly string MRClassNameKey = "class vtkXYPlotActor";

		/// <summary>
		/// If true, the xyplot actor will adjust the position of the title
		/// automatically to be upper-middle. Default is true.
		/// </summary>
		// Token: 0x020003DC RID: 988
		public enum Alignment
		{
			/// <summary>enum member</summary>
			// Token: 0x04000E18 RID: 3608
			AlignAxisBottom = 8192,
			/// <summary>enum member</summary>
			// Token: 0x04000E19 RID: 3609
			AlignAxisHCenter = 1024,
			/// <summary>enum member</summary>
			// Token: 0x04000E1A RID: 3610
			AlignAxisLeft = 256,
			/// <summary>enum member</summary>
			// Token: 0x04000E1B RID: 3611
			AlignAxisRight = 512,
			/// <summary>enum member</summary>
			// Token: 0x04000E1C RID: 3612
			AlignAxisTop = 4096,
			/// <summary>enum member</summary>
			// Token: 0x04000E1D RID: 3613
			AlignAxisVCenter = 16384,
			/// <summary>enum member</summary>
			// Token: 0x04000E1E RID: 3614
			AlignBottom = 32,
			/// <summary>enum member</summary>
			// Token: 0x04000E1F RID: 3615
			AlignHCenter = 4,
			/// <summary>enum member</summary>
			// Token: 0x04000E20 RID: 3616
			AlignLeft = 1,
			/// <summary>enum member</summary>
			// Token: 0x04000E21 RID: 3617
			AlignRight,
			/// <summary>enum member</summary>
			// Token: 0x04000E22 RID: 3618
			AlignTop = 16,
			/// <summary>enum member</summary>
			// Token: 0x04000E23 RID: 3619
			AlignVCenter = 64
		}
	}
}
