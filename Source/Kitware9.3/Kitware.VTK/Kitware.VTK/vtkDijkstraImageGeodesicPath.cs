using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkDijkstraImageGeodesicPath
	/// </summary>
	/// <remarks>
	///    Dijkstra algorithm to compute the graph geodesic.
	///
	/// Takes as input a polyline and an image representing a 2D cost function
	/// and performs a single source shortest path calculation.
	/// Dijkstra's algorithm is used. The implementation is
	/// similar to the one described in Introduction to Algorithms (Second Edition)
	/// by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and
	/// Cliff Stein, published by MIT Press and McGraw-Hill. Some minor
	/// enhancement are added though. All vertices are not pushed on the heap
	/// at start, instead a front set is maintained. The heap is implemented as
	/// a binary heap. The output of the filter is a set of lines describing
	/// the shortest path from StartVertex to EndVertex.  See parent class
	/// vtkDijkstraGraphGeodesicPath for the implementation.
	///
	/// @warning
	/// The input cost image must have only VTK_PIXEL cells: i.e., a 2D image or
	/// slice of a 3D volume. A cost function for a gray scale image might
	/// be generated by the following pipeline:
	/// vtkImageData-&gt;vtkImageGradientMagnitude-&gt;vtkImageShiftScale
	/// wherein the gradient magnitude image is inverted so that strong edges
	/// have low cost value.  Costs in moving from a vertex v to a vertex u
	/// are calculated using a weighted additive scheme:
	/// cost = Iw*f(I) + Ew*f(u,v) + Cw*f(t,u,v)
	/// where Iw is the weight associated with f(I): the normalized image cost,
	/// Ew is the weight associated with f(u,v): the normalized distance between
	/// vertices u and v, and Cw is the weight associated with f(t,u,v):
	/// the normalized curvature calculated from the vertex t which precedes
	/// vertex u, and vertices u and v.  All weights range from 0 to 1.
	///
	/// @par Thanks:
	/// The class was contributed by Dean Inglis.
	/// </remarks>
	// Token: 0x02000553 RID: 1363
	public class vtkDijkstraImageGeodesicPath : vtkDijkstraGraphGeodesicPath
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x0600F269 RID: 62057 RVA: 0x00151B23 File Offset: 0x0014FD23
		static vtkDijkstraImageGeodesicPath()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkDijkstraImageGeodesicPath.MRClassNameKey, Type.GetType("Kitware.VTK.vtkDijkstraImageGeodesicPath"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x0600F26A RID: 62058 RVA: 0x00151B4B File Offset: 0x0014FD4B
		public vtkDijkstraImageGeodesicPath(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x0600F26B RID: 62059
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkDijkstraImageGeodesicPath_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Instantiate the class
		/// </summary>
		// Token: 0x0600F26C RID: 62060 RVA: 0x00151B5C File Offset: 0x0014FD5C
		public new static vtkDijkstraImageGeodesicPath New()
		{
			vtkDijkstraImageGeodesicPath result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkDijkstraImageGeodesicPath)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		/// Instantiate the class
		/// </summary>
		// Token: 0x0600F26D RID: 62061 RVA: 0x00151BB0 File Offset: 0x0014FDB0
		public vtkDijkstraImageGeodesicPath() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x0600F26E RID: 62062 RVA: 0x00151BF4 File Offset: 0x0014FDF4
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x0600F26F RID: 62063
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkDijkstraImageGeodesicPath_GetCurvatureWeight_01(HandleRef pThis);

		/// <summary>
		/// Curvature cost weight.
		/// </summary>
		// Token: 0x0600F270 RID: 62064 RVA: 0x00151C00 File Offset: 0x0014FE00
		public virtual double GetCurvatureWeight()
		{
			return vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_GetCurvatureWeight_01(base.GetCppThis());
		}

		// Token: 0x0600F271 RID: 62065
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkDijkstraImageGeodesicPath_GetCurvatureWeightMaxValue_02(HandleRef pThis);

		/// <summary>
		/// Curvature cost weight.
		/// </summary>
		// Token: 0x0600F272 RID: 62066 RVA: 0x00151C20 File Offset: 0x0014FE20
		public virtual double GetCurvatureWeightMaxValue()
		{
			return vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_GetCurvatureWeightMaxValue_02(base.GetCppThis());
		}

		// Token: 0x0600F273 RID: 62067
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkDijkstraImageGeodesicPath_GetCurvatureWeightMinValue_03(HandleRef pThis);

		/// <summary>
		/// Curvature cost weight.
		/// </summary>
		// Token: 0x0600F274 RID: 62068 RVA: 0x00151C40 File Offset: 0x0014FE40
		public virtual double GetCurvatureWeightMinValue()
		{
			return vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_GetCurvatureWeightMinValue_03(base.GetCppThis());
		}

		// Token: 0x0600F275 RID: 62069
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkDijkstraImageGeodesicPath_GetEdgeLengthWeight_04(HandleRef pThis);

		/// <summary>
		/// Edge length cost weight.
		/// </summary>
		// Token: 0x0600F276 RID: 62070 RVA: 0x00151C60 File Offset: 0x0014FE60
		public virtual double GetEdgeLengthWeight()
		{
			return vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_GetEdgeLengthWeight_04(base.GetCppThis());
		}

		// Token: 0x0600F277 RID: 62071
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkDijkstraImageGeodesicPath_GetImageWeight_05(HandleRef pThis);

		/// <summary>
		/// Image cost weight.
		/// </summary>
		// Token: 0x0600F278 RID: 62072 RVA: 0x00151C80 File Offset: 0x0014FE80
		public virtual double GetImageWeight()
		{
			return vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_GetImageWeight_05(base.GetCppThis());
		}

		// Token: 0x0600F279 RID: 62073
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkDijkstraImageGeodesicPath_GetInputAsImageData_06(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Specify the image object which is used as a cost function.
		/// </summary>
		// Token: 0x0600F27A RID: 62074 RVA: 0x00151CA0 File Offset: 0x0014FEA0
		public vtkImageData GetInputAsImageData()
		{
			vtkImageData vtkImageData = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_GetInputAsImageData_06(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkImageData = (vtkImageData)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkImageData.Register(null);
				}
			}
			return vtkImageData;
		}

		// Token: 0x0600F27B RID: 62075
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkDijkstraImageGeodesicPath_GetNumberOfGenerationsFromBase_07(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods for printing and determining type information.
		/// </summary>
		// Token: 0x0600F27C RID: 62076 RVA: 0x00151D10 File Offset: 0x0014FF10
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_GetNumberOfGenerationsFromBase_07(base.GetCppThis(), type);
		}

		// Token: 0x0600F27D RID: 62077
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkDijkstraImageGeodesicPath_GetNumberOfGenerationsFromBaseType_08([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods for printing and determining type information.
		/// </summary>
		// Token: 0x0600F27E RID: 62078 RVA: 0x00151D30 File Offset: 0x0014FF30
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_GetNumberOfGenerationsFromBaseType_08(type);
		}

		// Token: 0x0600F27F RID: 62079
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkDijkstraImageGeodesicPath_IsA_09(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods for printing and determining type information.
		/// </summary>
		// Token: 0x0600F280 RID: 62080 RVA: 0x00151D4C File Offset: 0x0014FF4C
		public override int IsA(string type)
		{
			return vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_IsA_09(base.GetCppThis(), type);
		}

		// Token: 0x0600F281 RID: 62081
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkDijkstraImageGeodesicPath_IsTypeOf_10([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods for printing and determining type information.
		/// </summary>
		// Token: 0x0600F282 RID: 62082 RVA: 0x00151D6C File Offset: 0x0014FF6C
		public new static int IsTypeOf(string type)
		{
			return vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_IsTypeOf_10(type);
		}

		// Token: 0x0600F283 RID: 62083
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkDijkstraImageGeodesicPath_NewInstance_12(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Standard methods for printing and determining type information.
		/// </summary>
		// Token: 0x0600F284 RID: 62084 RVA: 0x00151D88 File Offset: 0x0014FF88
		public new vtkDijkstraImageGeodesicPath NewInstance()
		{
			vtkDijkstraImageGeodesicPath result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_NewInstance_12(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkDijkstraImageGeodesicPath)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x0600F285 RID: 62085
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkDijkstraImageGeodesicPath_SafeDownCast_13(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Standard methods for printing and determining type information.
		/// </summary>
		// Token: 0x0600F286 RID: 62086 RVA: 0x00151DE4 File Offset: 0x0014FFE4
		public new static vtkDijkstraImageGeodesicPath SafeDownCast(vtkObjectBase o)
		{
			vtkDijkstraImageGeodesicPath vtkDijkstraImageGeodesicPath = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_SafeDownCast_13((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkDijkstraImageGeodesicPath = (vtkDijkstraImageGeodesicPath)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkDijkstraImageGeodesicPath.Register(null);
				}
			}
			return vtkDijkstraImageGeodesicPath;
		}

		// Token: 0x0600F287 RID: 62087
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkDijkstraImageGeodesicPath_SetCurvatureWeight_14(HandleRef pThis, double _arg);

		/// <summary>
		/// Curvature cost weight.
		/// </summary>
		// Token: 0x0600F288 RID: 62088 RVA: 0x00151E63 File Offset: 0x00150063
		public virtual void SetCurvatureWeight(double _arg)
		{
			vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_SetCurvatureWeight_14(base.GetCppThis(), _arg);
		}

		// Token: 0x0600F289 RID: 62089
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkDijkstraImageGeodesicPath_SetEdgeLengthWeight_15(HandleRef pThis, double arg0);

		/// <summary>
		/// Edge length cost weight.
		/// </summary>
		// Token: 0x0600F28A RID: 62090 RVA: 0x00151E73 File Offset: 0x00150073
		public void SetEdgeLengthWeight(double arg0)
		{
			vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_SetEdgeLengthWeight_15(base.GetCppThis(), arg0);
		}

		// Token: 0x0600F28B RID: 62091
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkDijkstraImageGeodesicPath_SetImageWeight_16(HandleRef pThis, double arg0);

		/// <summary>
		/// Image cost weight.
		/// </summary>
		// Token: 0x0600F28C RID: 62092 RVA: 0x00151E83 File Offset: 0x00150083
		public void SetImageWeight(double arg0)
		{
			vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_SetImageWeight_16(base.GetCppThis(), arg0);
		}

		// Token: 0x0600F28D RID: 62093
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkDijkstraImageGeodesicPath_SetInputData_17(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// Specify the image object which is used as a cost function.
		/// </summary>
		// Token: 0x0600F28E RID: 62094 RVA: 0x00151E94 File Offset: 0x00150094
		public new void SetInputData(vtkDataObject arg0)
		{
			vtkDijkstraImageGeodesicPath.vtkDijkstraImageGeodesicPath_SetInputData_17(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x040011A1 RID: 4513
		public new const string MRFullTypeName = "Kitware.VTK.vtkDijkstraImageGeodesicPath";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x040011A2 RID: 4514
		public new static readonly string MRClassNameKey = "class vtkDijkstraImageGeodesicPath";
	}
}
