using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkHull
	/// </summary>
	/// <remarks>
	///    produce an n-sided convex hull
	///
	/// vtkHull is a filter which will produce an n-sided convex hull given a
	/// set of n planes. (The convex hull bounds the input vtkPointSet data.)
	/// The hull is generated by squeezing the planes towards the input
	/// vtkPointSet, until the planes just touch the points. Then,
	/// the resulting planes are used to generate a polyhedron (i.e., hull)
	/// that is represented by triangles.
	///
	/// The n planes can be defined in a number of ways including 1) manually
	/// specifying each plane; 2) choosing the six face planes of the input's
	/// bounding box; 3) choosing the eight vertex planes of the input's
	/// bounding box; 4) choosing the twelve edge planes of the input's
	/// bounding box; and/or 5) using a recursively subdivided octahedron.
	/// Note that when specifying planes, the plane normals should point
	/// outside of the convex region.
	///
	/// The output of this filter can be used in combination with vtkLODActor
	/// to represent a levels-of-detail in the LOD hierarchy. Another use of
	/// this class is to manually specify the planes, and then generate the
	/// polyhedron from the planes (without squeezing the planes towards the
	/// input). The method GenerateHull() is used to do this.
	/// </remarks>
	// Token: 0x02000970 RID: 2416
	public class vtkHull : vtkPointSetAlgorithm
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x06019316 RID: 103190 RVA: 0x002318F5 File Offset: 0x0022FAF5
		static vtkHull()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkHull.MRClassNameKey, Type.GetType("Kitware.VTK.vtkHull"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x06019317 RID: 103191 RVA: 0x0023191D File Offset: 0x0022FB1D
		public vtkHull(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x06019318 RID: 103192
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkHull_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Standard methods to instantiate, obtain type information, and print
		/// information about the class.
		/// </summary>
		// Token: 0x06019319 RID: 103193 RVA: 0x0023192C File Offset: 0x0022FB2C
		public new static vtkHull New()
		{
			vtkHull result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkHull.vtkHull_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkHull)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		/// Standard methods to instantiate, obtain type information, and print
		/// information about the class.
		/// </summary>
		// Token: 0x0601931A RID: 103194 RVA: 0x00231980 File Offset: 0x0022FB80
		public vtkHull() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkHull.vtkHull_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x0601931B RID: 103195 RVA: 0x002319C4 File Offset: 0x0022FBC4
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x0601931C RID: 103196
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_AddCubeEdgePlanes_01(HandleRef pThis);

		/// <summary>
		/// Add the 12 planes that represent the edges of a cube - halfway between
		/// the two connecting face planes - (1,1,0), (-1,-1,0), (-1,1,0), (1,-1,0),
		/// (0,1,1), (0,-1,-1), (0,1,-1), (0,-1,1), (1,0,1), (-1,0,-1),
		/// (1,0,-1), (-1,0,1)
		/// </summary>
		// Token: 0x0601931D RID: 103197 RVA: 0x002319CF File Offset: 0x0022FBCF
		public void AddCubeEdgePlanes()
		{
			vtkHull.vtkHull_AddCubeEdgePlanes_01(base.GetCppThis());
		}

		// Token: 0x0601931E RID: 103198
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_AddCubeFacePlanes_02(HandleRef pThis);

		/// <summary>
		/// Add the six planes that make up the faces of a cube - (1,0,0),
		/// (-1, 0, 0), (0,1,0), (0,-1,0), (0,0,1), (0,0,-1)
		/// </summary>
		// Token: 0x0601931F RID: 103199 RVA: 0x002319DE File Offset: 0x0022FBDE
		public void AddCubeFacePlanes()
		{
			vtkHull.vtkHull_AddCubeFacePlanes_02(base.GetCppThis());
		}

		// Token: 0x06019320 RID: 103200
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_AddCubeVertexPlanes_03(HandleRef pThis);

		/// <summary>
		/// Add the 8 planes that represent the vertices of a cube - the combination
		/// of the three face planes connecting to a vertex - (1,1,1), (1,1,-1),
		/// (1,-1,1), (1,-1,1), (-1,1,1), (-1,1,-1), (-1,-1,1), (-1,-1-1).
		/// </summary>
		// Token: 0x06019321 RID: 103201 RVA: 0x002319ED File Offset: 0x0022FBED
		public void AddCubeVertexPlanes()
		{
			vtkHull.vtkHull_AddCubeVertexPlanes_03(base.GetCppThis());
		}

		// Token: 0x06019322 RID: 103202
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkHull_AddPlane_04(HandleRef pThis, double A, double B, double C);

		/// <summary>
		/// Add a plane to the current set of planes. It will be added at the
		/// end of the list, and an index that can later be used to set this
		/// plane's normal will be returned. The values A, B, C are from the
		/// plane equation Ax + By + Cz + D = 0. This vector does not have to
		/// have unit length (but it must have a non-zero length!). If a value
		/// 0 &gt; i &gt;= -NumberOfPlanes is returned, then the plane is parallel
		/// with a previously inserted plane, and |-i-1| is the index of the
		/// plane that was previously inserted. If a value i &lt; -NumberOfPlanes
		/// is returned, then the plane normal is zero length.
		/// </summary>
		// Token: 0x06019323 RID: 103203 RVA: 0x002319FC File Offset: 0x0022FBFC
		public int AddPlane(double A, double B, double C)
		{
			return vtkHull.vtkHull_AddPlane_04(base.GetCppThis(), A, B, C);
		}

		// Token: 0x06019324 RID: 103204
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkHull_AddPlane_05(HandleRef pThis, IntPtr plane);

		/// <summary>
		/// Add a plane to the current set of planes. It will be added at the
		/// end of the list, and an index that can later be used to set this
		/// plane's normal will be returned. The values A, B, C are from the
		/// plane equation Ax + By + Cz + D = 0. This vector does not have to
		/// have unit length (but it must have a non-zero length!). If a value
		/// 0 &gt; i &gt;= -NumberOfPlanes is returned, then the plane is parallel
		/// with a previously inserted plane, and |-i-1| is the index of the
		/// plane that was previously inserted. If a value i &lt; -NumberOfPlanes
		/// is returned, then the plane normal is zero length.
		/// </summary>
		// Token: 0x06019325 RID: 103205 RVA: 0x00231A20 File Offset: 0x0022FC20
		public int AddPlane(IntPtr plane)
		{
			return vtkHull.vtkHull_AddPlane_05(base.GetCppThis(), plane);
		}

		// Token: 0x06019326 RID: 103206
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkHull_AddPlane_06(HandleRef pThis, double A, double B, double C, double D);

		/// <summary>
		/// Variations of AddPlane()/SetPlane() that allow D to be set. These
		/// methods are used when GenerateHull() is used.
		/// </summary>
		// Token: 0x06019327 RID: 103207 RVA: 0x00231A40 File Offset: 0x0022FC40
		public int AddPlane(double A, double B, double C, double D)
		{
			return vtkHull.vtkHull_AddPlane_06(base.GetCppThis(), A, B, C, D);
		}

		// Token: 0x06019328 RID: 103208
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkHull_AddPlane_07(HandleRef pThis, IntPtr plane, double D);

		/// <summary>
		/// Variations of AddPlane()/SetPlane() that allow D to be set. These
		/// methods are used when GenerateHull() is used.
		/// </summary>
		// Token: 0x06019329 RID: 103209 RVA: 0x00231A64 File Offset: 0x0022FC64
		public int AddPlane(IntPtr plane, double D)
		{
			return vtkHull.vtkHull_AddPlane_07(base.GetCppThis(), plane, D);
		}

		// Token: 0x0601932A RID: 103210
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_AddRecursiveSpherePlanes_08(HandleRef pThis, int level);

		/// <summary>
		/// Add the planes that represent the normals of the vertices of a
		/// polygonal sphere formed by recursively subdividing the triangles
		/// in an octahedron.  Each triangle is subdivided by connecting the
		/// midpoints of the edges thus forming 4 smaller triangles. The
		/// level indicates how many subdivisions to do with a level of 0
		/// used to add the 6 planes from the original octahedron, level 1
		/// will add 18 planes, and so on.
		/// </summary>
		// Token: 0x0601932B RID: 103211 RVA: 0x00231A85 File Offset: 0x0022FC85
		public void AddRecursiveSpherePlanes(int level)
		{
			vtkHull.vtkHull_AddRecursiveSpherePlanes_08(base.GetCppThis(), level);
		}

		// Token: 0x0601932C RID: 103212
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_GenerateHull_09(HandleRef pThis, HandleRef pd, IntPtr bounds);

		/// <summary>
		/// A special method that is used to generate a polyhedron directly
		/// from a set of n planes. The planes that are supplied by the user
		/// are not squeezed towards the input data (in fact the user need
		/// not specify an input). To use this method, you must provide an
		/// instance of vtkPolyData into which the points and cells defining
		/// the polyhedron are placed. You must also provide a bounding box
		/// where you expect the resulting polyhedron to lie. This can be
		/// a very generous fit, it's only used to create the initial polygons
		/// that are eventually clipped.
		/// </summary>
		// Token: 0x0601932D RID: 103213 RVA: 0x00231A98 File Offset: 0x0022FC98
		public void GenerateHull(vtkPolyData pd, IntPtr bounds)
		{
			vtkHull.vtkHull_GenerateHull_09(base.GetCppThis(), (pd == null) ? default(HandleRef) : pd.GetCppThis(), bounds);
		}

		// Token: 0x0601932E RID: 103214
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_GenerateHull_10(HandleRef pThis, HandleRef pd, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax);

		/// <summary>
		/// A special method that is used to generate a polyhedron directly
		/// from a set of n planes. The planes that are supplied by the user
		/// are not squeezed towards the input data (in fact the user need
		/// not specify an input). To use this method, you must provide an
		/// instance of vtkPolyData into which the points and cells defining
		/// the polyhedron are placed. You must also provide a bounding box
		/// where you expect the resulting polyhedron to lie. This can be
		/// a very generous fit, it's only used to create the initial polygons
		/// that are eventually clipped.
		/// </summary>
		// Token: 0x0601932F RID: 103215 RVA: 0x00231AC8 File Offset: 0x0022FCC8
		public void GenerateHull(vtkPolyData pd, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)
		{
			vtkHull.vtkHull_GenerateHull_10(base.GetCppThis(), (pd == null) ? default(HandleRef) : pd.GetCppThis(), xmin, xmax, ymin, ymax, zmin, zmax);
		}

		// Token: 0x06019330 RID: 103216
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkHull_GetNumberOfGenerationsFromBase_11(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods to instantiate, obtain type information, and print
		/// information about the class.
		/// </summary>
		// Token: 0x06019331 RID: 103217 RVA: 0x00231B04 File Offset: 0x0022FD04
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkHull.vtkHull_GetNumberOfGenerationsFromBase_11(base.GetCppThis(), type);
		}

		// Token: 0x06019332 RID: 103218
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkHull_GetNumberOfGenerationsFromBaseType_12([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods to instantiate, obtain type information, and print
		/// information about the class.
		/// </summary>
		// Token: 0x06019333 RID: 103219 RVA: 0x00231B24 File Offset: 0x0022FD24
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkHull.vtkHull_GetNumberOfGenerationsFromBaseType_12(type);
		}

		// Token: 0x06019334 RID: 103220
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkHull_GetNumberOfPlanes_13(HandleRef pThis);

		/// <summary>
		/// Get the number of planes in the current set of planes.
		/// </summary>
		// Token: 0x06019335 RID: 103221 RVA: 0x00231B40 File Offset: 0x0022FD40
		public int GetNumberOfPlanes()
		{
			return vtkHull.vtkHull_GetNumberOfPlanes_13(base.GetCppThis());
		}

		// Token: 0x06019336 RID: 103222
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkHull_IsA_14(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods to instantiate, obtain type information, and print
		/// information about the class.
		/// </summary>
		// Token: 0x06019337 RID: 103223 RVA: 0x00231B60 File Offset: 0x0022FD60
		public override int IsA(string type)
		{
			return vtkHull.vtkHull_IsA_14(base.GetCppThis(), type);
		}

		// Token: 0x06019338 RID: 103224
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkHull_IsTypeOf_15([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods to instantiate, obtain type information, and print
		/// information about the class.
		/// </summary>
		// Token: 0x06019339 RID: 103225 RVA: 0x00231B80 File Offset: 0x0022FD80
		public new static int IsTypeOf(string type)
		{
			return vtkHull.vtkHull_IsTypeOf_15(type);
		}

		// Token: 0x0601933A RID: 103226
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkHull_NewInstance_17(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Standard methods to instantiate, obtain type information, and print
		/// information about the class.
		/// </summary>
		// Token: 0x0601933B RID: 103227 RVA: 0x00231B9C File Offset: 0x0022FD9C
		public new vtkHull NewInstance()
		{
			vtkHull result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkHull.vtkHull_NewInstance_17(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkHull)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x0601933C RID: 103228
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_RemoveAllPlanes_18(HandleRef pThis);

		/// <summary>
		/// Remove all planes from the current set of planes.
		/// </summary>
		// Token: 0x0601933D RID: 103229 RVA: 0x00231BF6 File Offset: 0x0022FDF6
		public void RemoveAllPlanes()
		{
			vtkHull.vtkHull_RemoveAllPlanes_18(base.GetCppThis());
		}

		// Token: 0x0601933E RID: 103230
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkHull_SafeDownCast_19(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Standard methods to instantiate, obtain type information, and print
		/// information about the class.
		/// </summary>
		// Token: 0x0601933F RID: 103231 RVA: 0x00231C08 File Offset: 0x0022FE08
		public new static vtkHull SafeDownCast(vtkObjectBase o)
		{
			vtkHull vtkHull = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkHull.vtkHull_SafeDownCast_19((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkHull = (vtkHull)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkHull.Register(null);
				}
			}
			return vtkHull;
		}

		// Token: 0x06019340 RID: 103232
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_SetPlane_20(HandleRef pThis, int i, double A, double B, double C);

		/// <summary>
		/// Set the normal values for plane i. This is a plane that was already
		/// added to the current set of planes with AddPlane(), and is now being
		/// modified. The values A, B, C are from the plane equation
		/// Ax + By + Cz + D = 0. This vector does not have to have unit length.
		/// Note that D is set to zero, except in the case of the method taking
		/// a vtkPlanes* argument, where it is set to the D value defined there.
		/// </summary>
		// Token: 0x06019341 RID: 103233 RVA: 0x00231C87 File Offset: 0x0022FE87
		public void SetPlane(int i, double A, double B, double C)
		{
			vtkHull.vtkHull_SetPlane_20(base.GetCppThis(), i, A, B, C);
		}

		// Token: 0x06019342 RID: 103234
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_SetPlane_21(HandleRef pThis, int i, IntPtr plane);

		/// <summary>
		/// Set the normal values for plane i. This is a plane that was already
		/// added to the current set of planes with AddPlane(), and is now being
		/// modified. The values A, B, C are from the plane equation
		/// Ax + By + Cz + D = 0. This vector does not have to have unit length.
		/// Note that D is set to zero, except in the case of the method taking
		/// a vtkPlanes* argument, where it is set to the D value defined there.
		/// </summary>
		// Token: 0x06019343 RID: 103235 RVA: 0x00231C9B File Offset: 0x0022FE9B
		public void SetPlane(int i, IntPtr plane)
		{
			vtkHull.vtkHull_SetPlane_21(base.GetCppThis(), i, plane);
		}

		// Token: 0x06019344 RID: 103236
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_SetPlane_22(HandleRef pThis, int i, double A, double B, double C, double D);

		/// <summary>
		/// Variations of AddPlane()/SetPlane() that allow D to be set. These
		/// methods are used when GenerateHull() is used.
		/// </summary>
		// Token: 0x06019345 RID: 103237 RVA: 0x00231CAC File Offset: 0x0022FEAC
		public void SetPlane(int i, double A, double B, double C, double D)
		{
			vtkHull.vtkHull_SetPlane_22(base.GetCppThis(), i, A, B, C, D);
		}

		// Token: 0x06019346 RID: 103238
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_SetPlane_23(HandleRef pThis, int i, IntPtr plane, double D);

		/// <summary>
		/// Variations of AddPlane()/SetPlane() that allow D to be set. These
		/// methods are used when GenerateHull() is used.
		/// </summary>
		// Token: 0x06019347 RID: 103239 RVA: 0x00231CC2 File Offset: 0x0022FEC2
		public void SetPlane(int i, IntPtr plane, double D)
		{
			vtkHull.vtkHull_SetPlane_23(base.GetCppThis(), i, plane, D);
		}

		// Token: 0x06019348 RID: 103240
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkHull_SetPlanes_24(HandleRef pThis, HandleRef planes);

		/// <summary>
		/// Set all the planes at once using a vtkPlanes implicit function.
		/// This also sets the D value, so it can be used with GenerateHull().
		/// </summary>
		// Token: 0x06019349 RID: 103241 RVA: 0x00231CD4 File Offset: 0x0022FED4
		public void SetPlanes(vtkPlanes planes)
		{
			vtkHull.vtkHull_SetPlanes_24(base.GetCppThis(), (planes == null) ? default(HandleRef) : planes.GetCppThis());
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x04001B99 RID: 7065
		public new const string MRFullTypeName = "Kitware.VTK.vtkHull";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x04001B9A RID: 7066
		public new static readonly string MRClassNameKey = "class vtkHull";
	}
}
