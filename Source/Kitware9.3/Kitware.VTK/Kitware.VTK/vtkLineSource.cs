using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkLineSource
	/// </summary>
	/// <remarks>
	///    create a line defined by two end points
	///
	/// vtkLineSource is a source object that creates a polyline defined by
	/// two endpoints or a collection of connected line segments. To define the line
	/// by end points, use `SetPoint1` and `SetPoint2` methods. To define a broken
	/// line comprising of multiple line segments, use `SetPoints` to provide the
	/// corner points that for the line.
	///
	/// Intermediate points within line segment (when specifying end points alone) or
	/// each of the individual line segments (when specifying broken line) can be
	/// specified in two ways. First, when `UseRegularRefinement` is true (default),
	/// the `Resolution` is used to determine how many intermediate points to add
	/// using regular refinement. Thus, if `Resolution` is set to 1, a mid point will
	/// be added for each of the line segments resulting in a line with 3 points: the
	/// two end points and the mid point. Second, when `UseRegularRefinement` is
	/// false, refinement ratios for points per segment are specified using
	/// `SetRefinementRatio` and `SetNumberOfRefinementRatios`. To generate same
	/// points as `Resolution` set to 1, the refinement ratios will be `[0, 0.5,
	/// 1.0]`. To add the end points of the line segment `0.0` and `1.0` must be
	/// included in the collection of refinement ratios.
	///
	/// @section ChangesVTK9 Changes in VTK 9.0
	///
	/// Prior to VTK 9.0, when broken line was being generated, the texture
	/// coordinates for each of the individual breaks in the line ranged from [0.0,
	/// 1.0]. This has been changed to generate texture coordinates in the range
	/// [0.0, 1.0] over the entire output line irrespective of whether the line was
	/// generated by simply specifying the end points or multiple line segments.
	///
	/// @par Thanks:
	/// This class was extended by Philippe Pebay, Kitware SAS 2011, to support
	/// broken lines as well as simple lines.
	/// </remarks>
	// Token: 0x0200082D RID: 2093
	public class vtkLineSource : vtkPolyDataAlgorithm
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x06015A60 RID: 88672 RVA: 0x001E907B File Offset: 0x001E727B
		static vtkLineSource()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkLineSource.MRClassNameKey, Type.GetType("Kitware.VTK.vtkLineSource"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x06015A61 RID: 88673 RVA: 0x001E90A3 File Offset: 0x001E72A3
		public vtkLineSource(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x06015A62 RID: 88674
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLineSource_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06015A63 RID: 88675 RVA: 0x001E90B4 File Offset: 0x001E72B4
		public new static vtkLineSource New()
		{
			vtkLineSource result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkLineSource.vtkLineSource_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkLineSource)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06015A64 RID: 88676 RVA: 0x001E9108 File Offset: 0x001E7308
		public vtkLineSource() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkLineSource.vtkLineSource_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x06015A65 RID: 88677 RVA: 0x001E914C File Offset: 0x001E734C
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x06015A66 RID: 88678
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkLineSource_GetNumberOfGenerationsFromBase_01(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06015A67 RID: 88679 RVA: 0x001E9158 File Offset: 0x001E7358
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkLineSource.vtkLineSource_GetNumberOfGenerationsFromBase_01(base.GetCppThis(), type);
		}

		// Token: 0x06015A68 RID: 88680
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkLineSource_GetNumberOfGenerationsFromBaseType_02([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06015A69 RID: 88681 RVA: 0x001E9178 File Offset: 0x001E7378
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkLineSource.vtkLineSource_GetNumberOfGenerationsFromBaseType_02(type);
		}

		// Token: 0x06015A6A RID: 88682
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLineSource_GetNumberOfRefinementRatios_03(HandleRef pThis);

		/// <summary>
		/// API for setting/getting refinement ratios for points added to the line
		/// segment. The ratio is in the range `[0.0, 1.0]` where 0.0 is the start of
		/// the line segment and 1.0 is the end. When generating broken lines i.e.
		/// using `SetPoints`, this specifies refinement points for each of the
		/// individual line segment. Note that `0.0` and `1.0` must be explicitly
		/// included to generate a point and the start and/or end of the line segment.
		/// This is used only when `UseRegularRefinement` is false.
		/// </summary>
		// Token: 0x06015A6B RID: 88683 RVA: 0x001E9194 File Offset: 0x001E7394
		public int GetNumberOfRefinementRatios()
		{
			return vtkLineSource.vtkLineSource_GetNumberOfRefinementRatios_03(base.GetCppThis());
		}

		// Token: 0x06015A6C RID: 88684
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLineSource_GetOutputPointsPrecision_04(HandleRef pThis);

		/// <summary>
		/// Set/get the desired precision for the output points.
		/// vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating point.
		/// vtkAlgorithm::DOUBLE_PRECISION - Output double-precision floating point.
		/// </summary>
		// Token: 0x06015A6D RID: 88685 RVA: 0x001E91B4 File Offset: 0x001E73B4
		public virtual int GetOutputPointsPrecision()
		{
			return vtkLineSource.vtkLineSource_GetOutputPointsPrecision_04(base.GetCppThis());
		}

		// Token: 0x06015A6E RID: 88686
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLineSource_GetPoint1_05(HandleRef pThis);

		/// <summary>
		/// Set position of first end point.
		/// </summary>
		// Token: 0x06015A6F RID: 88687 RVA: 0x001E91D4 File Offset: 0x001E73D4
		public virtual double[] GetPoint1()
		{
			IntPtr intPtr = vtkLineSource.vtkLineSource_GetPoint1_05(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[3];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x06015A70 RID: 88688
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_GetPoint1_06(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Set position of first end point.
		/// </summary>
		// Token: 0x06015A71 RID: 88689 RVA: 0x001E921C File Offset: 0x001E741C
		public virtual void GetPoint1(IntPtr data)
		{
			vtkLineSource.vtkLineSource_GetPoint1_06(base.GetCppThis(), data);
		}

		// Token: 0x06015A72 RID: 88690
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLineSource_GetPoint2_07(HandleRef pThis);

		/// <summary>
		/// Set position of other end point.
		/// </summary>
		// Token: 0x06015A73 RID: 88691 RVA: 0x001E922C File Offset: 0x001E742C
		public virtual double[] GetPoint2()
		{
			IntPtr intPtr = vtkLineSource.vtkLineSource_GetPoint2_07(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[3];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x06015A74 RID: 88692
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_GetPoint2_08(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Set position of other end point.
		/// </summary>
		// Token: 0x06015A75 RID: 88693 RVA: 0x001E9274 File Offset: 0x001E7474
		public virtual void GetPoint2(IntPtr data)
		{
			vtkLineSource.vtkLineSource_GetPoint2_08(base.GetCppThis(), data);
		}

		// Token: 0x06015A76 RID: 88694
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLineSource_GetPoints_09(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Set/Get the list of points defining a broken line
		/// </summary>
		// Token: 0x06015A77 RID: 88695 RVA: 0x001E9284 File Offset: 0x001E7484
		public virtual vtkPoints GetPoints()
		{
			vtkPoints vtkPoints = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkLineSource.vtkLineSource_GetPoints_09(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkPoints = (vtkPoints)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkPoints.Register(null);
				}
			}
			return vtkPoints;
		}

		// Token: 0x06015A78 RID: 88696
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkLineSource_GetRefinementRatio_10(HandleRef pThis, int index);

		/// <summary>
		/// API for setting/getting refinement ratios for points added to the line
		/// segment. The ratio is in the range `[0.0, 1.0]` where 0.0 is the start of
		/// the line segment and 1.0 is the end. When generating broken lines i.e.
		/// using `SetPoints`, this specifies refinement points for each of the
		/// individual line segment. Note that `0.0` and `1.0` must be explicitly
		/// included to generate a point and the start and/or end of the line segment.
		/// This is used only when `UseRegularRefinement` is false.
		/// </summary>
		// Token: 0x06015A79 RID: 88697 RVA: 0x001E92F4 File Offset: 0x001E74F4
		public double GetRefinementRatio(int index)
		{
			return vtkLineSource.vtkLineSource_GetRefinementRatio_10(base.GetCppThis(), index);
		}

		// Token: 0x06015A7A RID: 88698
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLineSource_GetResolution_11(HandleRef pThis);

		/// <summary>
		/// Divide line into Resolution number of pieces. This is used when
		/// `UseRegularRefinement` is true.
		/// </summary>
		// Token: 0x06015A7B RID: 88699 RVA: 0x001E9314 File Offset: 0x001E7514
		public virtual int GetResolution()
		{
			return vtkLineSource.vtkLineSource_GetResolution_11(base.GetCppThis());
		}

		// Token: 0x06015A7C RID: 88700
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLineSource_GetResolutionMaxValue_12(HandleRef pThis);

		/// <summary>
		/// Divide line into Resolution number of pieces. This is used when
		/// `UseRegularRefinement` is true.
		/// </summary>
		// Token: 0x06015A7D RID: 88701 RVA: 0x001E9334 File Offset: 0x001E7534
		public virtual int GetResolutionMaxValue()
		{
			return vtkLineSource.vtkLineSource_GetResolutionMaxValue_12(base.GetCppThis());
		}

		// Token: 0x06015A7E RID: 88702
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLineSource_GetResolutionMinValue_13(HandleRef pThis);

		/// <summary>
		/// Divide line into Resolution number of pieces. This is used when
		/// `UseRegularRefinement` is true.
		/// </summary>
		// Token: 0x06015A7F RID: 88703 RVA: 0x001E9354 File Offset: 0x001E7554
		public virtual int GetResolutionMinValue()
		{
			return vtkLineSource.vtkLineSource_GetResolutionMinValue_13(base.GetCppThis());
		}

		// Token: 0x06015A80 RID: 88704
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern byte vtkLineSource_GetUseRegularRefinement_14(HandleRef pThis);

		/// <summary>
		/// Set/Get how the line segment is to be refined. One can choose to add points
		/// at regular intervals per segment (defined using `Resolution`) or explicit
		/// locations (defined using `SetRefinementRatio`). Default is true i.e
		/// `Resolution` will be used to determine placement of points within each line
		/// segment.
		/// </summary>
		// Token: 0x06015A81 RID: 88705 RVA: 0x001E9374 File Offset: 0x001E7574
		public virtual bool GetUseRegularRefinement()
		{
			return vtkLineSource.vtkLineSource_GetUseRegularRefinement_14(base.GetCppThis()) != 0;
		}

		// Token: 0x06015A82 RID: 88706
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLineSource_IsA_15(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06015A83 RID: 88707 RVA: 0x001E939C File Offset: 0x001E759C
		public override int IsA(string type)
		{
			return vtkLineSource.vtkLineSource_IsA_15(base.GetCppThis(), type);
		}

		// Token: 0x06015A84 RID: 88708
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLineSource_IsTypeOf_16([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06015A85 RID: 88709 RVA: 0x001E93BC File Offset: 0x001E75BC
		public new static int IsTypeOf(string type)
		{
			return vtkLineSource.vtkLineSource_IsTypeOf_16(type);
		}

		// Token: 0x06015A86 RID: 88710
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLineSource_NewInstance_18(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06015A87 RID: 88711 RVA: 0x001E93D8 File Offset: 0x001E75D8
		public new vtkLineSource NewInstance()
		{
			vtkLineSource result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkLineSource.vtkLineSource_NewInstance_18(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkLineSource)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x06015A88 RID: 88712
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLineSource_SafeDownCast_19(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06015A89 RID: 88713 RVA: 0x001E9434 File Offset: 0x001E7634
		public new static vtkLineSource SafeDownCast(vtkObjectBase o)
		{
			vtkLineSource vtkLineSource = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkLineSource.vtkLineSource_SafeDownCast_19((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkLineSource = (vtkLineSource)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkLineSource.Register(null);
				}
			}
			return vtkLineSource;
		}

		// Token: 0x06015A8A RID: 88714
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetNumberOfRefinementRatios_20(HandleRef pThis, int arg0);

		/// <summary>
		/// API for setting/getting refinement ratios for points added to the line
		/// segment. The ratio is in the range `[0.0, 1.0]` where 0.0 is the start of
		/// the line segment and 1.0 is the end. When generating broken lines i.e.
		/// using `SetPoints`, this specifies refinement points for each of the
		/// individual line segment. Note that `0.0` and `1.0` must be explicitly
		/// included to generate a point and the start and/or end of the line segment.
		/// This is used only when `UseRegularRefinement` is false.
		/// </summary>
		// Token: 0x06015A8B RID: 88715 RVA: 0x001E94B3 File Offset: 0x001E76B3
		public void SetNumberOfRefinementRatios(int arg0)
		{
			vtkLineSource.vtkLineSource_SetNumberOfRefinementRatios_20(base.GetCppThis(), arg0);
		}

		// Token: 0x06015A8C RID: 88716
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetOutputPointsPrecision_21(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/get the desired precision for the output points.
		/// vtkAlgorithm::SINGLE_PRECISION - Output single-precision floating point.
		/// vtkAlgorithm::DOUBLE_PRECISION - Output double-precision floating point.
		/// </summary>
		// Token: 0x06015A8D RID: 88717 RVA: 0x001E94C3 File Offset: 0x001E76C3
		public virtual void SetOutputPointsPrecision(int _arg)
		{
			vtkLineSource.vtkLineSource_SetOutputPointsPrecision_21(base.GetCppThis(), _arg);
		}

		// Token: 0x06015A8E RID: 88718
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetPoint1_22(HandleRef pThis, double _arg1, double _arg2, double _arg3);

		/// <summary>
		/// Set position of first end point.
		/// </summary>
		// Token: 0x06015A8F RID: 88719 RVA: 0x001E94D3 File Offset: 0x001E76D3
		public virtual void SetPoint1(double _arg1, double _arg2, double _arg3)
		{
			vtkLineSource.vtkLineSource_SetPoint1_22(base.GetCppThis(), _arg1, _arg2, _arg3);
		}

		// Token: 0x06015A90 RID: 88720
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetPoint1_23(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Set position of first end point.
		/// </summary>
		// Token: 0x06015A91 RID: 88721 RVA: 0x001E94E5 File Offset: 0x001E76E5
		public virtual void SetPoint1(IntPtr _arg)
		{
			vtkLineSource.vtkLineSource_SetPoint1_23(base.GetCppThis(), _arg);
		}

		// Token: 0x06015A92 RID: 88722
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetPoint2_24(HandleRef pThis, double _arg1, double _arg2, double _arg3);

		/// <summary>
		/// Set position of other end point.
		/// </summary>
		// Token: 0x06015A93 RID: 88723 RVA: 0x001E94F5 File Offset: 0x001E76F5
		public virtual void SetPoint2(double _arg1, double _arg2, double _arg3)
		{
			vtkLineSource.vtkLineSource_SetPoint2_24(base.GetCppThis(), _arg1, _arg2, _arg3);
		}

		// Token: 0x06015A94 RID: 88724
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetPoint2_25(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Set position of other end point.
		/// </summary>
		// Token: 0x06015A95 RID: 88725 RVA: 0x001E9507 File Offset: 0x001E7707
		public virtual void SetPoint2(IntPtr _arg)
		{
			vtkLineSource.vtkLineSource_SetPoint2_25(base.GetCppThis(), _arg);
		}

		// Token: 0x06015A96 RID: 88726
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetPoints_26(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// Set/Get the list of points defining a broken line
		/// </summary>
		// Token: 0x06015A97 RID: 88727 RVA: 0x001E9518 File Offset: 0x001E7718
		public virtual void SetPoints(vtkPoints arg0)
		{
			vtkLineSource.vtkLineSource_SetPoints_26(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x06015A98 RID: 88728
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetRefinementRatio_27(HandleRef pThis, int index, double value);

		/// <summary>
		/// API for setting/getting refinement ratios for points added to the line
		/// segment. The ratio is in the range `[0.0, 1.0]` where 0.0 is the start of
		/// the line segment and 1.0 is the end. When generating broken lines i.e.
		/// using `SetPoints`, this specifies refinement points for each of the
		/// individual line segment. Note that `0.0` and `1.0` must be explicitly
		/// included to generate a point and the start and/or end of the line segment.
		/// This is used only when `UseRegularRefinement` is false.
		/// </summary>
		// Token: 0x06015A99 RID: 88729 RVA: 0x001E9547 File Offset: 0x001E7747
		public void SetRefinementRatio(int index, double value)
		{
			vtkLineSource.vtkLineSource_SetRefinementRatio_27(base.GetCppThis(), index, value);
		}

		// Token: 0x06015A9A RID: 88730
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetResolution_28(HandleRef pThis, int _arg);

		/// <summary>
		/// Divide line into Resolution number of pieces. This is used when
		/// `UseRegularRefinement` is true.
		/// </summary>
		// Token: 0x06015A9B RID: 88731 RVA: 0x001E9558 File Offset: 0x001E7758
		public virtual void SetResolution(int _arg)
		{
			vtkLineSource.vtkLineSource_SetResolution_28(base.GetCppThis(), _arg);
		}

		// Token: 0x06015A9C RID: 88732
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_SetUseRegularRefinement_29(HandleRef pThis, byte _arg);

		/// <summary>
		/// Set/Get how the line segment is to be refined. One can choose to add points
		/// at regular intervals per segment (defined using `Resolution`) or explicit
		/// locations (defined using `SetRefinementRatio`). Default is true i.e
		/// `Resolution` will be used to determine placement of points within each line
		/// segment.
		/// </summary>
		// Token: 0x06015A9D RID: 88733 RVA: 0x001E9568 File Offset: 0x001E7768
		public virtual void SetUseRegularRefinement(bool _arg)
		{
			vtkLineSource.vtkLineSource_SetUseRegularRefinement_29(base.GetCppThis(), _arg ? (byte)1 : (byte)0);
		}

		// Token: 0x06015A9E RID: 88734
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_UseRegularRefinementOff_30(HandleRef pThis);

		/// <summary>
		/// Set/Get how the line segment is to be refined. One can choose to add points
		/// at regular intervals per segment (defined using `Resolution`) or explicit
		/// locations (defined using `SetRefinementRatio`). Default is true i.e
		/// `Resolution` will be used to determine placement of points within each line
		/// segment.
		/// </summary>
		// Token: 0x06015A9F RID: 88735 RVA: 0x001E9580 File Offset: 0x001E7780
		public virtual void UseRegularRefinementOff()
		{
			vtkLineSource.vtkLineSource_UseRegularRefinementOff_30(base.GetCppThis());
		}

		// Token: 0x06015AA0 RID: 88736
		[DllImport("Kitware.VTK.FiltersSources.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLineSource_UseRegularRefinementOn_31(HandleRef pThis);

		/// <summary>
		/// Set/Get how the line segment is to be refined. One can choose to add points
		/// at regular intervals per segment (defined using `Resolution`) or explicit
		/// locations (defined using `SetRefinementRatio`). Default is true i.e
		/// `Resolution` will be used to determine placement of points within each line
		/// segment.
		/// </summary>
		// Token: 0x06015AA1 RID: 88737 RVA: 0x001E958F File Offset: 0x001E778F
		public virtual void UseRegularRefinementOn()
		{
			vtkLineSource.vtkLineSource_UseRegularRefinementOn_31(base.GetCppThis());
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x040018A4 RID: 6308
		public new const string MRFullTypeName = "Kitware.VTK.vtkLineSource";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x040018A5 RID: 6309
		public new static readonly string MRClassNameKey = "class vtkLineSource";
	}
}
