using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkMinimalStandardRandomSequence
	/// </summary>
	/// <remarks>
	///    Park and Miller Sequence of pseudo random numbers
	///
	/// vtkMinimalStandardRandomSequence is a sequence of statistically independent
	/// pseudo random numbers uniformly distributed between 0.0 and 1.0.
	///
	/// The sequence is generated by a prime modulus multiplicative linear
	/// congruential generator (PMMLCG) or "Lehmer generator" with multiplier 16807
	/// and prime modulus 2^(31)-1. The authors calls it
	/// "minimal standard random number generator"
	///
	/// ref: "Random Number Generators: Good Ones are Hard to Find,"
	/// by Stephen K. Park and Keith W. Miller in Communications of the ACM,
	/// 31, 10 (Oct. 1988) pp. 1192-1201.
	/// Code is at page 1195, "Integer version 2"
	///
	/// Correctness test is described in first column, page 1195:
	/// A seed of 1 at step 1 should give a seed of 1043618065 at step 10001.
	/// </remarks>
	// Token: 0x02000B70 RID: 2928
	public class vtkMinimalStandardRandomSequence : vtkRandomSequence
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x0601E982 RID: 125314 RVA: 0x002B618F File Offset: 0x002B438F
		static vtkMinimalStandardRandomSequence()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkMinimalStandardRandomSequence.MRClassNameKey, Type.GetType("Kitware.VTK.vtkMinimalStandardRandomSequence"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x0601E983 RID: 125315 RVA: 0x002B61B7 File Offset: 0x002B43B7
		public vtkMinimalStandardRandomSequence(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x0601E984 RID: 125316
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkMinimalStandardRandomSequence_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Standard methods for instantiation, type information, and printing.
		/// </summary>
		// Token: 0x0601E985 RID: 125317 RVA: 0x002B61C8 File Offset: 0x002B43C8
		public new static vtkMinimalStandardRandomSequence New()
		{
			vtkMinimalStandardRandomSequence result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkMinimalStandardRandomSequence)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		/// Standard methods for instantiation, type information, and printing.
		/// </summary>
		// Token: 0x0601E986 RID: 125318 RVA: 0x002B621C File Offset: 0x002B441C
		public vtkMinimalStandardRandomSequence() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x0601E987 RID: 125319 RVA: 0x002B6260 File Offset: 0x002B4460
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x0601E988 RID: 125320
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkMinimalStandardRandomSequence_GetNextRangeValue_01(HandleRef pThis, double rangeMin, double rangeMax);

		/// <summary>
		/// Get the next value in the sequence within a range.
		///
		/// \see vtkMinimalStandardRandomSequence::GetRangeValue
		/// </summary>
		// Token: 0x0601E989 RID: 125321 RVA: 0x002B626C File Offset: 0x002B446C
		public double GetNextRangeValue(double rangeMin, double rangeMax)
		{
			return vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_GetNextRangeValue_01(base.GetCppThis(), rangeMin, rangeMax);
		}

		// Token: 0x0601E98A RID: 125322
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkMinimalStandardRandomSequence_GetNumberOfGenerationsFromBase_02(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods for instantiation, type information, and printing.
		/// </summary>
		// Token: 0x0601E98B RID: 125323 RVA: 0x002B6290 File Offset: 0x002B4490
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_GetNumberOfGenerationsFromBase_02(base.GetCppThis(), type);
		}

		// Token: 0x0601E98C RID: 125324
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkMinimalStandardRandomSequence_GetNumberOfGenerationsFromBaseType_03([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods for instantiation, type information, and printing.
		/// </summary>
		// Token: 0x0601E98D RID: 125325 RVA: 0x002B62B0 File Offset: 0x002B44B0
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_GetNumberOfGenerationsFromBaseType_03(type);
		}

		// Token: 0x0601E98E RID: 125326
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkMinimalStandardRandomSequence_GetRangeValue_04(HandleRef pThis, double rangeMin, double rangeMax);

		/// <summary>
		/// Convenient method to return a value in a specific range from the
		/// range [0,1. There is an initial implementation that can be overridden
		/// by a subclass.
		/// There is no pre-condition on the range:
		/// - it can be in increasing order: rangeMin&lt;rangeMax
		/// - it can be empty: rangeMin=rangeMax
		/// - it can be in decreasing order: rangeMin&gt;rangeMax
		/// \post result_in_range:
		/// (rangeMin&lt;=rangeMax &amp;&amp; result&gt;=rangeMin &amp;&amp; result&lt;=rangeMax)
		/// || (rangeMax&lt;=rangeMin &amp;&amp; result&gt;=rangeMax &amp;&amp; result&lt;=rangeMin)
		/// </summary>
		// Token: 0x0601E98F RID: 125327 RVA: 0x002B62CC File Offset: 0x002B44CC
		public virtual double GetRangeValue(double rangeMin, double rangeMax)
		{
			return vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_GetRangeValue_04(base.GetCppThis(), rangeMin, rangeMax);
		}

		// Token: 0x0601E990 RID: 125328
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkMinimalStandardRandomSequence_GetSeed_05(HandleRef pThis);

		/// <summary>
		/// Get the seed of the random sequence.
		/// Only useful for writing correctness test.
		/// </summary>
		// Token: 0x0601E991 RID: 125329 RVA: 0x002B62F0 File Offset: 0x002B44F0
		public int GetSeed()
		{
			return vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_GetSeed_05(base.GetCppThis());
		}

		// Token: 0x0601E992 RID: 125330
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkMinimalStandardRandomSequence_GetValue_06(HandleRef pThis);

		/// <summary>
		/// Current value
		/// \post unit_range: result&gt;=0.0 &amp;&amp; result&lt;=1.0
		/// </summary>
		// Token: 0x0601E993 RID: 125331 RVA: 0x002B6310 File Offset: 0x002B4510
		public override double GetValue()
		{
			return vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_GetValue_06(base.GetCppThis());
		}

		// Token: 0x0601E994 RID: 125332
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkMinimalStandardRandomSequence_Initialize_07(HandleRef pThis, uint seed);

		/// <summary>
		/// Satisfy general API of vtkRandomSequence superclass. Initialize the
		/// sequence with a seed.
		/// </summary>
		// Token: 0x0601E995 RID: 125333 RVA: 0x002B632F File Offset: 0x002B452F
		public override void Initialize(uint seed)
		{
			vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_Initialize_07(base.GetCppThis(), seed);
		}

		// Token: 0x0601E996 RID: 125334
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkMinimalStandardRandomSequence_IsA_08(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods for instantiation, type information, and printing.
		/// </summary>
		// Token: 0x0601E997 RID: 125335 RVA: 0x002B6340 File Offset: 0x002B4540
		public override int IsA(string type)
		{
			return vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_IsA_08(base.GetCppThis(), type);
		}

		// Token: 0x0601E998 RID: 125336
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkMinimalStandardRandomSequence_IsTypeOf_09([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		/// Standard methods for instantiation, type information, and printing.
		/// </summary>
		// Token: 0x0601E999 RID: 125337 RVA: 0x002B6360 File Offset: 0x002B4560
		public new static int IsTypeOf(string type)
		{
			return vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_IsTypeOf_09(type);
		}

		// Token: 0x0601E99A RID: 125338
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkMinimalStandardRandomSequence_NewInstance_11(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Standard methods for instantiation, type information, and printing.
		/// </summary>
		// Token: 0x0601E99B RID: 125339 RVA: 0x002B637C File Offset: 0x002B457C
		public new vtkMinimalStandardRandomSequence NewInstance()
		{
			vtkMinimalStandardRandomSequence result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_NewInstance_11(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkMinimalStandardRandomSequence)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x0601E99C RID: 125340
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkMinimalStandardRandomSequence_Next_12(HandleRef pThis);

		/// <summary>
		/// Move to the next number in the random sequence.
		/// </summary>
		// Token: 0x0601E99D RID: 125341 RVA: 0x002B63D6 File Offset: 0x002B45D6
		public override void Next()
		{
			vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_Next_12(base.GetCppThis());
		}

		// Token: 0x0601E99E RID: 125342
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkMinimalStandardRandomSequence_SafeDownCast_13(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Standard methods for instantiation, type information, and printing.
		/// </summary>
		// Token: 0x0601E99F RID: 125343 RVA: 0x002B63E8 File Offset: 0x002B45E8
		public new static vtkMinimalStandardRandomSequence SafeDownCast(vtkObjectBase o)
		{
			vtkMinimalStandardRandomSequence vtkMinimalStandardRandomSequence = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_SafeDownCast_13((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkMinimalStandardRandomSequence = (vtkMinimalStandardRandomSequence)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkMinimalStandardRandomSequence.Register(null);
				}
			}
			return vtkMinimalStandardRandomSequence;
		}

		// Token: 0x0601E9A0 RID: 125344
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkMinimalStandardRandomSequence_SetSeed_14(HandleRef pThis, int value);

		/// <summary>
		/// Set the seed of the random sequence.
		/// The following pre-condition is stated page 1197, second column:
		/// valid_seed: value&gt;=1 &amp;&amp; value&lt;=2147483646
		/// 2147483646=(2^31)-2
		/// This method does not have this criterium as a pre-condition (ie it will
		/// not fail if an incorrect seed value is passed) but the value is silently
		/// changed to fit in the valid range [1,2147483646].
		/// 2147483646 is added to a null or negative value.
		/// 2147483647 is changed to be 1 (ie 2147483646 is subtracted).
		/// Implementation note: it also performs 3 calls to Next() to avoid the
		/// bad property that the first random number is proportional to the seed
		/// value.
		/// </summary>
		// Token: 0x0601E9A1 RID: 125345 RVA: 0x002B6467 File Offset: 0x002B4667
		public void SetSeed(int value)
		{
			vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_SetSeed_14(base.GetCppThis(), value);
		}

		// Token: 0x0601E9A2 RID: 125346
		[DllImport("Kitware.VTK.CommonCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkMinimalStandardRandomSequence_SetSeedOnly_15(HandleRef pThis, int value);

		/// <summary>
		/// Set the seed of the random sequence. There is no extra internal
		/// adjustment. Only useful for writing correctness test.
		/// The following pre-condition is stated page 1197, second column
		/// 2147483646=(2^31)-2
		/// This method does not have this criterium as a pre-condition (ie it will
		/// not fail if an incorrect seed value is passed) but the value is silently
		/// changed to fit in the valid range [1,2147483646].
		/// 2147483646 is added to a null or negative value.
		/// 2147483647 is changed to be 1 (ie 2147483646 is subtracted).
		/// </summary>
		// Token: 0x0601E9A3 RID: 125347 RVA: 0x002B6477 File Offset: 0x002B4677
		public void SetSeedOnly(int value)
		{
			vtkMinimalStandardRandomSequence.vtkMinimalStandardRandomSequence_SetSeedOnly_15(base.GetCppThis(), value);
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x040020C1 RID: 8385
		public new const string MRFullTypeName = "Kitware.VTK.vtkMinimalStandardRandomSequence";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x040020C2 RID: 8386
		public new static readonly string MRClassNameKey = "class vtkMinimalStandardRandomSequence";
	}
}
