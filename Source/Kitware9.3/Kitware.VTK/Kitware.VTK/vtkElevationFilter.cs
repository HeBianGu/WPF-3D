using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkElevationFilter
	/// </summary>
	/// <remarks>
	///    generate scalars along a specified direction
	///
	/// vtkElevationFilter is a filter to generate scalar values from a
	/// dataset.  The scalar values lie within a user specified range, and
	/// are generated by computing a projection of each dataset point onto
	/// a line. The line can be oriented arbitrarily. A typical example is
	/// to generate scalars based on elevation or height above a plane.
	///
	/// @warning
	/// vtkSimpleElevationFilter may be easier to use in many cases; e.g.,
	/// compute vertical elevation above zero z-point.
	///
	/// @warning
	/// This class has been threaded with vtkSMPTools. Using TBB or other
	/// non-sequential type (set in the CMake variable
	/// VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.
	///
	/// </remarks>
	/// <seealso>
	///
	/// vtkSimpleElevationFilter
	/// </seealso>
	// Token: 0x0200095E RID: 2398
	public class vtkElevationFilter : vtkDataSetAlgorithm
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x06018F3E RID: 102206 RVA: 0x0022CBC7 File Offset: 0x0022ADC7
		static vtkElevationFilter()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkElevationFilter.MRClassNameKey, Type.GetType("Kitware.VTK.vtkElevationFilter"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x06018F3F RID: 102207 RVA: 0x0022CBEF File Offset: 0x0022ADEF
		public vtkElevationFilter(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x06018F40 RID: 102208
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkElevationFilter_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06018F41 RID: 102209 RVA: 0x0022CC00 File Offset: 0x0022AE00
		public new static vtkElevationFilter New()
		{
			vtkElevationFilter result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkElevationFilter.vtkElevationFilter_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkElevationFilter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06018F42 RID: 102210 RVA: 0x0022CC54 File Offset: 0x0022AE54
		public vtkElevationFilter() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkElevationFilter.vtkElevationFilter_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x06018F43 RID: 102211 RVA: 0x0022CC98 File Offset: 0x0022AE98
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x06018F44 RID: 102212
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkElevationFilter_GetHighPoint_01(HandleRef pThis);

		/// <summary>
		/// Define other end of the line (large scalar values).  Default is
		/// (0,0,1).
		/// </summary>
		// Token: 0x06018F45 RID: 102213 RVA: 0x0022CCA4 File Offset: 0x0022AEA4
		public virtual double[] GetHighPoint()
		{
			IntPtr intPtr = vtkElevationFilter.vtkElevationFilter_GetHighPoint_01(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[3];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x06018F46 RID: 102214
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkElevationFilter_GetHighPoint_02(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Define other end of the line (large scalar values).  Default is
		/// (0,0,1).
		/// </summary>
		// Token: 0x06018F47 RID: 102215 RVA: 0x0022CCEC File Offset: 0x0022AEEC
		public virtual void GetHighPoint(IntPtr data)
		{
			vtkElevationFilter.vtkElevationFilter_GetHighPoint_02(base.GetCppThis(), data);
		}

		// Token: 0x06018F48 RID: 102216
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkElevationFilter_GetLowPoint_03(HandleRef pThis);

		/// <summary>
		/// Define one end of the line (small scalar values).  Default is
		/// (0,0,0).
		/// </summary>
		// Token: 0x06018F49 RID: 102217 RVA: 0x0022CCFC File Offset: 0x0022AEFC
		public virtual double[] GetLowPoint()
		{
			IntPtr intPtr = vtkElevationFilter.vtkElevationFilter_GetLowPoint_03(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[3];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x06018F4A RID: 102218
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkElevationFilter_GetLowPoint_04(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Define one end of the line (small scalar values).  Default is
		/// (0,0,0).
		/// </summary>
		// Token: 0x06018F4B RID: 102219 RVA: 0x0022CD44 File Offset: 0x0022AF44
		public virtual void GetLowPoint(IntPtr data)
		{
			vtkElevationFilter.vtkElevationFilter_GetLowPoint_04(base.GetCppThis(), data);
		}

		// Token: 0x06018F4C RID: 102220
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkElevationFilter_GetNumberOfGenerationsFromBase_05(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06018F4D RID: 102221 RVA: 0x0022CD54 File Offset: 0x0022AF54
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkElevationFilter.vtkElevationFilter_GetNumberOfGenerationsFromBase_05(base.GetCppThis(), type);
		}

		// Token: 0x06018F4E RID: 102222
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkElevationFilter_GetNumberOfGenerationsFromBaseType_06([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06018F4F RID: 102223 RVA: 0x0022CD74 File Offset: 0x0022AF74
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkElevationFilter.vtkElevationFilter_GetNumberOfGenerationsFromBaseType_06(type);
		}

		// Token: 0x06018F50 RID: 102224
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkElevationFilter_GetScalarRange_07(HandleRef pThis);

		/// <summary>
		/// Specify range to map scalars into.  Default is [0, 1].
		/// </summary>
		// Token: 0x06018F51 RID: 102225 RVA: 0x0022CD90 File Offset: 0x0022AF90
		public virtual double[] GetScalarRange()
		{
			IntPtr intPtr = vtkElevationFilter.vtkElevationFilter_GetScalarRange_07(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[2];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x06018F52 RID: 102226
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkElevationFilter_GetScalarRange_08(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Specify range to map scalars into.  Default is [0, 1].
		/// </summary>
		// Token: 0x06018F53 RID: 102227 RVA: 0x0022CDD8 File Offset: 0x0022AFD8
		public virtual void GetScalarRange(IntPtr data)
		{
			vtkElevationFilter.vtkElevationFilter_GetScalarRange_08(base.GetCppThis(), data);
		}

		// Token: 0x06018F54 RID: 102228
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkElevationFilter_IsA_09(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06018F55 RID: 102229 RVA: 0x0022CDE8 File Offset: 0x0022AFE8
		public override int IsA(string type)
		{
			return vtkElevationFilter.vtkElevationFilter_IsA_09(base.GetCppThis(), type);
		}

		// Token: 0x06018F56 RID: 102230
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkElevationFilter_IsTypeOf_10([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06018F57 RID: 102231 RVA: 0x0022CE08 File Offset: 0x0022B008
		public new static int IsTypeOf(string type)
		{
			return vtkElevationFilter.vtkElevationFilter_IsTypeOf_10(type);
		}

		// Token: 0x06018F58 RID: 102232
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkElevationFilter_NewInstance_12(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06018F59 RID: 102233 RVA: 0x0022CE24 File Offset: 0x0022B024
		public new vtkElevationFilter NewInstance()
		{
			vtkElevationFilter result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkElevationFilter.vtkElevationFilter_NewInstance_12(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkElevationFilter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x06018F5A RID: 102234
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkElevationFilter_SafeDownCast_13(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06018F5B RID: 102235 RVA: 0x0022CE80 File Offset: 0x0022B080
		public new static vtkElevationFilter SafeDownCast(vtkObjectBase o)
		{
			vtkElevationFilter vtkElevationFilter = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkElevationFilter.vtkElevationFilter_SafeDownCast_13((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkElevationFilter = (vtkElevationFilter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkElevationFilter.Register(null);
				}
			}
			return vtkElevationFilter;
		}

		// Token: 0x06018F5C RID: 102236
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkElevationFilter_SetHighPoint_14(HandleRef pThis, double _arg1, double _arg2, double _arg3);

		/// <summary>
		/// Define other end of the line (large scalar values).  Default is
		/// (0,0,1).
		/// </summary>
		// Token: 0x06018F5D RID: 102237 RVA: 0x0022CEFF File Offset: 0x0022B0FF
		public virtual void SetHighPoint(double _arg1, double _arg2, double _arg3)
		{
			vtkElevationFilter.vtkElevationFilter_SetHighPoint_14(base.GetCppThis(), _arg1, _arg2, _arg3);
		}

		// Token: 0x06018F5E RID: 102238
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkElevationFilter_SetHighPoint_15(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Define other end of the line (large scalar values).  Default is
		/// (0,0,1).
		/// </summary>
		// Token: 0x06018F5F RID: 102239 RVA: 0x0022CF11 File Offset: 0x0022B111
		public virtual void SetHighPoint(IntPtr _arg)
		{
			vtkElevationFilter.vtkElevationFilter_SetHighPoint_15(base.GetCppThis(), _arg);
		}

		// Token: 0x06018F60 RID: 102240
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkElevationFilter_SetLowPoint_16(HandleRef pThis, double _arg1, double _arg2, double _arg3);

		/// <summary>
		/// Define one end of the line (small scalar values).  Default is
		/// (0,0,0).
		/// </summary>
		// Token: 0x06018F61 RID: 102241 RVA: 0x0022CF21 File Offset: 0x0022B121
		public virtual void SetLowPoint(double _arg1, double _arg2, double _arg3)
		{
			vtkElevationFilter.vtkElevationFilter_SetLowPoint_16(base.GetCppThis(), _arg1, _arg2, _arg3);
		}

		// Token: 0x06018F62 RID: 102242
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkElevationFilter_SetLowPoint_17(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Define one end of the line (small scalar values).  Default is
		/// (0,0,0).
		/// </summary>
		// Token: 0x06018F63 RID: 102243 RVA: 0x0022CF33 File Offset: 0x0022B133
		public virtual void SetLowPoint(IntPtr _arg)
		{
			vtkElevationFilter.vtkElevationFilter_SetLowPoint_17(base.GetCppThis(), _arg);
		}

		// Token: 0x06018F64 RID: 102244
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkElevationFilter_SetScalarRange_18(HandleRef pThis, double _arg1, double _arg2);

		/// <summary>
		/// Specify range to map scalars into.  Default is [0, 1].
		/// </summary>
		// Token: 0x06018F65 RID: 102245 RVA: 0x0022CF43 File Offset: 0x0022B143
		public virtual void SetScalarRange(double _arg1, double _arg2)
		{
			vtkElevationFilter.vtkElevationFilter_SetScalarRange_18(base.GetCppThis(), _arg1, _arg2);
		}

		// Token: 0x06018F66 RID: 102246
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkElevationFilter_SetScalarRange_19(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Specify range to map scalars into.  Default is [0, 1].
		/// </summary>
		// Token: 0x06018F67 RID: 102247 RVA: 0x0022CF54 File Offset: 0x0022B154
		public void SetScalarRange(IntPtr _arg)
		{
			vtkElevationFilter.vtkElevationFilter_SetScalarRange_19(base.GetCppThis(), _arg);
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x04001B75 RID: 7029
		public new const string MRFullTypeName = "Kitware.VTK.vtkElevationFilter";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x04001B76 RID: 7030
		public new static readonly string MRClassNameKey = "class vtkElevationFilter";
	}
}
