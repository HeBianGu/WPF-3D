using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkGL2PSExporter
	/// </summary>
	/// <remarks>
	///    export a scene as a PostScript file using GL2PS.
	///
	/// vtkGL2PSExporter is a concrete subclass of vtkExporter that writes
	/// high quality vector PostScript (PS/EPS), PDF or SVG files by using
	/// GL2PS.  GL2PS can be obtained at: http://www.geuz.org/gl2ps/.  This
	/// can be very useful when one requires publication quality pictures.
	/// This class works best with simple 3D scenes and most 2D plots.
	/// Please note that GL2PS has its limitations since PostScript is not
	/// an ideal language to represent complex 3D scenes.  However, this
	/// class does allow one to write mixed vector/raster files by using
	/// the Write3DPropsAsRasterImage ivar.  Please do read the caveats
	/// section of this documentation.
	///
	/// By default vtkGL2PSExporter generates Encapsulated PostScript (EPS)
	/// output along with the text in portrait orientation with the
	/// background color of the window being drawn.  The generated output
	/// is also compressed using zlib. The various other options are set to
	/// sensible defaults.
	///
	/// The output file format (FileFormat) can be either PostScript (PS),
	/// Encapsulated PostScript (EPS), PDF, SVG or TeX.  The file extension
	/// is generated automatically depending on the FileFormat.  The
	/// default is EPS.  When TeX output is chosen, only the text strings
	/// in the plot are generated and put into a picture environment.  One
	/// can turn on and off the text when generating PS/EPS/PDF/SVG files
	/// by using the Text boolean variable.  By default the text is drawn.
	/// The background color of the renderwindow is drawn by default.  To
	/// make the background white instead use the DrawBackgroundOff
	/// function.  Landscape figures can be generated by using the
	/// LandscapeOn function.  Portrait orientation is used by default.
	/// Several of the GL2PS options can be set.  The names of the ivars
	/// for these options are similar to the ones that GL2PS provides.
	/// Compress, SimpleLineOffset, Silent, BestRoot, PS3Shading and
	/// OcclusionCull are similar to the options provided by GL2PS.  Please
	/// read the function documentation or the GL2PS documentation for more
	/// details.  The ivar Write3DPropsAsRasterImage allows one to generate
	/// mixed vector/raster images.  All the 3D props in the scene will be
	/// written as a raster image and all 2D actors will be written as
	/// vector graphic primitives.  This makes it possible to handle
	/// transparency and complex 3D scenes.  This ivar is set to Off by
	/// default.  Specific 3D props can be excluded from the rasterization
	/// process by adding them to the RasterExclusions ivar.  Props in this
	/// collection will be rendered as 2D vector primitives instead.
	///
	/// @warning
	/// By default (with Write3DPropsAsRasterImage set to Off) exporting
	/// complex 3D scenes can take a long while and result in huge output
	/// files.  Generating correct vector graphics output for scenes with
	/// transparency is almost impossible.  However, one can set
	/// Write3DPropsAsRasterImageOn and generate mixed vector/raster files.
	/// This should work fine with complex scenes along with transparent
	/// actors.
	///
	/// </remarks>
	/// <seealso>
	///
	/// vtkExporter
	///
	/// @par Thanks:
	/// Thanks to Goodwin Lawlor and Prabhu Ramachandran for this class.
	/// </seealso>
	// Token: 0x020001AD RID: 429
	public abstract class vtkGL2PSExporter : vtkExporter
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x060052F1 RID: 21233 RVA: 0x00078F6B File Offset: 0x0007716B
		static vtkGL2PSExporter()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkGL2PSExporter.MRClassNameKey, Type.GetType("Kitware.VTK.vtkGL2PSExporter"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x060052F2 RID: 21234 RVA: 0x00078F93 File Offset: 0x00077193
		public vtkGL2PSExporter(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x060052F3 RID: 21235
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkGL2PSExporter_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x060052F4 RID: 21236 RVA: 0x00078FA4 File Offset: 0x000771A4
		public new static vtkGL2PSExporter New()
		{
			vtkGL2PSExporter result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkGL2PSExporter.vtkGL2PSExporter_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkGL2PSExporter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x060052F5 RID: 21237 RVA: 0x00078FF8 File Offset: 0x000771F8
		public vtkGL2PSExporter() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkGL2PSExporter.vtkGL2PSExporter_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x060052F6 RID: 21238 RVA: 0x0007903C File Offset: 0x0007723C
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x060052F7 RID: 21239
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_BestRootOff_01(HandleRef pThis);

		/// <summary>
		/// Turn on/off the GL2PS_BEST_ROOT option.  When enabled the
		/// construction of the BSP tree is optimized by choosing the root
		/// primitives leading to the minimum number of splits.  Defaults to
		/// on.
		/// </summary>
		// Token: 0x060052F8 RID: 21240 RVA: 0x00079047 File Offset: 0x00077247
		public virtual void BestRootOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_BestRootOff_01(base.GetCppThis());
		}

		// Token: 0x060052F9 RID: 21241
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_BestRootOn_02(HandleRef pThis);

		/// <summary>
		/// Turn on/off the GL2PS_BEST_ROOT option.  When enabled the
		/// construction of the BSP tree is optimized by choosing the root
		/// primitives leading to the minimum number of splits.  Defaults to
		/// on.
		/// </summary>
		// Token: 0x060052FA RID: 21242 RVA: 0x00079056 File Offset: 0x00077256
		public virtual void BestRootOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_BestRootOn_02(base.GetCppThis());
		}

		// Token: 0x060052FB RID: 21243
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_CompressOff_03(HandleRef pThis);

		/// <summary>
		/// Turn on/off compression when generating PostScript or PDF
		/// output. By default compression is on.
		/// </summary>
		// Token: 0x060052FC RID: 21244 RVA: 0x00079065 File Offset: 0x00077265
		public virtual void CompressOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_CompressOff_03(base.GetCppThis());
		}

		// Token: 0x060052FD RID: 21245
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_CompressOn_04(HandleRef pThis);

		/// <summary>
		/// Turn on/off compression when generating PostScript or PDF
		/// output. By default compression is on.
		/// </summary>
		// Token: 0x060052FE RID: 21246 RVA: 0x00079074 File Offset: 0x00077274
		public virtual void CompressOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_CompressOn_04(base.GetCppThis());
		}

		// Token: 0x060052FF RID: 21247
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_DrawBackgroundOff_05(HandleRef pThis);

		/// <summary>
		/// Turn on/off drawing the background frame.  If off the background
		/// is treated as white.  By default the background is drawn.
		/// On the OpenGL2 backend, the background is always drawn.
		/// </summary>
		// Token: 0x06005300 RID: 21248 RVA: 0x00079083 File Offset: 0x00077283
		public virtual void DrawBackgroundOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_DrawBackgroundOff_05(base.GetCppThis());
		}

		// Token: 0x06005301 RID: 21249
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_DrawBackgroundOn_06(HandleRef pThis);

		/// <summary>
		/// Turn on/off drawing the background frame.  If off the background
		/// is treated as white.  By default the background is drawn.
		/// On the OpenGL2 backend, the background is always drawn.
		/// </summary>
		// Token: 0x06005302 RID: 21250 RVA: 0x00079092 File Offset: 0x00077292
		public virtual void DrawBackgroundOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_DrawBackgroundOn_06(base.GetCppThis());
		}

		// Token: 0x06005303 RID: 21251
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetBestRoot_07(HandleRef pThis);

		/// <summary>
		/// Turn on/off the GL2PS_BEST_ROOT option.  When enabled the
		/// construction of the BSP tree is optimized by choosing the root
		/// primitives leading to the minimum number of splits.  Defaults to
		/// on.
		/// </summary>
		// Token: 0x06005304 RID: 21252 RVA: 0x000790A4 File Offset: 0x000772A4
		public virtual int GetBestRoot()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetBestRoot_07(base.GetCppThis());
		}

		// Token: 0x06005305 RID: 21253
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetBufferSize_08(HandleRef pThis);

		/// <summary>
		/// The initial size of the GL2PS export buffer in bytes. The buffer is used to
		/// store the exported image prior to writing to file. If the buffer is too
		/// small, the exporter will enlarge the buffer and rerender until the export
		/// is successful. Setting a larger value here can reduce the time needed to
		/// export a complex scene by reducing the number of iterations required.
		/// The default initial size is 4 MB.
		/// </summary>
		// Token: 0x06005306 RID: 21254 RVA: 0x000790C4 File Offset: 0x000772C4
		public virtual int GetBufferSize()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetBufferSize_08(base.GetCppThis());
		}

		// Token: 0x06005307 RID: 21255
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetCompress_09(HandleRef pThis);

		/// <summary>
		/// Turn on/off compression when generating PostScript or PDF
		/// output. By default compression is on.
		/// </summary>
		// Token: 0x06005308 RID: 21256 RVA: 0x000790E4 File Offset: 0x000772E4
		public virtual int GetCompress()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetCompress_09(base.GetCppThis());
		}

		// Token: 0x06005309 RID: 21257
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetDrawBackground_10(HandleRef pThis);

		/// <summary>
		/// Turn on/off drawing the background frame.  If off the background
		/// is treated as white.  By default the background is drawn.
		/// On the OpenGL2 backend, the background is always drawn.
		/// </summary>
		// Token: 0x0600530A RID: 21258 RVA: 0x00079104 File Offset: 0x00077304
		public virtual int GetDrawBackground()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetDrawBackground_10(base.GetCppThis());
		}

		// Token: 0x0600530B RID: 21259
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetFileFormat_11(HandleRef pThis);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x0600530C RID: 21260 RVA: 0x00079124 File Offset: 0x00077324
		public virtual int GetFileFormat()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetFileFormat_11(base.GetCppThis());
		}

		// Token: 0x0600530D RID: 21261
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkGL2PSExporter_GetFileFormatAsString_12(HandleRef pThis);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x0600530E RID: 21262 RVA: 0x00079144 File Offset: 0x00077344
		public string GetFileFormatAsString()
		{
			string s = Marshal.PtrToStringAnsi(vtkGL2PSExporter.vtkGL2PSExporter_GetFileFormatAsString_12(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600530F RID: 21263
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetFileFormatMaxValue_13(HandleRef pThis);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x06005310 RID: 21264 RVA: 0x00079180 File Offset: 0x00077380
		public virtual int GetFileFormatMaxValue()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetFileFormatMaxValue_13(base.GetCppThis());
		}

		// Token: 0x06005311 RID: 21265
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetFileFormatMinValue_14(HandleRef pThis);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x06005312 RID: 21266 RVA: 0x000791A0 File Offset: 0x000773A0
		public virtual int GetFileFormatMinValue()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetFileFormatMinValue_14(base.GetCppThis());
		}

		// Token: 0x06005313 RID: 21267
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkGL2PSExporter_GetFilePrefix_15(HandleRef pThis);

		/// <summary>
		/// Specify the prefix of the files to write out. The resulting filenames
		/// will have .ps or .eps or .tex appended to them depending on the
		/// other options chosen.
		/// </summary>
		// Token: 0x06005314 RID: 21268 RVA: 0x000791C0 File Offset: 0x000773C0
		public virtual string GetFilePrefix()
		{
			string s = Marshal.PtrToStringAnsi(vtkGL2PSExporter.vtkGL2PSExporter_GetFilePrefix_15(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x06005315 RID: 21269
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetLandscape_16(HandleRef pThis);

		/// <summary>
		/// Turn on/off landscape orientation.  If off (default) the
		/// orientation is set to portrait.
		/// </summary>
		// Token: 0x06005316 RID: 21270 RVA: 0x000791FC File Offset: 0x000773FC
		public virtual int GetLandscape()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetLandscape_16(base.GetCppThis());
		}

		// Token: 0x06005317 RID: 21271
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern float vtkGL2PSExporter_GetLineWidthFactor_17(HandleRef pThis);

		/// <summary>
		/// Set the ratio between the OpenGL LineWidth and that used by GL2PS
		/// to generate PostScript.  Defaults to a ratio of 5/7.
		/// </summary>
		// Token: 0x06005318 RID: 21272 RVA: 0x0007921C File Offset: 0x0007741C
		public virtual float GetLineWidthFactor()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetLineWidthFactor_17(base.GetCppThis());
		}

		// Token: 0x06005319 RID: 21273
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkGL2PSExporter_GetNumberOfGenerationsFromBase_18(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600531A RID: 21274 RVA: 0x0007923C File Offset: 0x0007743C
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetNumberOfGenerationsFromBase_18(base.GetCppThis(), type);
		}

		// Token: 0x0600531B RID: 21275
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkGL2PSExporter_GetNumberOfGenerationsFromBaseType_19([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600531C RID: 21276 RVA: 0x0007925C File Offset: 0x0007745C
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetNumberOfGenerationsFromBaseType_19(type);
		}

		// Token: 0x0600531D RID: 21277
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetOcclusionCull_20(HandleRef pThis);

		/// <summary>
		/// Turn on/off culling of occluded polygons (GL2PS_OCCLUSION_CULL).
		/// When enabled hidden polygons are removed.  This reduces file size
		/// considerably.  Defaults to on.
		/// </summary>
		// Token: 0x0600531E RID: 21278 RVA: 0x00079278 File Offset: 0x00077478
		public virtual int GetOcclusionCull()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetOcclusionCull_20(base.GetCppThis());
		}

		// Token: 0x0600531F RID: 21279
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetPS3Shading_21(HandleRef pThis);

		/// <summary>
		/// Turn on/off the GL2PS_PS3_SHADING option.  When enabled the
		/// shfill PostScript level 3 operator is used.  Read the GL2PS
		/// documentation for more details.  Defaults to on.
		/// </summary>
		// Token: 0x06005320 RID: 21280 RVA: 0x00079298 File Offset: 0x00077498
		public virtual int GetPS3Shading()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetPS3Shading_21(base.GetCppThis());
		}

		// Token: 0x06005321 RID: 21281
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern float vtkGL2PSExporter_GetPointSizeFactor_22(HandleRef pThis);

		/// <summary>
		/// Set the ratio between the OpenGL PointSize and that used by GL2PS
		/// to generate PostScript.  Defaults to a ratio of 5/7.
		/// </summary>
		// Token: 0x06005322 RID: 21282 RVA: 0x000792B8 File Offset: 0x000774B8
		public virtual float GetPointSizeFactor()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetPointSizeFactor_22(base.GetCppThis());
		}

		// Token: 0x06005323 RID: 21283
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkGL2PSExporter_GetRasterExclusions_23(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Collection of props to exclude from rasterization. These will be
		/// rendered as 2D vector primitives in the output. This setting is ignored if
		/// Write3DPropsAsRasterImage is false. Behind the scenes, these props are
		/// treated as 2D props during the vector output generation.
		/// </summary>
		// Token: 0x06005324 RID: 21284 RVA: 0x000792D8 File Offset: 0x000774D8
		public virtual vtkPropCollection GetRasterExclusions()
		{
			vtkPropCollection vtkPropCollection = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkGL2PSExporter.vtkGL2PSExporter_GetRasterExclusions_23(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkPropCollection = (vtkPropCollection)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkPropCollection.Register(null);
				}
			}
			return vtkPropCollection;
		}

		// Token: 0x06005325 RID: 21285
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetSilent_24(HandleRef pThis);

		/// <summary>
		/// Turn on/off GL2PS messages sent to stderr (GL2PS_SILENT).  When
		/// enabled GL2PS messages are suppressed.  Defaults to off.
		/// </summary>
		// Token: 0x06005326 RID: 21286 RVA: 0x00079348 File Offset: 0x00077548
		public virtual int GetSilent()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetSilent_24(base.GetCppThis());
		}

		// Token: 0x06005327 RID: 21287
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetSimpleLineOffset_25(HandleRef pThis);

		/// <summary>
		/// Turn on/off the GL2PS_SIMPLE_LINE_OFFSET option.  When enabled a
		/// small offset is added in the z-buffer to all the lines in the
		/// plot.  This results in an anti-aliasing like solution.  Defaults to
		/// on.
		/// </summary>
		// Token: 0x06005328 RID: 21288 RVA: 0x00079368 File Offset: 0x00077568
		public virtual int GetSimpleLineOffset()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetSimpleLineOffset_25(base.GetCppThis());
		}

		// Token: 0x06005329 RID: 21289
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetSort_26(HandleRef pThis);

		/// <summary>
		/// Set the type of sorting algorithm to order primitives from
		/// back to front.  Successive algorithms are more memory
		/// intensive.  Simple is the default but BSP is perhaps the best.
		/// </summary>
		// Token: 0x0600532A RID: 21290 RVA: 0x00079388 File Offset: 0x00077588
		public virtual int GetSort()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetSort_26(base.GetCppThis());
		}

		// Token: 0x0600532B RID: 21291
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkGL2PSExporter_GetSortAsString_27(HandleRef pThis);

		/// <summary>
		/// Set the type of sorting algorithm to order primitives from
		/// back to front.  Successive algorithms are more memory
		/// intensive.  Simple is the default but BSP is perhaps the best.
		/// </summary>
		// Token: 0x0600532C RID: 21292 RVA: 0x000793A8 File Offset: 0x000775A8
		public string GetSortAsString()
		{
			string s = Marshal.PtrToStringAnsi(vtkGL2PSExporter.vtkGL2PSExporter_GetSortAsString_27(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x0600532D RID: 21293
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetSortMaxValue_28(HandleRef pThis);

		/// <summary>
		/// Set the type of sorting algorithm to order primitives from
		/// back to front.  Successive algorithms are more memory
		/// intensive.  Simple is the default but BSP is perhaps the best.
		/// </summary>
		// Token: 0x0600532E RID: 21294 RVA: 0x000793E4 File Offset: 0x000775E4
		public virtual int GetSortMaxValue()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetSortMaxValue_28(base.GetCppThis());
		}

		// Token: 0x0600532F RID: 21295
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetSortMinValue_29(HandleRef pThis);

		/// <summary>
		/// Set the type of sorting algorithm to order primitives from
		/// back to front.  Successive algorithms are more memory
		/// intensive.  Simple is the default but BSP is perhaps the best.
		/// </summary>
		// Token: 0x06005330 RID: 21296 RVA: 0x00079404 File Offset: 0x00077604
		public virtual int GetSortMinValue()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetSortMinValue_29(base.GetCppThis());
		}

		// Token: 0x06005331 RID: 21297
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetText_30(HandleRef pThis);

		/// <summary>
		/// Turn on/off drawing the text.  If on (default) the text is drawn.
		/// If the FileFormat is set to TeX output then a LaTeX picture is
		/// generated with the text strings.  If off text output is
		/// suppressed.
		/// </summary>
		// Token: 0x06005332 RID: 21298 RVA: 0x00079424 File Offset: 0x00077624
		public virtual int GetText()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetText_30(base.GetCppThis());
		}

		// Token: 0x06005333 RID: 21299
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern byte vtkGL2PSExporter_GetTextAsPath_31(HandleRef pThis);

		/// <summary>
		/// Turn on/off exporting text as path information, rather than character data.
		/// This is useful for the PDF backend, which does not properly
		/// support aligned text otherwise. Defaults to Off.
		/// </summary>
		// Token: 0x06005334 RID: 21300 RVA: 0x00079444 File Offset: 0x00077644
		public virtual bool GetTextAsPath()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetTextAsPath_31(base.GetCppThis()) != 0;
		}

		// Token: 0x06005335 RID: 21301
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkGL2PSExporter_GetTitle_32(HandleRef pThis);

		/// <summary>
		/// Set the title for the output, if supported. If nullptr, "VTK GL2PS Export" is
		/// used.
		/// </summary>
		// Token: 0x06005336 RID: 21302 RVA: 0x0007946C File Offset: 0x0007766C
		public virtual string GetTitle()
		{
			string s = Marshal.PtrToStringAnsi(vtkGL2PSExporter.vtkGL2PSExporter_GetTitle_32(base.GetCppThis()));
			return Encoding.UTF8.GetString(Encoding.Default.GetBytes(s));
		}

		// Token: 0x06005337 RID: 21303
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_GetWrite3DPropsAsRasterImage_33(HandleRef pThis);

		/// <summary>
		/// Turn on/off writing 3D props as raster images.  2D props are
		/// rendered using vector graphics primitives.  If you have hi-res
		/// actors and are using transparency you probably need to turn this
		/// on.  Defaults to Off.
		/// This option has no effect when the OpenGL2 backend is in use, as all
		/// 3D props (excluding vtkTextActor3D) are rasterized into the background.
		/// </summary>
		// Token: 0x06005338 RID: 21304 RVA: 0x000794A8 File Offset: 0x000776A8
		public virtual int GetWrite3DPropsAsRasterImage()
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_GetWrite3DPropsAsRasterImage_33(base.GetCppThis());
		}

		// Token: 0x06005339 RID: 21305
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_IsA_34(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600533A RID: 21306 RVA: 0x000794C8 File Offset: 0x000776C8
		public override int IsA(string type)
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_IsA_34(base.GetCppThis(), type);
		}

		// Token: 0x0600533B RID: 21307
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkGL2PSExporter_IsTypeOf_35([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600533C RID: 21308 RVA: 0x000794E8 File Offset: 0x000776E8
		public new static int IsTypeOf(string type)
		{
			return vtkGL2PSExporter.vtkGL2PSExporter_IsTypeOf_35(type);
		}

		// Token: 0x0600533D RID: 21309
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_LandscapeOff_36(HandleRef pThis);

		/// <summary>
		/// Turn on/off landscape orientation.  If off (default) the
		/// orientation is set to portrait.
		/// </summary>
		// Token: 0x0600533E RID: 21310 RVA: 0x00079502 File Offset: 0x00077702
		public virtual void LandscapeOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_LandscapeOff_36(base.GetCppThis());
		}

		// Token: 0x0600533F RID: 21311
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_LandscapeOn_37(HandleRef pThis);

		/// <summary>
		/// Turn on/off landscape orientation.  If off (default) the
		/// orientation is set to portrait.
		/// </summary>
		// Token: 0x06005340 RID: 21312 RVA: 0x00079511 File Offset: 0x00077711
		public virtual void LandscapeOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_LandscapeOn_37(base.GetCppThis());
		}

		// Token: 0x06005341 RID: 21313
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkGL2PSExporter_NewInstance_39(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06005342 RID: 21314 RVA: 0x00079520 File Offset: 0x00077720
		public new vtkGL2PSExporter NewInstance()
		{
			vtkGL2PSExporter result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkGL2PSExporter.vtkGL2PSExporter_NewInstance_39(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkGL2PSExporter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x06005343 RID: 21315
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_OcclusionCullOff_40(HandleRef pThis);

		/// <summary>
		/// Turn on/off culling of occluded polygons (GL2PS_OCCLUSION_CULL).
		/// When enabled hidden polygons are removed.  This reduces file size
		/// considerably.  Defaults to on.
		/// </summary>
		// Token: 0x06005344 RID: 21316 RVA: 0x0007957A File Offset: 0x0007777A
		public virtual void OcclusionCullOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_OcclusionCullOff_40(base.GetCppThis());
		}

		// Token: 0x06005345 RID: 21317
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_OcclusionCullOn_41(HandleRef pThis);

		/// <summary>
		/// Turn on/off culling of occluded polygons (GL2PS_OCCLUSION_CULL).
		/// When enabled hidden polygons are removed.  This reduces file size
		/// considerably.  Defaults to on.
		/// </summary>
		// Token: 0x06005346 RID: 21318 RVA: 0x00079589 File Offset: 0x00077789
		public virtual void OcclusionCullOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_OcclusionCullOn_41(base.GetCppThis());
		}

		// Token: 0x06005347 RID: 21319
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_PS3ShadingOff_42(HandleRef pThis);

		/// <summary>
		/// Turn on/off the GL2PS_PS3_SHADING option.  When enabled the
		/// shfill PostScript level 3 operator is used.  Read the GL2PS
		/// documentation for more details.  Defaults to on.
		/// </summary>
		// Token: 0x06005348 RID: 21320 RVA: 0x00079598 File Offset: 0x00077798
		public virtual void PS3ShadingOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_PS3ShadingOff_42(base.GetCppThis());
		}

		// Token: 0x06005349 RID: 21321
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_PS3ShadingOn_43(HandleRef pThis);

		/// <summary>
		/// Turn on/off the GL2PS_PS3_SHADING option.  When enabled the
		/// shfill PostScript level 3 operator is used.  Read the GL2PS
		/// documentation for more details.  Defaults to on.
		/// </summary>
		// Token: 0x0600534A RID: 21322 RVA: 0x000795A7 File Offset: 0x000777A7
		public virtual void PS3ShadingOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_PS3ShadingOn_43(base.GetCppThis());
		}

		// Token: 0x0600534B RID: 21323
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkGL2PSExporter_SafeDownCast_44(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600534C RID: 21324 RVA: 0x000795B8 File Offset: 0x000777B8
		public new static vtkGL2PSExporter SafeDownCast(vtkObjectBase o)
		{
			vtkGL2PSExporter vtkGL2PSExporter = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkGL2PSExporter.vtkGL2PSExporter_SafeDownCast_44((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkGL2PSExporter = (vtkGL2PSExporter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkGL2PSExporter.Register(null);
				}
			}
			return vtkGL2PSExporter;
		}

		// Token: 0x0600534D RID: 21325
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetBestRoot_45(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off the GL2PS_BEST_ROOT option.  When enabled the
		/// construction of the BSP tree is optimized by choosing the root
		/// primitives leading to the minimum number of splits.  Defaults to
		/// on.
		/// </summary>
		// Token: 0x0600534E RID: 21326 RVA: 0x00079637 File Offset: 0x00077837
		public virtual void SetBestRoot(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetBestRoot_45(base.GetCppThis(), _arg);
		}

		// Token: 0x0600534F RID: 21327
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetBufferSize_46(HandleRef pThis, int _arg);

		/// <summary>
		/// The initial size of the GL2PS export buffer in bytes. The buffer is used to
		/// store the exported image prior to writing to file. If the buffer is too
		/// small, the exporter will enlarge the buffer and rerender until the export
		/// is successful. Setting a larger value here can reduce the time needed to
		/// export a complex scene by reducing the number of iterations required.
		/// The default initial size is 4 MB.
		/// </summary>
		// Token: 0x06005350 RID: 21328 RVA: 0x00079647 File Offset: 0x00077847
		public virtual void SetBufferSize(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetBufferSize_46(base.GetCppThis(), _arg);
		}

		// Token: 0x06005351 RID: 21329
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetCompress_47(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off compression when generating PostScript or PDF
		/// output. By default compression is on.
		/// </summary>
		// Token: 0x06005352 RID: 21330 RVA: 0x00079657 File Offset: 0x00077857
		public virtual void SetCompress(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetCompress_47(base.GetCppThis(), _arg);
		}

		// Token: 0x06005353 RID: 21331
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetDrawBackground_48(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off drawing the background frame.  If off the background
		/// is treated as white.  By default the background is drawn.
		/// On the OpenGL2 backend, the background is always drawn.
		/// </summary>
		// Token: 0x06005354 RID: 21332 RVA: 0x00079667 File Offset: 0x00077867
		public virtual void SetDrawBackground(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetDrawBackground_48(base.GetCppThis(), _arg);
		}

		// Token: 0x06005355 RID: 21333
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetFileFormat_49(HandleRef pThis, int _arg);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x06005356 RID: 21334 RVA: 0x00079677 File Offset: 0x00077877
		public virtual void SetFileFormat(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetFileFormat_49(base.GetCppThis(), _arg);
		}

		// Token: 0x06005357 RID: 21335
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetFileFormatToEPS_50(HandleRef pThis);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x06005358 RID: 21336 RVA: 0x00079687 File Offset: 0x00077887
		public void SetFileFormatToEPS()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetFileFormatToEPS_50(base.GetCppThis());
		}

		// Token: 0x06005359 RID: 21337
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetFileFormatToPDF_51(HandleRef pThis);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x0600535A RID: 21338 RVA: 0x00079696 File Offset: 0x00077896
		public void SetFileFormatToPDF()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetFileFormatToPDF_51(base.GetCppThis());
		}

		// Token: 0x0600535B RID: 21339
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetFileFormatToPS_52(HandleRef pThis);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x0600535C RID: 21340 RVA: 0x000796A5 File Offset: 0x000778A5
		public void SetFileFormatToPS()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetFileFormatToPS_52(base.GetCppThis());
		}

		// Token: 0x0600535D RID: 21341
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetFileFormatToSVG_53(HandleRef pThis);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x0600535E RID: 21342 RVA: 0x000796B4 File Offset: 0x000778B4
		public void SetFileFormatToSVG()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetFileFormatToSVG_53(base.GetCppThis());
		}

		// Token: 0x0600535F RID: 21343
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetFileFormatToTeX_54(HandleRef pThis);

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x06005360 RID: 21344 RVA: 0x000796C3 File Offset: 0x000778C3
		public void SetFileFormatToTeX()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetFileFormatToTeX_54(base.GetCppThis());
		}

		// Token: 0x06005361 RID: 21345
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetFilePrefix_55(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string _arg);

		/// <summary>
		/// Specify the prefix of the files to write out. The resulting filenames
		/// will have .ps or .eps or .tex appended to them depending on the
		/// other options chosen.
		/// </summary>
		// Token: 0x06005362 RID: 21346 RVA: 0x000796D2 File Offset: 0x000778D2
		public virtual void SetFilePrefix(string _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetFilePrefix_55(base.GetCppThis(), _arg);
		}

		// Token: 0x06005363 RID: 21347
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetLandscape_56(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off landscape orientation.  If off (default) the
		/// orientation is set to portrait.
		/// </summary>
		// Token: 0x06005364 RID: 21348 RVA: 0x000796E2 File Offset: 0x000778E2
		public virtual void SetLandscape(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetLandscape_56(base.GetCppThis(), _arg);
		}

		// Token: 0x06005365 RID: 21349
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetLineWidthFactor_57(HandleRef pThis, float _arg);

		/// <summary>
		/// Set the ratio between the OpenGL LineWidth and that used by GL2PS
		/// to generate PostScript.  Defaults to a ratio of 5/7.
		/// </summary>
		// Token: 0x06005366 RID: 21350 RVA: 0x000796F2 File Offset: 0x000778F2
		public virtual void SetLineWidthFactor(float _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetLineWidthFactor_57(base.GetCppThis(), _arg);
		}

		// Token: 0x06005367 RID: 21351
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetOcclusionCull_58(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off culling of occluded polygons (GL2PS_OCCLUSION_CULL).
		/// When enabled hidden polygons are removed.  This reduces file size
		/// considerably.  Defaults to on.
		/// </summary>
		// Token: 0x06005368 RID: 21352 RVA: 0x00079702 File Offset: 0x00077902
		public virtual void SetOcclusionCull(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetOcclusionCull_58(base.GetCppThis(), _arg);
		}

		// Token: 0x06005369 RID: 21353
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetPS3Shading_59(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off the GL2PS_PS3_SHADING option.  When enabled the
		/// shfill PostScript level 3 operator is used.  Read the GL2PS
		/// documentation for more details.  Defaults to on.
		/// </summary>
		// Token: 0x0600536A RID: 21354 RVA: 0x00079712 File Offset: 0x00077912
		public virtual void SetPS3Shading(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetPS3Shading_59(base.GetCppThis(), _arg);
		}

		// Token: 0x0600536B RID: 21355
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetPointSizeFactor_60(HandleRef pThis, float _arg);

		/// <summary>
		/// Set the ratio between the OpenGL PointSize and that used by GL2PS
		/// to generate PostScript.  Defaults to a ratio of 5/7.
		/// </summary>
		// Token: 0x0600536C RID: 21356 RVA: 0x00079722 File Offset: 0x00077922
		public virtual void SetPointSizeFactor(float _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetPointSizeFactor_60(base.GetCppThis(), _arg);
		}

		// Token: 0x0600536D RID: 21357
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetRasterExclusions_61(HandleRef pThis, HandleRef arg0);

		/// <summary>
		/// Collection of props to exclude from rasterization. These will be
		/// rendered as 2D vector primitives in the output. This setting is ignored if
		/// Write3DPropsAsRasterImage is false. Behind the scenes, these props are
		/// treated as 2D props during the vector output generation.
		/// </summary>
		// Token: 0x0600536E RID: 21358 RVA: 0x00079734 File Offset: 0x00077934
		public void SetRasterExclusions(vtkPropCollection arg0)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetRasterExclusions_61(base.GetCppThis(), (arg0 == null) ? default(HandleRef) : arg0.GetCppThis());
		}

		// Token: 0x0600536F RID: 21359
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetSilent_62(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off GL2PS messages sent to stderr (GL2PS_SILENT).  When
		/// enabled GL2PS messages are suppressed.  Defaults to off.
		/// </summary>
		// Token: 0x06005370 RID: 21360 RVA: 0x00079763 File Offset: 0x00077963
		public virtual void SetSilent(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetSilent_62(base.GetCppThis(), _arg);
		}

		// Token: 0x06005371 RID: 21361
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetSimpleLineOffset_63(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off the GL2PS_SIMPLE_LINE_OFFSET option.  When enabled a
		/// small offset is added in the z-buffer to all the lines in the
		/// plot.  This results in an anti-aliasing like solution.  Defaults to
		/// on.
		/// </summary>
		// Token: 0x06005372 RID: 21362 RVA: 0x00079773 File Offset: 0x00077973
		public virtual void SetSimpleLineOffset(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetSimpleLineOffset_63(base.GetCppThis(), _arg);
		}

		// Token: 0x06005373 RID: 21363
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetSort_64(HandleRef pThis, int _arg);

		/// <summary>
		/// Set the type of sorting algorithm to order primitives from
		/// back to front.  Successive algorithms are more memory
		/// intensive.  Simple is the default but BSP is perhaps the best.
		/// </summary>
		// Token: 0x06005374 RID: 21364 RVA: 0x00079783 File Offset: 0x00077983
		public virtual void SetSort(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetSort_64(base.GetCppThis(), _arg);
		}

		// Token: 0x06005375 RID: 21365
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetSortToBSP_65(HandleRef pThis);

		/// <summary>
		/// Set the type of sorting algorithm to order primitives from
		/// back to front.  Successive algorithms are more memory
		/// intensive.  Simple is the default but BSP is perhaps the best.
		/// </summary>
		// Token: 0x06005376 RID: 21366 RVA: 0x00079793 File Offset: 0x00077993
		public void SetSortToBSP()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetSortToBSP_65(base.GetCppThis());
		}

		// Token: 0x06005377 RID: 21367
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetSortToOff_66(HandleRef pThis);

		/// <summary>
		/// Set the type of sorting algorithm to order primitives from
		/// back to front.  Successive algorithms are more memory
		/// intensive.  Simple is the default but BSP is perhaps the best.
		/// </summary>
		// Token: 0x06005378 RID: 21368 RVA: 0x000797A2 File Offset: 0x000779A2
		public void SetSortToOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetSortToOff_66(base.GetCppThis());
		}

		// Token: 0x06005379 RID: 21369
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetSortToSimple_67(HandleRef pThis);

		/// <summary>
		/// Set the type of sorting algorithm to order primitives from
		/// back to front.  Successive algorithms are more memory
		/// intensive.  Simple is the default but BSP is perhaps the best.
		/// </summary>
		// Token: 0x0600537A RID: 21370 RVA: 0x000797B1 File Offset: 0x000779B1
		public void SetSortToSimple()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetSortToSimple_67(base.GetCppThis());
		}

		// Token: 0x0600537B RID: 21371
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetText_68(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off drawing the text.  If on (default) the text is drawn.
		/// If the FileFormat is set to TeX output then a LaTeX picture is
		/// generated with the text strings.  If off text output is
		/// suppressed.
		/// </summary>
		// Token: 0x0600537C RID: 21372 RVA: 0x000797C0 File Offset: 0x000779C0
		public virtual void SetText(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetText_68(base.GetCppThis(), _arg);
		}

		// Token: 0x0600537D RID: 21373
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetTextAsPath_69(HandleRef pThis, byte _arg);

		/// <summary>
		/// Turn on/off exporting text as path information, rather than character data.
		/// This is useful for the PDF backend, which does not properly
		/// support aligned text otherwise. Defaults to Off.
		/// </summary>
		// Token: 0x0600537E RID: 21374 RVA: 0x000797D0 File Offset: 0x000779D0
		public virtual void SetTextAsPath(bool _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetTextAsPath_69(base.GetCppThis(), _arg ? (byte)1 : (byte)0);
		}

		// Token: 0x0600537F RID: 21375
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetTitle_70(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string _arg);

		/// <summary>
		/// Set the title for the output, if supported. If nullptr, "VTK GL2PS Export" is
		/// used.
		/// </summary>
		// Token: 0x06005380 RID: 21376 RVA: 0x000797E8 File Offset: 0x000779E8
		public virtual void SetTitle(string _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetTitle_70(base.GetCppThis(), _arg);
		}

		// Token: 0x06005381 RID: 21377
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SetWrite3DPropsAsRasterImage_71(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off writing 3D props as raster images.  2D props are
		/// rendered using vector graphics primitives.  If you have hi-res
		/// actors and are using transparency you probably need to turn this
		/// on.  Defaults to Off.
		/// This option has no effect when the OpenGL2 backend is in use, as all
		/// 3D props (excluding vtkTextActor3D) are rasterized into the background.
		/// </summary>
		// Token: 0x06005382 RID: 21378 RVA: 0x000797F8 File Offset: 0x000779F8
		public virtual void SetWrite3DPropsAsRasterImage(int _arg)
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SetWrite3DPropsAsRasterImage_71(base.GetCppThis(), _arg);
		}

		// Token: 0x06005383 RID: 21379
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SilentOff_72(HandleRef pThis);

		/// <summary>
		/// Turn on/off GL2PS messages sent to stderr (GL2PS_SILENT).  When
		/// enabled GL2PS messages are suppressed.  Defaults to off.
		/// </summary>
		// Token: 0x06005384 RID: 21380 RVA: 0x00079808 File Offset: 0x00077A08
		public virtual void SilentOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SilentOff_72(base.GetCppThis());
		}

		// Token: 0x06005385 RID: 21381
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SilentOn_73(HandleRef pThis);

		/// <summary>
		/// Turn on/off GL2PS messages sent to stderr (GL2PS_SILENT).  When
		/// enabled GL2PS messages are suppressed.  Defaults to off.
		/// </summary>
		// Token: 0x06005386 RID: 21382 RVA: 0x00079817 File Offset: 0x00077A17
		public virtual void SilentOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SilentOn_73(base.GetCppThis());
		}

		// Token: 0x06005387 RID: 21383
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SimpleLineOffsetOff_74(HandleRef pThis);

		/// <summary>
		/// Turn on/off the GL2PS_SIMPLE_LINE_OFFSET option.  When enabled a
		/// small offset is added in the z-buffer to all the lines in the
		/// plot.  This results in an anti-aliasing like solution.  Defaults to
		/// on.
		/// </summary>
		// Token: 0x06005388 RID: 21384 RVA: 0x00079826 File Offset: 0x00077A26
		public virtual void SimpleLineOffsetOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SimpleLineOffsetOff_74(base.GetCppThis());
		}

		// Token: 0x06005389 RID: 21385
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_SimpleLineOffsetOn_75(HandleRef pThis);

		/// <summary>
		/// Turn on/off the GL2PS_SIMPLE_LINE_OFFSET option.  When enabled a
		/// small offset is added in the z-buffer to all the lines in the
		/// plot.  This results in an anti-aliasing like solution.  Defaults to
		/// on.
		/// </summary>
		// Token: 0x0600538A RID: 21386 RVA: 0x00079835 File Offset: 0x00077A35
		public virtual void SimpleLineOffsetOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_SimpleLineOffsetOn_75(base.GetCppThis());
		}

		// Token: 0x0600538B RID: 21387
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_TextAsPathOff_76(HandleRef pThis);

		/// <summary>
		/// Turn on/off exporting text as path information, rather than character data.
		/// This is useful for the PDF backend, which does not properly
		/// support aligned text otherwise. Defaults to Off.
		/// </summary>
		// Token: 0x0600538C RID: 21388 RVA: 0x00079844 File Offset: 0x00077A44
		public virtual void TextAsPathOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_TextAsPathOff_76(base.GetCppThis());
		}

		// Token: 0x0600538D RID: 21389
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_TextAsPathOn_77(HandleRef pThis);

		/// <summary>
		/// Turn on/off exporting text as path information, rather than character data.
		/// This is useful for the PDF backend, which does not properly
		/// support aligned text otherwise. Defaults to Off.
		/// </summary>
		// Token: 0x0600538E RID: 21390 RVA: 0x00079853 File Offset: 0x00077A53
		public virtual void TextAsPathOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_TextAsPathOn_77(base.GetCppThis());
		}

		// Token: 0x0600538F RID: 21391
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_TextOff_78(HandleRef pThis);

		/// <summary>
		/// Turn on/off drawing the text.  If on (default) the text is drawn.
		/// If the FileFormat is set to TeX output then a LaTeX picture is
		/// generated with the text strings.  If off text output is
		/// suppressed.
		/// </summary>
		// Token: 0x06005390 RID: 21392 RVA: 0x00079862 File Offset: 0x00077A62
		public virtual void TextOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_TextOff_78(base.GetCppThis());
		}

		// Token: 0x06005391 RID: 21393
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_TextOn_79(HandleRef pThis);

		/// <summary>
		/// Turn on/off drawing the text.  If on (default) the text is drawn.
		/// If the FileFormat is set to TeX output then a LaTeX picture is
		/// generated with the text strings.  If off text output is
		/// suppressed.
		/// </summary>
		// Token: 0x06005392 RID: 21394 RVA: 0x00079871 File Offset: 0x00077A71
		public virtual void TextOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_TextOn_79(base.GetCppThis());
		}

		// Token: 0x06005393 RID: 21395
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_UsePainterSettings_80(HandleRef pThis);

		/// <summary>
		/// Configure the exporter to expect a painter-ordered 2D rendering, that is,
		/// a rendering at a fixed depth where primitives are drawn from the bottom up.
		/// This disables sorting, which will break the painter ordering, and turns off
		/// the simple line offset, which can cause line primitives to be drawn on top
		/// of all other geometry.
		/// </summary>
		// Token: 0x06005394 RID: 21396 RVA: 0x00079880 File Offset: 0x00077A80
		public void UsePainterSettings()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_UsePainterSettings_80(base.GetCppThis());
		}

		// Token: 0x06005395 RID: 21397
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_Write3DPropsAsRasterImageOff_81(HandleRef pThis);

		/// <summary>
		/// Turn on/off writing 3D props as raster images.  2D props are
		/// rendered using vector graphics primitives.  If you have hi-res
		/// actors and are using transparency you probably need to turn this
		/// on.  Defaults to Off.
		/// This option has no effect when the OpenGL2 backend is in use, as all
		/// 3D props (excluding vtkTextActor3D) are rasterized into the background.
		/// </summary>
		// Token: 0x06005396 RID: 21398 RVA: 0x0007988F File Offset: 0x00077A8F
		public virtual void Write3DPropsAsRasterImageOff()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_Write3DPropsAsRasterImageOff_81(base.GetCppThis());
		}

		// Token: 0x06005397 RID: 21399
		[DllImport("Kitware.VTK.IOExportGL2PS.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkGL2PSExporter_Write3DPropsAsRasterImageOn_82(HandleRef pThis);

		/// <summary>
		/// Turn on/off writing 3D props as raster images.  2D props are
		/// rendered using vector graphics primitives.  If you have hi-res
		/// actors and are using transparency you probably need to turn this
		/// on.  Defaults to Off.
		/// This option has no effect when the OpenGL2 backend is in use, as all
		/// 3D props (excluding vtkTextActor3D) are rasterized into the background.
		/// </summary>
		// Token: 0x06005398 RID: 21400 RVA: 0x0007989E File Offset: 0x00077A9E
		public virtual void Write3DPropsAsRasterImageOn()
		{
			vtkGL2PSExporter.vtkGL2PSExporter_Write3DPropsAsRasterImageOn_82(base.GetCppThis());
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x040007BF RID: 1983
		public new const string MRFullTypeName = "Kitware.VTK.vtkGL2PSExporter";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x040007C0 RID: 1984
		public new static readonly string MRClassNameKey = "class vtkGL2PSExporter";

		/// <summary>
		/// Set the title for the output, if supported. If nullptr, "VTK GL2PS Export" is
		/// used.
		/// </summary>
		// Token: 0x020001AE RID: 430
		public enum OutputFormat
		{
			/// <summary>enum member</summary>
			// Token: 0x040007C2 RID: 1986
			EPS_FILE = 1,
			/// <summary>enum member</summary>
			// Token: 0x040007C3 RID: 1987
			PDF_FILE,
			/// <summary>enum member</summary>
			// Token: 0x040007C4 RID: 1988
			PS_FILE = 0,
			/// <summary>enum member</summary>
			// Token: 0x040007C5 RID: 1989
			SVG_FILE = 4,
			/// <summary>enum member</summary>
			// Token: 0x040007C6 RID: 1990
			TEX_FILE = 3
		}

		/// <summary>
		/// Specify the format of file to write out.  This can be one of:
		/// PS_FILE, EPS_FILE, PDF_FILE, TEX_FILE.  Defaults to EPS_FILE.
		/// Depending on the option chosen it generates the appropriate file
		/// (with correct extension) when the Write function is called.
		/// </summary>
		// Token: 0x020001AF RID: 431
		public enum SortScheme
		{
			/// <summary>enum member</summary>
			// Token: 0x040007C8 RID: 1992
			BSP_SORT = 2,
			/// <summary>enum member</summary>
			// Token: 0x040007C9 RID: 1993
			NO_SORT = 0,
			/// <summary>enum member</summary>
			// Token: 0x040007CA RID: 1994
			SIMPLE_SORT
		}
	}
}
