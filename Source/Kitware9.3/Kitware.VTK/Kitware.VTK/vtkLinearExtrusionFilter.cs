using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkLinearExtrusionFilter
	/// </summary>
	/// <remarks>
	///    sweep polygonal data creating a "skirt" from free edges and lines, and lines from
	/// vertices
	///
	/// vtkLinearExtrusionFilter is a modeling filter. It takes polygonal data as
	/// input and generates polygonal data on output. The input dataset is swept
	/// according to some extrusion function and creates new polygonal primitives.
	/// These primitives form a "skirt" or swept surface. For example, sweeping a
	/// line results in a quadrilateral, and sweeping a triangle creates a "wedge".
	///
	/// There are a number of control parameters for this filter. You can
	/// control whether the sweep of a 2D object (i.e., polygon or triangle strip)
	/// is capped with the generating geometry via the "Capping" ivar. Also, you
	/// can extrude in the direction of a user specified vector, towards a point,
	/// or in the direction of vertex normals (normals must be provided - use
	/// vtkPolyDataNormals if necessary). The amount of extrusion is controlled by
	/// the "ScaleFactor" instance variable.
	///
	/// The skirt is generated by locating certain topological features. Free
	/// edges (edges of polygons or triangle strips only used by one polygon or
	/// triangle strips) generate surfaces. This is true also of lines or
	/// polylines. Vertices generate lines.
	///
	/// This filter can be used to create 3D fonts, 3D irregular bar charts,
	/// or to model 2 1/2D objects like punched plates. It also can be used to
	/// create solid objects from 2D polygonal meshes.
	///
	/// @warning
	/// Some polygonal objects have no free edges (e.g., sphere). When swept,
	/// this will result in two separate surfaces if capping is on, or no surface
	/// if capping is off.
	///
	/// </remarks>
	/// <seealso>
	///
	/// vtkRotationalExtrusionFilter
	/// </seealso>
	// Token: 0x0200051A RID: 1306
	public class vtkLinearExtrusionFilter : vtkPolyDataAlgorithm
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x0600EA10 RID: 59920 RVA: 0x00146789 File Offset: 0x00144989
		static vtkLinearExtrusionFilter()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkLinearExtrusionFilter.MRClassNameKey, Type.GetType("Kitware.VTK.vtkLinearExtrusionFilter"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x0600EA11 RID: 59921 RVA: 0x001467B1 File Offset: 0x001449B1
		public vtkLinearExtrusionFilter(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x0600EA12 RID: 59922
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLinearExtrusionFilter_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Create object with normal extrusion type, capping on, scale factor=1.0,
		/// vector (0,0,1), and extrusion point (0,0,0).
		/// </summary>
		// Token: 0x0600EA13 RID: 59923 RVA: 0x001467C0 File Offset: 0x001449C0
		public new static vtkLinearExtrusionFilter New()
		{
			vtkLinearExtrusionFilter result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkLinearExtrusionFilter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		/// Create object with normal extrusion type, capping on, scale factor=1.0,
		/// vector (0,0,1), and extrusion point (0,0,0).
		/// </summary>
		// Token: 0x0600EA14 RID: 59924 RVA: 0x00146814 File Offset: 0x00144A14
		public vtkLinearExtrusionFilter() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x0600EA15 RID: 59925 RVA: 0x00146858 File Offset: 0x00144A58
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x0600EA16 RID: 59926
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_CappingOff_01(HandleRef pThis);

		/// <summary>
		/// Turn on/off the capping of the skirt.
		/// </summary>
		// Token: 0x0600EA17 RID: 59927 RVA: 0x00146863 File Offset: 0x00144A63
		public virtual void CappingOff()
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_CappingOff_01(base.GetCppThis());
		}

		// Token: 0x0600EA18 RID: 59928
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_CappingOn_02(HandleRef pThis);

		/// <summary>
		/// Turn on/off the capping of the skirt.
		/// </summary>
		// Token: 0x0600EA19 RID: 59929 RVA: 0x00146872 File Offset: 0x00144A72
		public virtual void CappingOn()
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_CappingOn_02(base.GetCppThis());
		}

		// Token: 0x0600EA1A RID: 59930
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLinearExtrusionFilter_GetCapping_03(HandleRef pThis);

		/// <summary>
		/// Turn on/off the capping of the skirt.
		/// </summary>
		// Token: 0x0600EA1B RID: 59931 RVA: 0x00146884 File Offset: 0x00144A84
		public virtual int GetCapping()
		{
			return vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetCapping_03(base.GetCppThis());
		}

		// Token: 0x0600EA1C RID: 59932
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLinearExtrusionFilter_GetExtrusionPoint_04(HandleRef pThis);

		/// <summary>
		/// Set/Get extrusion point. Only needs to be set if PointExtrusion is
		/// turned on. This is the point towards which extrusion occurs.
		/// </summary>
		// Token: 0x0600EA1D RID: 59933 RVA: 0x001468A4 File Offset: 0x00144AA4
		public virtual double[] GetExtrusionPoint()
		{
			IntPtr intPtr = vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetExtrusionPoint_04(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[3];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600EA1E RID: 59934
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_GetExtrusionPoint_05(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Set/Get extrusion point. Only needs to be set if PointExtrusion is
		/// turned on. This is the point towards which extrusion occurs.
		/// </summary>
		// Token: 0x0600EA1F RID: 59935 RVA: 0x001468EC File Offset: 0x00144AEC
		public virtual void GetExtrusionPoint(IntPtr data)
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetExtrusionPoint_05(base.GetCppThis(), data);
		}

		// Token: 0x0600EA20 RID: 59936
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLinearExtrusionFilter_GetExtrusionType_06(HandleRef pThis);

		/// <summary>
		/// Set/Get the type of extrusion.
		/// </summary>
		// Token: 0x0600EA21 RID: 59937 RVA: 0x001468FC File Offset: 0x00144AFC
		public virtual int GetExtrusionType()
		{
			return vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetExtrusionType_06(base.GetCppThis());
		}

		// Token: 0x0600EA22 RID: 59938
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLinearExtrusionFilter_GetExtrusionTypeMaxValue_07(HandleRef pThis);

		/// <summary>
		/// Set/Get the type of extrusion.
		/// </summary>
		// Token: 0x0600EA23 RID: 59939 RVA: 0x0014691C File Offset: 0x00144B1C
		public virtual int GetExtrusionTypeMaxValue()
		{
			return vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetExtrusionTypeMaxValue_07(base.GetCppThis());
		}

		// Token: 0x0600EA24 RID: 59940
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLinearExtrusionFilter_GetExtrusionTypeMinValue_08(HandleRef pThis);

		/// <summary>
		/// Set/Get the type of extrusion.
		/// </summary>
		// Token: 0x0600EA25 RID: 59941 RVA: 0x0014693C File Offset: 0x00144B3C
		public virtual int GetExtrusionTypeMinValue()
		{
			return vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetExtrusionTypeMinValue_08(base.GetCppThis());
		}

		// Token: 0x0600EA26 RID: 59942
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkLinearExtrusionFilter_GetNumberOfGenerationsFromBase_09(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600EA27 RID: 59943 RVA: 0x0014695C File Offset: 0x00144B5C
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetNumberOfGenerationsFromBase_09(base.GetCppThis(), type);
		}

		// Token: 0x0600EA28 RID: 59944
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkLinearExtrusionFilter_GetNumberOfGenerationsFromBaseType_10([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600EA29 RID: 59945 RVA: 0x0014697C File Offset: 0x00144B7C
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetNumberOfGenerationsFromBaseType_10(type);
		}

		// Token: 0x0600EA2A RID: 59946
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern double vtkLinearExtrusionFilter_GetScaleFactor_11(HandleRef pThis);

		/// <summary>
		/// Set/Get extrusion scale factor,
		/// </summary>
		// Token: 0x0600EA2B RID: 59947 RVA: 0x00146998 File Offset: 0x00144B98
		public virtual double GetScaleFactor()
		{
			return vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetScaleFactor_11(base.GetCppThis());
		}

		// Token: 0x0600EA2C RID: 59948
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLinearExtrusionFilter_GetVector_12(HandleRef pThis);

		/// <summary>
		/// Set/Get extrusion vector. Only needs to be set if VectorExtrusion is
		/// turned on.
		/// </summary>
		// Token: 0x0600EA2D RID: 59949 RVA: 0x001469B8 File Offset: 0x00144BB8
		public virtual double[] GetVector()
		{
			IntPtr intPtr = vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetVector_12(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[3];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x0600EA2E RID: 59950
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_GetVector_13(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Set/Get extrusion vector. Only needs to be set if VectorExtrusion is
		/// turned on.
		/// </summary>
		// Token: 0x0600EA2F RID: 59951 RVA: 0x00146A00 File Offset: 0x00144C00
		public virtual void GetVector(IntPtr data)
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_GetVector_13(base.GetCppThis(), data);
		}

		// Token: 0x0600EA30 RID: 59952
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLinearExtrusionFilter_IsA_14(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600EA31 RID: 59953 RVA: 0x00146A10 File Offset: 0x00144C10
		public override int IsA(string type)
		{
			return vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_IsA_14(base.GetCppThis(), type);
		}

		// Token: 0x0600EA32 RID: 59954
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkLinearExtrusionFilter_IsTypeOf_15([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600EA33 RID: 59955 RVA: 0x00146A30 File Offset: 0x00144C30
		public new static int IsTypeOf(string type)
		{
			return vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_IsTypeOf_15(type);
		}

		// Token: 0x0600EA34 RID: 59956
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLinearExtrusionFilter_NewInstance_17(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600EA35 RID: 59957 RVA: 0x00146A4C File Offset: 0x00144C4C
		public new vtkLinearExtrusionFilter NewInstance()
		{
			vtkLinearExtrusionFilter result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_NewInstance_17(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkLinearExtrusionFilter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x0600EA36 RID: 59958
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkLinearExtrusionFilter_SafeDownCast_18(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x0600EA37 RID: 59959 RVA: 0x00146AA8 File Offset: 0x00144CA8
		public new static vtkLinearExtrusionFilter SafeDownCast(vtkObjectBase o)
		{
			vtkLinearExtrusionFilter vtkLinearExtrusionFilter = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SafeDownCast_18((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkLinearExtrusionFilter = (vtkLinearExtrusionFilter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkLinearExtrusionFilter.Register(null);
				}
			}
			return vtkLinearExtrusionFilter;
		}

		// Token: 0x0600EA38 RID: 59960
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetCapping_19(HandleRef pThis, int _arg);

		/// <summary>
		/// Turn on/off the capping of the skirt.
		/// </summary>
		// Token: 0x0600EA39 RID: 59961 RVA: 0x00146B27 File Offset: 0x00144D27
		public virtual void SetCapping(int _arg)
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetCapping_19(base.GetCppThis(), _arg);
		}

		// Token: 0x0600EA3A RID: 59962
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetExtrusionPoint_20(HandleRef pThis, double _arg1, double _arg2, double _arg3);

		/// <summary>
		/// Set/Get extrusion point. Only needs to be set if PointExtrusion is
		/// turned on. This is the point towards which extrusion occurs.
		/// </summary>
		// Token: 0x0600EA3B RID: 59963 RVA: 0x00146B37 File Offset: 0x00144D37
		public virtual void SetExtrusionPoint(double _arg1, double _arg2, double _arg3)
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetExtrusionPoint_20(base.GetCppThis(), _arg1, _arg2, _arg3);
		}

		// Token: 0x0600EA3C RID: 59964
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetExtrusionPoint_21(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Set/Get extrusion point. Only needs to be set if PointExtrusion is
		/// turned on. This is the point towards which extrusion occurs.
		/// </summary>
		// Token: 0x0600EA3D RID: 59965 RVA: 0x00146B49 File Offset: 0x00144D49
		public virtual void SetExtrusionPoint(IntPtr _arg)
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetExtrusionPoint_21(base.GetCppThis(), _arg);
		}

		// Token: 0x0600EA3E RID: 59966
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetExtrusionType_22(HandleRef pThis, int _arg);

		/// <summary>
		/// Set/Get the type of extrusion.
		/// </summary>
		// Token: 0x0600EA3F RID: 59967 RVA: 0x00146B59 File Offset: 0x00144D59
		public virtual void SetExtrusionType(int _arg)
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetExtrusionType_22(base.GetCppThis(), _arg);
		}

		// Token: 0x0600EA40 RID: 59968
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetExtrusionTypeToNormalExtrusion_23(HandleRef pThis);

		/// <summary>
		/// Set/Get the type of extrusion.
		/// </summary>
		// Token: 0x0600EA41 RID: 59969 RVA: 0x00146B69 File Offset: 0x00144D69
		public void SetExtrusionTypeToNormalExtrusion()
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetExtrusionTypeToNormalExtrusion_23(base.GetCppThis());
		}

		// Token: 0x0600EA42 RID: 59970
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetExtrusionTypeToPointExtrusion_24(HandleRef pThis);

		/// <summary>
		/// Set/Get the type of extrusion.
		/// </summary>
		// Token: 0x0600EA43 RID: 59971 RVA: 0x00146B78 File Offset: 0x00144D78
		public void SetExtrusionTypeToPointExtrusion()
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetExtrusionTypeToPointExtrusion_24(base.GetCppThis());
		}

		// Token: 0x0600EA44 RID: 59972
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetExtrusionTypeToVectorExtrusion_25(HandleRef pThis);

		/// <summary>
		/// Set/Get the type of extrusion.
		/// </summary>
		// Token: 0x0600EA45 RID: 59973 RVA: 0x00146B87 File Offset: 0x00144D87
		public void SetExtrusionTypeToVectorExtrusion()
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetExtrusionTypeToVectorExtrusion_25(base.GetCppThis());
		}

		// Token: 0x0600EA46 RID: 59974
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetScaleFactor_26(HandleRef pThis, double _arg);

		/// <summary>
		/// Set/Get extrusion scale factor,
		/// </summary>
		// Token: 0x0600EA47 RID: 59975 RVA: 0x00146B96 File Offset: 0x00144D96
		public virtual void SetScaleFactor(double _arg)
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetScaleFactor_26(base.GetCppThis(), _arg);
		}

		// Token: 0x0600EA48 RID: 59976
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetVector_27(HandleRef pThis, double _arg1, double _arg2, double _arg3);

		/// <summary>
		/// Set/Get extrusion vector. Only needs to be set if VectorExtrusion is
		/// turned on.
		/// </summary>
		// Token: 0x0600EA49 RID: 59977 RVA: 0x00146BA6 File Offset: 0x00144DA6
		public virtual void SetVector(double _arg1, double _arg2, double _arg3)
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetVector_27(base.GetCppThis(), _arg1, _arg2, _arg3);
		}

		// Token: 0x0600EA4A RID: 59978
		[DllImport("Kitware.VTK.FiltersModeling.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkLinearExtrusionFilter_SetVector_28(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Set/Get extrusion vector. Only needs to be set if VectorExtrusion is
		/// turned on.
		/// </summary>
		// Token: 0x0600EA4B RID: 59979 RVA: 0x00146BB8 File Offset: 0x00144DB8
		public virtual void SetVector(IntPtr _arg)
		{
			vtkLinearExtrusionFilter.vtkLinearExtrusionFilter_SetVector_28(base.GetCppThis(), _arg);
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x0400111E RID: 4382
		public new const string MRFullTypeName = "Kitware.VTK.vtkLinearExtrusionFilter";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x0400111F RID: 4383
		public new static readonly string MRClassNameKey = "class vtkLinearExtrusionFilter";
	}
}
