using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkAbstractContextBufferId
	/// </summary>
	/// <remarks>
	///    2D array of ids, used for picking.
	///
	///
	/// An 2D array where each element is the id of an entity drawn at the given
	/// pixel. The access is not specified in this class.
	/// The effective/concrete subclass vtkContextBufferId stores the whole buffer
	/// in RAM. The access to a value is fast and independent of the OpenGL.
	/// However it requires to first fill the whole buffer by transferring the
	/// buffer generated by OpenGL from the VRAM to the RAM. It is inefficient if
	/// the context of the scene changes during interaction.
	///
	/// The effective/concrete subclass vtkOpenGLContextBufferId keeps the buffer id
	/// on the VRAM in a texture image. The access to a value is slower than a
	/// simple read access to an array but it does not require a large transfer of
	/// data from the VRAM to the RAM.
	///
	/// </remarks>
	/// <seealso>
	///
	/// vtkContextBufferId, vtkOpenGLContextBufferId
	/// </seealso>
	// Token: 0x02000120 RID: 288
	public abstract class vtkAbstractContextBufferId : vtkObject
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x06003AC1 RID: 15041 RVA: 0x00055793 File Offset: 0x00053993
		static vtkAbstractContextBufferId()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkAbstractContextBufferId.MRClassNameKey, Type.GetType("Kitware.VTK.vtkAbstractContextBufferId"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x06003AC2 RID: 15042 RVA: 0x000557BB File Offset: 0x000539BB
		public vtkAbstractContextBufferId(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x06003AC3 RID: 15043
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkAbstractContextBufferId_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06003AC4 RID: 15044 RVA: 0x000557CC File Offset: 0x000539CC
		public new static vtkAbstractContextBufferId New()
		{
			vtkAbstractContextBufferId result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkAbstractContextBufferId.vtkAbstractContextBufferId_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkAbstractContextBufferId)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06003AC5 RID: 15045 RVA: 0x00055820 File Offset: 0x00053A20
		public vtkAbstractContextBufferId() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkAbstractContextBufferId.vtkAbstractContextBufferId_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x06003AC6 RID: 15046 RVA: 0x00055864 File Offset: 0x00053A64
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x06003AC7 RID: 15047
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkAbstractContextBufferId_Allocate_01(HandleRef pThis);

		/// <summary>
		/// Allocate the memory for at least Width*Height elements.
		/// \pre positive_width: GetWidth()&gt;0
		/// \pre positive_height: GetHeight()&gt;0
		/// </summary>
		// Token: 0x06003AC8 RID: 15048 RVA: 0x0005586F File Offset: 0x00053A6F
		public virtual void Allocate()
		{
			vtkAbstractContextBufferId.vtkAbstractContextBufferId_Allocate_01(base.GetCppThis());
		}

		// Token: 0x06003AC9 RID: 15049
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkAbstractContextBufferId_GetContext_02(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Set/Get the OpenGL context owning the texture object resource.
		/// </summary>
		// Token: 0x06003ACA RID: 15050 RVA: 0x00055880 File Offset: 0x00053A80
		public virtual vtkRenderWindow GetContext()
		{
			vtkRenderWindow vtkRenderWindow = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkAbstractContextBufferId.vtkAbstractContextBufferId_GetContext_02(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkRenderWindow = (vtkRenderWindow)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkRenderWindow.Register(null);
				}
			}
			return vtkRenderWindow;
		}

		// Token: 0x06003ACB RID: 15051
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkAbstractContextBufferId_GetHeight_03(HandleRef pThis);

		/// <summary>
		/// Number of rows. Initial value is 0.
		/// </summary>
		// Token: 0x06003ACC RID: 15052 RVA: 0x000558F0 File Offset: 0x00053AF0
		public virtual int GetHeight()
		{
			return vtkAbstractContextBufferId.vtkAbstractContextBufferId_GetHeight_03(base.GetCppThis());
		}

		// Token: 0x06003ACD RID: 15053
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkAbstractContextBufferId_GetNumberOfGenerationsFromBase_04(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06003ACE RID: 15054 RVA: 0x00055910 File Offset: 0x00053B10
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkAbstractContextBufferId.vtkAbstractContextBufferId_GetNumberOfGenerationsFromBase_04(base.GetCppThis(), type);
		}

		// Token: 0x06003ACF RID: 15055
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkAbstractContextBufferId_GetNumberOfGenerationsFromBaseType_05([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06003AD0 RID: 15056 RVA: 0x00055930 File Offset: 0x00053B30
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkAbstractContextBufferId.vtkAbstractContextBufferId_GetNumberOfGenerationsFromBaseType_05(type);
		}

		// Token: 0x06003AD1 RID: 15057
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkAbstractContextBufferId_GetPickedItem_06(HandleRef pThis, int x, int y);

		/// <summary>
		/// Return item under abscissa x and ordinate y.
		/// Abscissa go from left to right.
		/// Ordinate go from bottom to top.
		/// The return value is -1 if there is no item.
		/// \pre is_allocated: IsAllocated()
		/// \post valid_result: result&gt;=-1
		/// </summary>
		// Token: 0x06003AD2 RID: 15058 RVA: 0x0005594C File Offset: 0x00053B4C
		public virtual long GetPickedItem(int x, int y)
		{
			return vtkAbstractContextBufferId.vtkAbstractContextBufferId_GetPickedItem_06(base.GetCppThis(), x, y);
		}

		// Token: 0x06003AD3 RID: 15059
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkAbstractContextBufferId_GetWidth_07(HandleRef pThis);

		/// <summary>
		/// Number of columns. Initial value is 0.
		/// </summary>
		// Token: 0x06003AD4 RID: 15060 RVA: 0x00055970 File Offset: 0x00053B70
		public virtual int GetWidth()
		{
			return vtkAbstractContextBufferId.vtkAbstractContextBufferId_GetWidth_07(base.GetCppThis());
		}

		// Token: 0x06003AD5 RID: 15061
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkAbstractContextBufferId_IsA_08(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06003AD6 RID: 15062 RVA: 0x00055990 File Offset: 0x00053B90
		public override int IsA(string type)
		{
			return vtkAbstractContextBufferId.vtkAbstractContextBufferId_IsA_08(base.GetCppThis(), type);
		}

		// Token: 0x06003AD7 RID: 15063
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern byte vtkAbstractContextBufferId_IsAllocated_09(HandleRef pThis);

		/// <summary>
		/// Tell if the buffer has been allocated.
		/// </summary>
		// Token: 0x06003AD8 RID: 15064 RVA: 0x000559B0 File Offset: 0x00053BB0
		public virtual bool IsAllocated()
		{
			return vtkAbstractContextBufferId.vtkAbstractContextBufferId_IsAllocated_09(base.GetCppThis()) != 0;
		}

		// Token: 0x06003AD9 RID: 15065
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern byte vtkAbstractContextBufferId_IsSupported_10(HandleRef pThis);

		/// <summary>
		/// Returns if the context supports the required extensions.
		/// \pre context_is_set: this-&gt;GetContext()!=0
		/// </summary>
		// Token: 0x06003ADA RID: 15066 RVA: 0x000559D8 File Offset: 0x00053BD8
		public virtual bool IsSupported()
		{
			return vtkAbstractContextBufferId.vtkAbstractContextBufferId_IsSupported_10(base.GetCppThis()) != 0;
		}

		// Token: 0x06003ADB RID: 15067
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkAbstractContextBufferId_IsTypeOf_11([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06003ADC RID: 15068 RVA: 0x00055A00 File Offset: 0x00053C00
		public new static int IsTypeOf(string type)
		{
			return vtkAbstractContextBufferId.vtkAbstractContextBufferId_IsTypeOf_11(type);
		}

		// Token: 0x06003ADD RID: 15069
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkAbstractContextBufferId_NewInstance_13(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06003ADE RID: 15070 RVA: 0x00055A1C File Offset: 0x00053C1C
		public new vtkAbstractContextBufferId NewInstance()
		{
			vtkAbstractContextBufferId result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkAbstractContextBufferId.vtkAbstractContextBufferId_NewInstance_13(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkAbstractContextBufferId)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x06003ADF RID: 15071
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkAbstractContextBufferId_ReleaseGraphicsResources_14(HandleRef pThis);

		/// <summary>
		/// Release any graphics resources that are being consumed by this object.
		/// Default implementation is empty.
		/// </summary>
		// Token: 0x06003AE0 RID: 15072 RVA: 0x00055A76 File Offset: 0x00053C76
		public virtual void ReleaseGraphicsResources()
		{
			vtkAbstractContextBufferId.vtkAbstractContextBufferId_ReleaseGraphicsResources_14(base.GetCppThis());
		}

		// Token: 0x06003AE1 RID: 15073
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkAbstractContextBufferId_SafeDownCast_15(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06003AE2 RID: 15074 RVA: 0x00055A88 File Offset: 0x00053C88
		public new static vtkAbstractContextBufferId SafeDownCast(vtkObjectBase o)
		{
			vtkAbstractContextBufferId vtkAbstractContextBufferId = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkAbstractContextBufferId.vtkAbstractContextBufferId_SafeDownCast_15((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkAbstractContextBufferId = (vtkAbstractContextBufferId)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkAbstractContextBufferId.Register(null);
				}
			}
			return vtkAbstractContextBufferId;
		}

		// Token: 0x06003AE3 RID: 15075
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkAbstractContextBufferId_SetContext_16(HandleRef pThis, HandleRef context);

		/// <summary>
		/// Set/Get the OpenGL context owning the texture object resource.
		/// </summary>
		// Token: 0x06003AE4 RID: 15076 RVA: 0x00055B08 File Offset: 0x00053D08
		public virtual void SetContext(vtkRenderWindow context)
		{
			vtkAbstractContextBufferId.vtkAbstractContextBufferId_SetContext_16(base.GetCppThis(), (context == null) ? default(HandleRef) : context.GetCppThis());
		}

		// Token: 0x06003AE5 RID: 15077
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkAbstractContextBufferId_SetHeight_17(HandleRef pThis, int _arg);

		/// <summary>
		/// Set the number of rows. Initial value is 0.
		/// </summary>
		// Token: 0x06003AE6 RID: 15078 RVA: 0x00055B37 File Offset: 0x00053D37
		public virtual void SetHeight(int _arg)
		{
			vtkAbstractContextBufferId.vtkAbstractContextBufferId_SetHeight_17(base.GetCppThis(), _arg);
		}

		// Token: 0x06003AE7 RID: 15079
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkAbstractContextBufferId_SetValues_18(HandleRef pThis, int srcXmin, int srcYmin);

		/// <summary>
		/// Copy the contents of the current read buffer to the internal structure
		/// starting at lower left corner of the framebuffer (srcXmin,srcYmin).
		/// \pre is_allocated: this-&gt;IsAllocated()
		/// </summary>
		// Token: 0x06003AE8 RID: 15080 RVA: 0x00055B47 File Offset: 0x00053D47
		public virtual void SetValues(int srcXmin, int srcYmin)
		{
			vtkAbstractContextBufferId.vtkAbstractContextBufferId_SetValues_18(base.GetCppThis(), srcXmin, srcYmin);
		}

		// Token: 0x06003AE9 RID: 15081
		[DllImport("Kitware.VTK.RenderingContext2D.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkAbstractContextBufferId_SetWidth_19(HandleRef pThis, int _arg);

		/// <summary>
		/// Set the number of columns. Initial value is 0.
		/// </summary>
		// Token: 0x06003AEA RID: 15082 RVA: 0x00055B58 File Offset: 0x00053D58
		public virtual void SetWidth(int _arg)
		{
			vtkAbstractContextBufferId.vtkAbstractContextBufferId_SetWidth_19(base.GetCppThis(), _arg);
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x04000679 RID: 1657
		public new const string MRFullTypeName = "Kitware.VTK.vtkAbstractContextBufferId";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x0400067A RID: 1658
		public new static readonly string MRClassNameKey = "class vtkAbstractContextBufferId";
	}
}
