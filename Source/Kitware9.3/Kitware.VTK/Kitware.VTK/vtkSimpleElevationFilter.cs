using System;
using System.Reflection;
using System.Runtime.InteropServices;
using Kitware.mummy.Runtime;

namespace Kitware.VTK
{
	/// <summary>
	///    vtkSimpleElevationFilter
	/// </summary>
	/// <remarks>
	///    generate scalars along a specified direction
	///
	/// vtkSimpleElevationFilter is a filter to generate scalar values from a
	/// dataset.  The scalar values are generated by dotting a user-specified
	/// vector against a vector defined from the input dataset points to the
	/// origin.
	///
	/// @warning
	/// This class has been threaded with vtkSMPTools. Using TBB or other
	/// non-sequential type (set in the CMake variable
	/// VTK_SMP_IMPLEMENTATION_TYPE) may improve performance significantly.  Note
	/// however that the associated threading/templating implements a fast path,
	/// which will only kick in when the input has explicit point representation
	/// (e.g. a vtkPointSet).
	///
	/// @warning
	/// See also vtkElevationFilter provides more control over the operation,
	/// including clamping the output scalars within a range.
	///
	/// </remarks>
	/// <seealso>
	///
	/// vtkElevationFilter
	/// </seealso>
	// Token: 0x0200099B RID: 2459
	public class vtkSimpleElevationFilter : vtkDataSetAlgorithm
	{
		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x06019A8B RID: 105099 RVA: 0x0023ACA3 File Offset: 0x00238EA3
		static vtkSimpleElevationFilter()
		{
			Methods.RegisterType(Assembly.GetExecutingAssembly(), vtkSimpleElevationFilter.MRClassNameKey, Type.GetType("Kitware.VTK.vtkSimpleElevationFilter"));
		}

		/// <summary>
		/// Automatically generated constructor - called from generated code.
		/// DO NOT call directly.
		/// </summary>
		// Token: 0x06019A8C RID: 105100 RVA: 0x0023ACCB File Offset: 0x00238ECB
		public vtkSimpleElevationFilter(IntPtr rawCppThis, bool callDisposalMethod, bool strong) : base(rawCppThis, callDisposalMethod, strong)
		{
		}

		// Token: 0x06019A8D RID: 105101
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkSimpleElevationFilter_New(ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		/// Construct object with Vector=(0,0,1).
		/// </summary>
		// Token: 0x06019A8E RID: 105102 RVA: 0x0023ACDC File Offset: 0x00238EDC
		public new static vtkSimpleElevationFilter New()
		{
			vtkSimpleElevationFilter result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkSimpleElevationFilter.vtkSimpleElevationFilter_New(ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkSimpleElevationFilter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		/// <summary>
		/// Construct object with Vector=(0,0,1).
		/// </summary>
		// Token: 0x06019A8F RID: 105103 RVA: 0x0023AD30 File Offset: 0x00238F30
		public vtkSimpleElevationFilter() : base(IntPtr.Zero, false, false)
		{
			uint num = 0U;
			uint maxValue = uint.MaxValue;
			uint num2 = 0U;
			IntPtr rawCppThis = vtkSimpleElevationFilter.vtkSimpleElevationFilter_New(ref num, ref maxValue, ref num2);
			base.SetCppThis(rawCppThis, true, num != 0U && num2 >= 2U);
		}

		/// <summary>
		/// Automatically generated protected Dispose method - called from
		/// public Dispose or the C# destructor. DO NOT call directly.
		/// </summary>
		// Token: 0x06019A90 RID: 105104 RVA: 0x0023AD74 File Offset: 0x00238F74
		protected override void Dispose(bool disposing)
		{
			base.Dispose(disposing);
		}

		// Token: 0x06019A91 RID: 105105
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkSimpleElevationFilter_GetNumberOfGenerationsFromBase_01(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06019A92 RID: 105106 RVA: 0x0023AD80 File Offset: 0x00238F80
		public override long GetNumberOfGenerationsFromBase(string type)
		{
			return vtkSimpleElevationFilter.vtkSimpleElevationFilter_GetNumberOfGenerationsFromBase_01(base.GetCppThis(), type);
		}

		// Token: 0x06019A93 RID: 105107
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern long vtkSimpleElevationFilter_GetNumberOfGenerationsFromBaseType_02([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06019A94 RID: 105108 RVA: 0x0023ADA0 File Offset: 0x00238FA0
		public new static long GetNumberOfGenerationsFromBaseType(string type)
		{
			return vtkSimpleElevationFilter.vtkSimpleElevationFilter_GetNumberOfGenerationsFromBaseType_02(type);
		}

		// Token: 0x06019A95 RID: 105109
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkSimpleElevationFilter_GetVector_03(HandleRef pThis);

		/// <summary>
		/// Define the vector with which to dot against.
		/// </summary>
		// Token: 0x06019A96 RID: 105110 RVA: 0x0023ADBC File Offset: 0x00238FBC
		public virtual double[] GetVector()
		{
			IntPtr intPtr = vtkSimpleElevationFilter.vtkSimpleElevationFilter_GetVector_03(base.GetCppThis());
			double[] array = null;
			if (IntPtr.Zero != intPtr)
			{
				array = new double[3];
				Marshal.Copy(intPtr, array, 0, array.Length);
			}
			return array;
		}

		// Token: 0x06019A97 RID: 105111
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkSimpleElevationFilter_GetVector_04(HandleRef pThis, IntPtr data);

		/// <summary>
		/// Define the vector with which to dot against.
		/// </summary>
		// Token: 0x06019A98 RID: 105112 RVA: 0x0023AE04 File Offset: 0x00239004
		public virtual void GetVector(IntPtr data)
		{
			vtkSimpleElevationFilter.vtkSimpleElevationFilter_GetVector_04(base.GetCppThis(), data);
		}

		// Token: 0x06019A99 RID: 105113
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkSimpleElevationFilter_IsA_05(HandleRef pThis, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06019A9A RID: 105114 RVA: 0x0023AE14 File Offset: 0x00239014
		public override int IsA(string type)
		{
			return vtkSimpleElevationFilter.vtkSimpleElevationFilter_IsA_05(base.GetCppThis(), type);
		}

		// Token: 0x06019A9B RID: 105115
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern int vtkSimpleElevationFilter_IsTypeOf_06([MarshalAs(UnmanagedType.LPUTF8Str)] string type);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06019A9C RID: 105116 RVA: 0x0023AE34 File Offset: 0x00239034
		public new static int IsTypeOf(string type)
		{
			return vtkSimpleElevationFilter.vtkSimpleElevationFilter_IsTypeOf_06(type);
		}

		// Token: 0x06019A9D RID: 105117
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkSimpleElevationFilter_NewInstance_08(HandleRef pThis, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06019A9E RID: 105118 RVA: 0x0023AE50 File Offset: 0x00239050
		public new vtkSimpleElevationFilter NewInstance()
		{
			vtkSimpleElevationFilter result = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkSimpleElevationFilter.vtkSimpleElevationFilter_NewInstance_08(base.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				result = (vtkSimpleElevationFilter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
			}
			return result;
		}

		// Token: 0x06019A9F RID: 105119
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern IntPtr vtkSimpleElevationFilter_SafeDownCast_09(HandleRef o, ref uint mteStatus, ref uint mteIndex, ref uint rawRefCount);

		/// <summary>
		///             Undocumented Block
		/// </summary>
		// Token: 0x06019AA0 RID: 105120 RVA: 0x0023AEAC File Offset: 0x002390AC
		public new static vtkSimpleElevationFilter SafeDownCast(vtkObjectBase o)
		{
			vtkSimpleElevationFilter vtkSimpleElevationFilter = null;
			uint mteStatus = 0U;
			uint maxValue = uint.MaxValue;
			uint rawRefCount = 0U;
			IntPtr intPtr = vtkSimpleElevationFilter.vtkSimpleElevationFilter_SafeDownCast_09((o == null) ? default(HandleRef) : o.GetCppThis(), ref mteStatus, ref maxValue, ref rawRefCount);
			if (IntPtr.Zero != intPtr)
			{
				bool flag;
				vtkSimpleElevationFilter = (vtkSimpleElevationFilter)Methods.CreateWrappedObject(mteStatus, maxValue, rawRefCount, intPtr, true, out flag);
				if (flag)
				{
					vtkSimpleElevationFilter.Register(null);
				}
			}
			return vtkSimpleElevationFilter;
		}

		// Token: 0x06019AA1 RID: 105121
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkSimpleElevationFilter_SetVector_10(HandleRef pThis, double _arg1, double _arg2, double _arg3);

		/// <summary>
		/// Define the vector with which to dot against.
		/// </summary>
		// Token: 0x06019AA2 RID: 105122 RVA: 0x0023AF2B File Offset: 0x0023912B
		public virtual void SetVector(double _arg1, double _arg2, double _arg3)
		{
			vtkSimpleElevationFilter.vtkSimpleElevationFilter_SetVector_10(base.GetCppThis(), _arg1, _arg2, _arg3);
		}

		// Token: 0x06019AA3 RID: 105123
		[DllImport("Kitware.VTK.FiltersCore.Unmanaged.dll", CallingConvention = CallingConvention.Cdecl)]
		internal static extern void vtkSimpleElevationFilter_SetVector_11(HandleRef pThis, IntPtr _arg);

		/// <summary>
		/// Define the vector with which to dot against.
		/// </summary>
		// Token: 0x06019AA4 RID: 105124 RVA: 0x0023AF3D File Offset: 0x0023913D
		public virtual void SetVector(IntPtr _arg)
		{
			vtkSimpleElevationFilter.vtkSimpleElevationFilter_SetVector_11(base.GetCppThis(), _arg);
		}

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x04001BFB RID: 7163
		public new const string MRFullTypeName = "Kitware.VTK.vtkSimpleElevationFilter";

		/// <summary>
		/// Automatically generated type registration mechanics.
		/// </summary>
		// Token: 0x04001BFC RID: 7164
		public new static readonly string MRClassNameKey = "class vtkSimpleElevationFilter";
	}
}
